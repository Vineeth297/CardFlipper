//////////////////////////////////////////
//
// NOTE: This is *not* a valid shader file
//
///////////////////////////////////////////
Shader "TextMeshPro/Distance Field" {
Properties {
_FaceTex ("Face Texture", 2D) = "white" { }
_FaceUVSpeedX ("Face UV Speed X", Range(-5, 5)) = 0
_FaceUVSpeedY ("Face UV Speed Y", Range(-5, 5)) = 0
_FaceColor ("Face Color", Color) = (1,1,1,1)
_FaceDilate ("Face Dilate", Range(-1, 1)) = 0
_OutlineColor ("Outline Color", Color) = (0,0,0,1)
_OutlineTex ("Outline Texture", 2D) = "white" { }
_OutlineUVSpeedX ("Outline UV Speed X", Range(-5, 5)) = 0
_OutlineUVSpeedY ("Outline UV Speed Y", Range(-5, 5)) = 0
_OutlineWidth ("Outline Thickness", Range(0, 1)) = 0
_OutlineSoftness ("Outline Softness", Range(0, 1)) = 0
_Bevel ("Bevel", Range(0, 1)) = 0.5
_BevelOffset ("Bevel Offset", Range(-0.5, 0.5)) = 0
_BevelWidth ("Bevel Width", Range(-0.5, 0.5)) = 0
_BevelClamp ("Bevel Clamp", Range(0, 1)) = 0
_BevelRoundness ("Bevel Roundness", Range(0, 1)) = 0
_LightAngle ("Light Angle", Range(0, 6.283185)) = 3.1416
_SpecularColor ("Specular", Color) = (1,1,1,1)
_SpecularPower ("Specular", Range(0, 4)) = 2
_Reflectivity ("Reflectivity", Range(5, 15)) = 10
_Diffuse ("Diffuse", Range(0, 1)) = 0.5
_Ambient ("Ambient", Range(1, 0)) = 0.5
_BumpMap ("Normal map", 2D) = "bump" { }
_BumpOutline ("Bump Outline", Range(0, 1)) = 0
_BumpFace ("Bump Face", Range(0, 1)) = 0
_ReflectFaceColor ("Reflection Color", Color) = (0,0,0,1)
_ReflectOutlineColor ("Reflection Color", Color) = (0,0,0,1)
_Cube ("Reflection Cubemap", Cube) = "black" { }
_EnvMatrixRotation ("Texture Rotation", Vector) = (0,0,0,0)
_UnderlayColor ("Border Color", Color) = (0,0,0,0.5)
_UnderlayOffsetX ("Border OffsetX", Range(-1, 1)) = 0
_UnderlayOffsetY ("Border OffsetY", Range(-1, 1)) = 0
_UnderlayDilate ("Border Dilate", Range(-1, 1)) = 0
_UnderlaySoftness ("Border Softness", Range(0, 1)) = 0
_GlowColor ("Color", Color) = (0,1,0,0.5)
_GlowOffset ("Offset", Range(-1, 1)) = 0
_GlowInner ("Inner", Range(0, 1)) = 0.05
_GlowOuter ("Outer", Range(0, 1)) = 0.05
_GlowPower ("Falloff", Range(1, 0)) = 0.75
_WeightNormal ("Weight Normal", Float) = 0
_WeightBold ("Weight Bold", Float) = 0.5
_ShaderFlags ("Flags", Float) = 0
_ScaleRatioA ("Scale RatioA", Float) = 1
_ScaleRatioB ("Scale RatioB", Float) = 1
_ScaleRatioC ("Scale RatioC", Float) = 1
_MainTex ("Font Atlas", 2D) = "white" { }
_TextureWidth ("Texture Width", Float) = 512
_TextureHeight ("Texture Height", Float) = 512
_GradientScale ("Gradient Scale", Float) = 5
_ScaleX ("Scale X", Float) = 1
_ScaleY ("Scale Y", Float) = 1
_PerspectiveFilter ("Perspective Correction", Range(0, 1)) = 0.875
_Sharpness ("Sharpness", Range(-1, 1)) = 0
_VertexOffsetX ("Vertex OffsetX", Float) = 0
_VertexOffsetY ("Vertex OffsetY", Float) = 0
_MaskCoord ("Mask Coordinates", Vector) = (0,0,32767,32767)
_ClipRect ("Clip Rect", Vector) = (-32767,-32767,32767,32767)
_MaskSoftnessX ("Mask SoftnessX", Float) = 0
_MaskSoftnessY ("Mask SoftnessY", Float) = 0
_StencilComp ("Stencil Comparison", Float) = 8
_Stencil ("Stencil ID", Float) = 0
_StencilOp ("Stencil Operation", Float) = 0
_StencilWriteMask ("Stencil Write Mask", Float) = 255
_StencilReadMask ("Stencil Read Mask", Float) = 255
_CullMode ("Cull Mode", Float) = 0
_ColorMask ("Color Mask", Float) = 15
}
SubShader {
 Tags { "IGNOREPROJECTOR" = "true" "QUEUE" = "Transparent" "RenderType" = "Transparent" }
 Pass {
  Tags { "IGNOREPROJECTOR" = "true" "QUEUE" = "Transparent" "RenderType" = "Transparent" }
  ZTest Off
  ZWrite Off
  Cull Off
  GpuProgramID 8564
Program "vp" {
SubProgram "gles3 hw_tier00 " {
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _FaceDilate;
uniform 	float _OutlineSoftness;
uniform 	float _OutlineWidth;
uniform 	vec4 hlslcc_mtx4x4_EnvMatrix[4];
uniform 	float _WeightNormal;
uniform 	float _WeightBold;
uniform 	float _ScaleRatioA;
uniform 	float _VertexOffsetX;
uniform 	float _VertexOffsetY;
uniform 	vec4 _ClipRect;
uniform 	float _MaskSoftnessX;
uniform 	float _MaskSoftnessY;
uniform 	float _GradientScale;
uniform 	float _ScaleX;
uniform 	float _ScaleY;
uniform 	float _PerspectiveFilter;
uniform 	float _Sharpness;
uniform 	vec4 _FaceTex_ST;
uniform 	vec4 _OutlineTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
out mediump vec4 vs_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD5;
vec3 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec3 u_xlat6;
vec2 u_xlat8;
bool u_xlatb8;
float u_xlat12;
bool u_xlatb12;
float u_xlat13;
void main()
{
    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
    gl_Position = u_xlat2;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat8.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;
    u_xlat8.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat8.xy;
    u_xlat8.xy = abs(u_xlat8.xy) * vec2(_ScaleX, _ScaleY);
    u_xlat8.xy = u_xlat2.ww / u_xlat8.xy;
    u_xlat13 = dot(u_xlat8.xy, u_xlat8.xy);
    u_xlat8.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) * vec2(0.25, 0.25) + u_xlat8.xy;
    vs_TEXCOORD2.zw = vec2(0.25, 0.25) / u_xlat8.xy;
    u_xlat8.x = inversesqrt(u_xlat13);
    u_xlat12 = abs(in_TEXCOORD1.y) * _GradientScale;
    u_xlat13 = _Sharpness + 1.0;
    u_xlat12 = u_xlat12 * u_xlat13;
    u_xlat13 = u_xlat12 * u_xlat8.x;
    u_xlat2.x = (-_PerspectiveFilter) + 1.0;
    u_xlat2.x = abs(u_xlat13) * u_xlat2.x;
    u_xlat8.x = u_xlat8.x * u_xlat12 + (-u_xlat2.x);
    u_xlat3.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat3.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat3.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat6.xyz = vec3(u_xlat12) * u_xlat3.xyz;
    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat3.xyz = vec3(u_xlat12) * u_xlat1.xyz;
    u_xlat12 = dot(u_xlat6.xyz, u_xlat3.xyz);
    u_xlat8.x = abs(u_xlat12) * u_xlat8.x + u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(hlslcc_mtx4x4glstate_matrix_projection[3].w==0.0);
#else
    u_xlatb12 = hlslcc_mtx4x4glstate_matrix_projection[3].w==0.0;
#endif
    u_xlat6.x = (u_xlatb12) ? u_xlat8.x : u_xlat13;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.0>=in_TEXCOORD1.y);
#else
    u_xlatb8 = 0.0>=in_TEXCOORD1.y;
#endif
    u_xlat8.x = u_xlatb8 ? 1.0 : float(0.0);
    u_xlat12 = (-_WeightNormal) + _WeightBold;
    u_xlat8.x = u_xlat8.x * u_xlat12 + _WeightNormal;
    u_xlat8.x = u_xlat8.x * 0.25 + _FaceDilate;
    u_xlat8.x = u_xlat8.x * _ScaleRatioA;
    u_xlat6.z = u_xlat8.x * 0.5;
    vs_TEXCOORD1.yw = u_xlat6.xz;
    u_xlat12 = 0.5 / u_xlat6.x;
    u_xlat13 = (-_OutlineWidth) * _ScaleRatioA + 1.0;
    u_xlat13 = (-_OutlineSoftness) * _ScaleRatioA + u_xlat13;
    u_xlat13 = u_xlat13 * 0.5 + (-u_xlat12);
    vs_TEXCOORD1.x = (-u_xlat8.x) * 0.5 + u_xlat13;
    u_xlat8.x = (-u_xlat8.x) * 0.5 + 0.5;
    vs_TEXCOORD1.z = u_xlat12 + u_xlat8.x;
    u_xlat2 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));
    u_xlat2 = min(u_xlat2, vec4(2e+10, 2e+10, 2e+10, 2e+10));
    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + (-u_xlat2.xy);
    vs_TEXCOORD2.xy = (-u_xlat2.zw) + u_xlat0.xy;
    u_xlat0.xyz = u_xlat1.yyy * hlslcc_mtx4x4_EnvMatrix[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4_EnvMatrix[0].xyz * u_xlat1.xxx + u_xlat0.xyz;
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4_EnvMatrix[2].xyz * u_xlat1.zzz + u_xlat0.xyz;
    u_xlat0.x = in_TEXCOORD1.x * 0.000244140625;
    u_xlat8.x = floor(u_xlat0.x);
    u_xlat8.y = (-u_xlat8.x) * 4096.0 + in_TEXCOORD1.x;
    u_xlat0.xy = u_xlat8.xy * vec2(0.001953125, 0.001953125);
    vs_TEXCOORD5.xy = u_xlat0.xy * _FaceTex_ST.xy + _FaceTex_ST.zw;
    vs_TEXCOORD5.zw = u_xlat0.xy * _OutlineTex_ST.xy + _OutlineTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _Time;
uniform 	float _FaceUVSpeedX;
uniform 	float _FaceUVSpeedY;
uniform 	mediump vec4 _FaceColor;
uniform 	float _OutlineSoftness;
uniform 	float _OutlineUVSpeedX;
uniform 	float _OutlineUVSpeedY;
uniform 	mediump vec4 _OutlineColor;
uniform 	float _OutlineWidth;
uniform 	float _ScaleRatioA;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _FaceTex;
UNITY_LOCATION(2) uniform mediump sampler2D _OutlineTex;
in mediump vec4 vs_COLOR0;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
mediump float u_xlat16_1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
float u_xlat4;
mediump vec4 u_xlat16_4;
float u_xlat5;
bool u_xlatb5;
mediump float u_xlat16_6;
float u_xlat9;
mediump float u_xlat16_11;
void main()
{
    u_xlat16_0.x = texture(_MainTex, vs_TEXCOORD0.xy).w;
    u_xlat5 = u_xlat16_0.x + (-vs_TEXCOORD1.x);
    u_xlat0.x = (-u_xlat16_0.x) + vs_TEXCOORD1.z;
#ifdef UNITY_ADRENO_ES3
    u_xlatb5 = !!(u_xlat5<0.0);
#else
    u_xlatb5 = u_xlat5<0.0;
#endif
    if(u_xlatb5){discard;}
    u_xlat5 = _OutlineWidth * _ScaleRatioA;
    u_xlat5 = u_xlat5 * vs_TEXCOORD1.y;
    u_xlat16_1 = min(u_xlat5, 1.0);
    u_xlat16_6 = u_xlat5 * 0.5;
    u_xlat16_1 = sqrt(u_xlat16_1);
    u_xlat16_11 = u_xlat0.x * vs_TEXCOORD1.y + u_xlat16_6;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_11 = min(max(u_xlat16_11, 0.0), 1.0);
#else
    u_xlat16_11 = clamp(u_xlat16_11, 0.0, 1.0);
#endif
    u_xlat16_6 = u_xlat0.x * vs_TEXCOORD1.y + (-u_xlat16_6);
    u_xlat16_1 = u_xlat16_1 * u_xlat16_11;
    u_xlat0.xy = vec2(_OutlineUVSpeedX, _OutlineUVSpeedY) * _Time.yy + vs_TEXCOORD5.zw;
    u_xlat16_0 = texture(_OutlineTex, u_xlat0.xy);
    u_xlat2 = u_xlat16_0 * _OutlineColor;
    u_xlat16_3.xyz = vs_COLOR0.xyz * _FaceColor.xyz;
    u_xlat0.xy = vec2(_FaceUVSpeedX, _FaceUVSpeedY) * _Time.yy + vs_TEXCOORD5.xy;
    u_xlat16_4 = texture(_FaceTex, u_xlat0.xy);
    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;
    u_xlat4 = u_xlat16_4.w * _FaceColor.w;
    u_xlat16_3.xyz = u_xlat0.xyz * vec3(u_xlat4);
    u_xlat16_2.xyz = u_xlat2.xyz * u_xlat2.www + (-u_xlat16_3.xyz);
    u_xlat16_2.w = _OutlineColor.w * u_xlat16_0.w + (-u_xlat4);
    u_xlat16_2 = vec4(u_xlat16_1) * u_xlat16_2;
    u_xlat16_0.xyz = u_xlat0.xyz * vec3(u_xlat4) + u_xlat16_2.xyz;
    u_xlat16_0.w = _FaceColor.w * u_xlat16_4.w + u_xlat16_2.w;
    u_xlat4 = _OutlineSoftness * _ScaleRatioA;
    u_xlat9 = u_xlat4 * vs_TEXCOORD1.y;
    u_xlat16_1 = u_xlat4 * vs_TEXCOORD1.y + 1.0;
    u_xlat16_6 = u_xlat9 * 0.5 + u_xlat16_6;
    u_xlat16_1 = u_xlat16_6 / u_xlat16_1;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1 = min(max(u_xlat16_1, 0.0), 1.0);
#else
    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);
#endif
    u_xlat16_1 = (-u_xlat16_1) + 1.0;
    u_xlat16_0 = u_xlat16_0 * vec4(u_xlat16_1);
    SV_Target0 = u_xlat16_0 * vs_COLOR0.wwww;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _FaceDilate;
uniform 	float _OutlineSoftness;
uniform 	float _OutlineWidth;
uniform 	vec4 hlslcc_mtx4x4_EnvMatrix[4];
uniform 	float _WeightNormal;
uniform 	float _WeightBold;
uniform 	float _ScaleRatioA;
uniform 	float _VertexOffsetX;
uniform 	float _VertexOffsetY;
uniform 	vec4 _ClipRect;
uniform 	float _MaskSoftnessX;
uniform 	float _MaskSoftnessY;
uniform 	float _GradientScale;
uniform 	float _ScaleX;
uniform 	float _ScaleY;
uniform 	float _PerspectiveFilter;
uniform 	float _Sharpness;
uniform 	vec4 _FaceTex_ST;
uniform 	vec4 _OutlineTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
out mediump vec4 vs_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD5;
vec3 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec3 u_xlat6;
vec2 u_xlat8;
bool u_xlatb8;
float u_xlat12;
bool u_xlatb12;
float u_xlat13;
void main()
{
    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
    gl_Position = u_xlat2;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat8.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;
    u_xlat8.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat8.xy;
    u_xlat8.xy = abs(u_xlat8.xy) * vec2(_ScaleX, _ScaleY);
    u_xlat8.xy = u_xlat2.ww / u_xlat8.xy;
    u_xlat13 = dot(u_xlat8.xy, u_xlat8.xy);
    u_xlat8.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) * vec2(0.25, 0.25) + u_xlat8.xy;
    vs_TEXCOORD2.zw = vec2(0.25, 0.25) / u_xlat8.xy;
    u_xlat8.x = inversesqrt(u_xlat13);
    u_xlat12 = abs(in_TEXCOORD1.y) * _GradientScale;
    u_xlat13 = _Sharpness + 1.0;
    u_xlat12 = u_xlat12 * u_xlat13;
    u_xlat13 = u_xlat12 * u_xlat8.x;
    u_xlat2.x = (-_PerspectiveFilter) + 1.0;
    u_xlat2.x = abs(u_xlat13) * u_xlat2.x;
    u_xlat8.x = u_xlat8.x * u_xlat12 + (-u_xlat2.x);
    u_xlat3.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat3.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat3.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat6.xyz = vec3(u_xlat12) * u_xlat3.xyz;
    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat3.xyz = vec3(u_xlat12) * u_xlat1.xyz;
    u_xlat12 = dot(u_xlat6.xyz, u_xlat3.xyz);
    u_xlat8.x = abs(u_xlat12) * u_xlat8.x + u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(hlslcc_mtx4x4glstate_matrix_projection[3].w==0.0);
#else
    u_xlatb12 = hlslcc_mtx4x4glstate_matrix_projection[3].w==0.0;
#endif
    u_xlat6.x = (u_xlatb12) ? u_xlat8.x : u_xlat13;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.0>=in_TEXCOORD1.y);
#else
    u_xlatb8 = 0.0>=in_TEXCOORD1.y;
#endif
    u_xlat8.x = u_xlatb8 ? 1.0 : float(0.0);
    u_xlat12 = (-_WeightNormal) + _WeightBold;
    u_xlat8.x = u_xlat8.x * u_xlat12 + _WeightNormal;
    u_xlat8.x = u_xlat8.x * 0.25 + _FaceDilate;
    u_xlat8.x = u_xlat8.x * _ScaleRatioA;
    u_xlat6.z = u_xlat8.x * 0.5;
    vs_TEXCOORD1.yw = u_xlat6.xz;
    u_xlat12 = 0.5 / u_xlat6.x;
    u_xlat13 = (-_OutlineWidth) * _ScaleRatioA + 1.0;
    u_xlat13 = (-_OutlineSoftness) * _ScaleRatioA + u_xlat13;
    u_xlat13 = u_xlat13 * 0.5 + (-u_xlat12);
    vs_TEXCOORD1.x = (-u_xlat8.x) * 0.5 + u_xlat13;
    u_xlat8.x = (-u_xlat8.x) * 0.5 + 0.5;
    vs_TEXCOORD1.z = u_xlat12 + u_xlat8.x;
    u_xlat2 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));
    u_xlat2 = min(u_xlat2, vec4(2e+10, 2e+10, 2e+10, 2e+10));
    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + (-u_xlat2.xy);
    vs_TEXCOORD2.xy = (-u_xlat2.zw) + u_xlat0.xy;
    u_xlat0.xyz = u_xlat1.yyy * hlslcc_mtx4x4_EnvMatrix[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4_EnvMatrix[0].xyz * u_xlat1.xxx + u_xlat0.xyz;
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4_EnvMatrix[2].xyz * u_xlat1.zzz + u_xlat0.xyz;
    u_xlat0.x = in_TEXCOORD1.x * 0.000244140625;
    u_xlat8.x = floor(u_xlat0.x);
    u_xlat8.y = (-u_xlat8.x) * 4096.0 + in_TEXCOORD1.x;
    u_xlat0.xy = u_xlat8.xy * vec2(0.001953125, 0.001953125);
    vs_TEXCOORD5.xy = u_xlat0.xy * _FaceTex_ST.xy + _FaceTex_ST.zw;
    vs_TEXCOORD5.zw = u_xlat0.xy * _OutlineTex_ST.xy + _OutlineTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _Time;
uniform 	float _FaceUVSpeedX;
uniform 	float _FaceUVSpeedY;
uniform 	mediump vec4 _FaceColor;
uniform 	float _OutlineSoftness;
uniform 	float _OutlineUVSpeedX;
uniform 	float _OutlineUVSpeedY;
uniform 	mediump vec4 _OutlineColor;
uniform 	float _OutlineWidth;
uniform 	float _ScaleRatioA;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _FaceTex;
UNITY_LOCATION(2) uniform mediump sampler2D _OutlineTex;
in mediump vec4 vs_COLOR0;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
mediump float u_xlat16_1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
float u_xlat4;
mediump vec4 u_xlat16_4;
float u_xlat5;
bool u_xlatb5;
mediump float u_xlat16_6;
float u_xlat9;
mediump float u_xlat16_11;
void main()
{
    u_xlat16_0.x = texture(_MainTex, vs_TEXCOORD0.xy).w;
    u_xlat5 = u_xlat16_0.x + (-vs_TEXCOORD1.x);
    u_xlat0.x = (-u_xlat16_0.x) + vs_TEXCOORD1.z;
#ifdef UNITY_ADRENO_ES3
    u_xlatb5 = !!(u_xlat5<0.0);
#else
    u_xlatb5 = u_xlat5<0.0;
#endif
    if(u_xlatb5){discard;}
    u_xlat5 = _OutlineWidth * _ScaleRatioA;
    u_xlat5 = u_xlat5 * vs_TEXCOORD1.y;
    u_xlat16_1 = min(u_xlat5, 1.0);
    u_xlat16_6 = u_xlat5 * 0.5;
    u_xlat16_1 = sqrt(u_xlat16_1);
    u_xlat16_11 = u_xlat0.x * vs_TEXCOORD1.y + u_xlat16_6;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_11 = min(max(u_xlat16_11, 0.0), 1.0);
#else
    u_xlat16_11 = clamp(u_xlat16_11, 0.0, 1.0);
#endif
    u_xlat16_6 = u_xlat0.x * vs_TEXCOORD1.y + (-u_xlat16_6);
    u_xlat16_1 = u_xlat16_1 * u_xlat16_11;
    u_xlat0.xy = vec2(_OutlineUVSpeedX, _OutlineUVSpeedY) * _Time.yy + vs_TEXCOORD5.zw;
    u_xlat16_0 = texture(_OutlineTex, u_xlat0.xy);
    u_xlat2 = u_xlat16_0 * _OutlineColor;
    u_xlat16_3.xyz = vs_COLOR0.xyz * _FaceColor.xyz;
    u_xlat0.xy = vec2(_FaceUVSpeedX, _FaceUVSpeedY) * _Time.yy + vs_TEXCOORD5.xy;
    u_xlat16_4 = texture(_FaceTex, u_xlat0.xy);
    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;
    u_xlat4 = u_xlat16_4.w * _FaceColor.w;
    u_xlat16_3.xyz = u_xlat0.xyz * vec3(u_xlat4);
    u_xlat16_2.xyz = u_xlat2.xyz * u_xlat2.www + (-u_xlat16_3.xyz);
    u_xlat16_2.w = _OutlineColor.w * u_xlat16_0.w + (-u_xlat4);
    u_xlat16_2 = vec4(u_xlat16_1) * u_xlat16_2;
    u_xlat16_0.xyz = u_xlat0.xyz * vec3(u_xlat4) + u_xlat16_2.xyz;
    u_xlat16_0.w = _FaceColor.w * u_xlat16_4.w + u_xlat16_2.w;
    u_xlat4 = _OutlineSoftness * _ScaleRatioA;
    u_xlat9 = u_xlat4 * vs_TEXCOORD1.y;
    u_xlat16_1 = u_xlat4 * vs_TEXCOORD1.y + 1.0;
    u_xlat16_6 = u_xlat9 * 0.5 + u_xlat16_6;
    u_xlat16_1 = u_xlat16_6 / u_xlat16_1;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1 = min(max(u_xlat16_1, 0.0), 1.0);
#else
    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);
#endif
    u_xlat16_1 = (-u_xlat16_1) + 1.0;
    u_xlat16_0 = u_xlat16_0 * vec4(u_xlat16_1);
    SV_Target0 = u_xlat16_0 * vs_COLOR0.wwww;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _FaceDilate;
uniform 	float _OutlineSoftness;
uniform 	float _OutlineWidth;
uniform 	vec4 hlslcc_mtx4x4_EnvMatrix[4];
uniform 	float _WeightNormal;
uniform 	float _WeightBold;
uniform 	float _ScaleRatioA;
uniform 	float _VertexOffsetX;
uniform 	float _VertexOffsetY;
uniform 	vec4 _ClipRect;
uniform 	float _MaskSoftnessX;
uniform 	float _MaskSoftnessY;
uniform 	float _GradientScale;
uniform 	float _ScaleX;
uniform 	float _ScaleY;
uniform 	float _PerspectiveFilter;
uniform 	float _Sharpness;
uniform 	vec4 _FaceTex_ST;
uniform 	vec4 _OutlineTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
out mediump vec4 vs_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD5;
vec3 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec3 u_xlat6;
vec2 u_xlat8;
bool u_xlatb8;
float u_xlat12;
bool u_xlatb12;
float u_xlat13;
void main()
{
    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
    gl_Position = u_xlat2;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat8.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;
    u_xlat8.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat8.xy;
    u_xlat8.xy = abs(u_xlat8.xy) * vec2(_ScaleX, _ScaleY);
    u_xlat8.xy = u_xlat2.ww / u_xlat8.xy;
    u_xlat13 = dot(u_xlat8.xy, u_xlat8.xy);
    u_xlat8.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) * vec2(0.25, 0.25) + u_xlat8.xy;
    vs_TEXCOORD2.zw = vec2(0.25, 0.25) / u_xlat8.xy;
    u_xlat8.x = inversesqrt(u_xlat13);
    u_xlat12 = abs(in_TEXCOORD1.y) * _GradientScale;
    u_xlat13 = _Sharpness + 1.0;
    u_xlat12 = u_xlat12 * u_xlat13;
    u_xlat13 = u_xlat12 * u_xlat8.x;
    u_xlat2.x = (-_PerspectiveFilter) + 1.0;
    u_xlat2.x = abs(u_xlat13) * u_xlat2.x;
    u_xlat8.x = u_xlat8.x * u_xlat12 + (-u_xlat2.x);
    u_xlat3.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat3.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat3.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat6.xyz = vec3(u_xlat12) * u_xlat3.xyz;
    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat3.xyz = vec3(u_xlat12) * u_xlat1.xyz;
    u_xlat12 = dot(u_xlat6.xyz, u_xlat3.xyz);
    u_xlat8.x = abs(u_xlat12) * u_xlat8.x + u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(hlslcc_mtx4x4glstate_matrix_projection[3].w==0.0);
#else
    u_xlatb12 = hlslcc_mtx4x4glstate_matrix_projection[3].w==0.0;
#endif
    u_xlat6.x = (u_xlatb12) ? u_xlat8.x : u_xlat13;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.0>=in_TEXCOORD1.y);
#else
    u_xlatb8 = 0.0>=in_TEXCOORD1.y;
#endif
    u_xlat8.x = u_xlatb8 ? 1.0 : float(0.0);
    u_xlat12 = (-_WeightNormal) + _WeightBold;
    u_xlat8.x = u_xlat8.x * u_xlat12 + _WeightNormal;
    u_xlat8.x = u_xlat8.x * 0.25 + _FaceDilate;
    u_xlat8.x = u_xlat8.x * _ScaleRatioA;
    u_xlat6.z = u_xlat8.x * 0.5;
    vs_TEXCOORD1.yw = u_xlat6.xz;
    u_xlat12 = 0.5 / u_xlat6.x;
    u_xlat13 = (-_OutlineWidth) * _ScaleRatioA + 1.0;
    u_xlat13 = (-_OutlineSoftness) * _ScaleRatioA + u_xlat13;
    u_xlat13 = u_xlat13 * 0.5 + (-u_xlat12);
    vs_TEXCOORD1.x = (-u_xlat8.x) * 0.5 + u_xlat13;
    u_xlat8.x = (-u_xlat8.x) * 0.5 + 0.5;
    vs_TEXCOORD1.z = u_xlat12 + u_xlat8.x;
    u_xlat2 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));
    u_xlat2 = min(u_xlat2, vec4(2e+10, 2e+10, 2e+10, 2e+10));
    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + (-u_xlat2.xy);
    vs_TEXCOORD2.xy = (-u_xlat2.zw) + u_xlat0.xy;
    u_xlat0.xyz = u_xlat1.yyy * hlslcc_mtx4x4_EnvMatrix[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4_EnvMatrix[0].xyz * u_xlat1.xxx + u_xlat0.xyz;
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4_EnvMatrix[2].xyz * u_xlat1.zzz + u_xlat0.xyz;
    u_xlat0.x = in_TEXCOORD1.x * 0.000244140625;
    u_xlat8.x = floor(u_xlat0.x);
    u_xlat8.y = (-u_xlat8.x) * 4096.0 + in_TEXCOORD1.x;
    u_xlat0.xy = u_xlat8.xy * vec2(0.001953125, 0.001953125);
    vs_TEXCOORD5.xy = u_xlat0.xy * _FaceTex_ST.xy + _FaceTex_ST.zw;
    vs_TEXCOORD5.zw = u_xlat0.xy * _OutlineTex_ST.xy + _OutlineTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _Time;
uniform 	float _FaceUVSpeedX;
uniform 	float _FaceUVSpeedY;
uniform 	mediump vec4 _FaceColor;
uniform 	float _OutlineSoftness;
uniform 	float _OutlineUVSpeedX;
uniform 	float _OutlineUVSpeedY;
uniform 	mediump vec4 _OutlineColor;
uniform 	float _OutlineWidth;
uniform 	float _ScaleRatioA;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _FaceTex;
UNITY_LOCATION(2) uniform mediump sampler2D _OutlineTex;
in mediump vec4 vs_COLOR0;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
mediump float u_xlat16_1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
float u_xlat4;
mediump vec4 u_xlat16_4;
float u_xlat5;
bool u_xlatb5;
mediump float u_xlat16_6;
float u_xlat9;
mediump float u_xlat16_11;
void main()
{
    u_xlat16_0.x = texture(_MainTex, vs_TEXCOORD0.xy).w;
    u_xlat5 = u_xlat16_0.x + (-vs_TEXCOORD1.x);
    u_xlat0.x = (-u_xlat16_0.x) + vs_TEXCOORD1.z;
#ifdef UNITY_ADRENO_ES3
    u_xlatb5 = !!(u_xlat5<0.0);
#else
    u_xlatb5 = u_xlat5<0.0;
#endif
    if(u_xlatb5){discard;}
    u_xlat5 = _OutlineWidth * _ScaleRatioA;
    u_xlat5 = u_xlat5 * vs_TEXCOORD1.y;
    u_xlat16_1 = min(u_xlat5, 1.0);
    u_xlat16_6 = u_xlat5 * 0.5;
    u_xlat16_1 = sqrt(u_xlat16_1);
    u_xlat16_11 = u_xlat0.x * vs_TEXCOORD1.y + u_xlat16_6;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_11 = min(max(u_xlat16_11, 0.0), 1.0);
#else
    u_xlat16_11 = clamp(u_xlat16_11, 0.0, 1.0);
#endif
    u_xlat16_6 = u_xlat0.x * vs_TEXCOORD1.y + (-u_xlat16_6);
    u_xlat16_1 = u_xlat16_1 * u_xlat16_11;
    u_xlat0.xy = vec2(_OutlineUVSpeedX, _OutlineUVSpeedY) * _Time.yy + vs_TEXCOORD5.zw;
    u_xlat16_0 = texture(_OutlineTex, u_xlat0.xy);
    u_xlat2 = u_xlat16_0 * _OutlineColor;
    u_xlat16_3.xyz = vs_COLOR0.xyz * _FaceColor.xyz;
    u_xlat0.xy = vec2(_FaceUVSpeedX, _FaceUVSpeedY) * _Time.yy + vs_TEXCOORD5.xy;
    u_xlat16_4 = texture(_FaceTex, u_xlat0.xy);
    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;
    u_xlat4 = u_xlat16_4.w * _FaceColor.w;
    u_xlat16_3.xyz = u_xlat0.xyz * vec3(u_xlat4);
    u_xlat16_2.xyz = u_xlat2.xyz * u_xlat2.www + (-u_xlat16_3.xyz);
    u_xlat16_2.w = _OutlineColor.w * u_xlat16_0.w + (-u_xlat4);
    u_xlat16_2 = vec4(u_xlat16_1) * u_xlat16_2;
    u_xlat16_0.xyz = u_xlat0.xyz * vec3(u_xlat4) + u_xlat16_2.xyz;
    u_xlat16_0.w = _FaceColor.w * u_xlat16_4.w + u_xlat16_2.w;
    u_xlat4 = _OutlineSoftness * _ScaleRatioA;
    u_xlat9 = u_xlat4 * vs_TEXCOORD1.y;
    u_xlat16_1 = u_xlat4 * vs_TEXCOORD1.y + 1.0;
    u_xlat16_6 = u_xlat9 * 0.5 + u_xlat16_6;
    u_xlat16_1 = u_xlat16_6 / u_xlat16_1;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1 = min(max(u_xlat16_1, 0.0), 1.0);
#else
    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);
#endif
    u_xlat16_1 = (-u_xlat16_1) + 1.0;
    u_xlat16_0 = u_xlat16_0 * vec4(u_xlat16_1);
    SV_Target0 = u_xlat16_0 * vs_COLOR0.wwww;
    return;
}

#endif
"
}
SubProgram "vulkan hw_tier00 " {
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 517
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %12 %121 %125 %126 %129 %131 %183 %193 %236 %358 %452 %485 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpDecorate %12 Location 12 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpDecorate %19 ArrayStride 19 
                                                      OpDecorate %20 ArrayStride 20 
                                                      OpDecorate %21 ArrayStride 21 
                                                      OpDecorate %22 ArrayStride 22 
                                                      OpMemberDecorate %23 0 Offset 23 
                                                      OpMemberDecorate %23 1 Offset 23 
                                                      OpMemberDecorate %23 2 Offset 23 
                                                      OpMemberDecorate %23 3 Offset 23 
                                                      OpMemberDecorate %23 4 Offset 23 
                                                      OpMemberDecorate %23 5 Offset 23 
                                                      OpMemberDecorate %23 6 Offset 23 
                                                      OpMemberDecorate %23 7 Offset 23 
                                                      OpMemberDecorate %23 8 Offset 23 
                                                      OpMemberDecorate %23 9 Offset 23 
                                                      OpMemberDecorate %23 10 Offset 23 
                                                      OpMemberDecorate %23 11 Offset 23 
                                                      OpMemberDecorate %23 12 Offset 23 
                                                      OpMemberDecorate %23 13 Offset 23 
                                                      OpMemberDecorate %23 14 Offset 23 
                                                      OpMemberDecorate %23 15 Offset 23 
                                                      OpMemberDecorate %23 16 Offset 23 
                                                      OpMemberDecorate %23 17 Offset 23 
                                                      OpMemberDecorate %23 18 Offset 23 
                                                      OpMemberDecorate %23 19 Offset 23 
                                                      OpMemberDecorate %23 20 Offset 23 
                                                      OpMemberDecorate %23 21 Offset 23 
                                                      OpMemberDecorate %23 22 Offset 23 
                                                      OpMemberDecorate %23 23 Offset 23 
                                                      OpMemberDecorate %23 24 Offset 23 
                                                      OpDecorate %23 Block 
                                                      OpDecorate %25 DescriptorSet 25 
                                                      OpDecorate %25 Binding 25 
                                                      OpMemberDecorate %119 0 BuiltIn 119 
                                                      OpMemberDecorate %119 1 BuiltIn 119 
                                                      OpMemberDecorate %119 2 BuiltIn 119 
                                                      OpDecorate %119 Block 
                                                      OpDecorate %125 RelaxedPrecision 
                                                      OpDecorate %125 Location 125 
                                                      OpDecorate %126 RelaxedPrecision 
                                                      OpDecorate %126 Location 126 
                                                      OpDecorate %127 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD0 Location 129 
                                                      OpDecorate %131 Location 131 
                                                      OpDecorate vs_TEXCOORD2 Location 183 
                                                      OpDecorate %193 Location 193 
                                                      OpDecorate %236 Location 236 
                                                      OpDecorate vs_TEXCOORD1 Location 358 
                                                      OpDecorate vs_TEXCOORD3 Location 452 
                                                      OpDecorate vs_TEXCOORD5 Location 485 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 3 
                                               %8 = OpTypePointer Private %7 
                                Private f32_3* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 4 
                                              %11 = OpTypePointer Input %10 
                                 Input f32_4* %12 = OpVariable Input 
                                              %13 = OpTypeVector %6 2 
                                              %16 = OpTypeInt 32 0 
                                          u32 %17 = OpConstant 4 
                                              %18 = OpTypeArray %10 %17 
                                              %19 = OpTypeArray %10 %17 
                                              %20 = OpTypeArray %10 %17 
                                              %21 = OpTypeArray %10 %17 
                                              %22 = OpTypeArray %10 %17 
                                              %23 = OpTypeStruct %7 %10 %18 %19 %20 %21 %6 %6 %6 %22 %6 %6 %6 %6 %6 %10 %6 %6 %6 %6 %6 %6 %6 %10 %10 
                                              %24 = OpTypePointer Uniform %23 
Uniform struct {f32_3; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4[4]; f32; f32; f32; f32_4[4]; f32; f32; f32; f32; f32; f32_4; f32; f32; f32; f32; f32; f32; f32; f32_4; f32_4;}* %25 = OpVariable Uniform 
                                              %26 = OpTypeInt 32 1 
                                          i32 %27 = OpConstant 13 
                                              %28 = OpTypePointer Uniform %6 
                                          i32 %31 = OpConstant 14 
                                              %38 = OpTypePointer Private %10 
                               Private f32_4* %39 = OpVariable Private 
                                          i32 %42 = OpConstant 2 
                                          i32 %43 = OpConstant 1 
                                              %44 = OpTypePointer Uniform %10 
                                          i32 %48 = OpConstant 0 
                               Private f32_4* %63 = OpVariable Private 
                                          i32 %65 = OpConstant 3 
                                              %83 = OpTypePointer Uniform %7 
                               Private f32_4* %89 = OpVariable Private 
                                          i32 %92 = OpConstant 5 
                                         u32 %117 = OpConstant 1 
                                             %118 = OpTypeArray %6 %117 
                                             %119 = OpTypeStruct %10 %6 %118 
                                             %120 = OpTypePointer Output %119 
        Output struct {f32_4; f32; f32[1];}* %121 = OpVariable Output 
                                             %123 = OpTypePointer Output %10 
                               Output f32_4* %125 = OpVariable Output 
                                Input f32_4* %126 = OpVariable Input 
                                             %128 = OpTypePointer Output %13 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                             %130 = OpTypePointer Input %13 
                                Input f32_2* %131 = OpVariable Input 
                                             %133 = OpTypePointer Private %13 
                              Private f32_2* %134 = OpVariable Private 
                                         i32 %138 = OpConstant 4 
                                         i32 %154 = OpConstant 19 
                                         i32 %157 = OpConstant 20 
                                             %166 = OpTypePointer Private %6 
                                Private f32* %167 = OpVariable Private 
                                         i32 %171 = OpConstant 16 
                                         i32 %174 = OpConstant 17 
                                         f32 %178 = OpConstant 3.674022E-40 
                                       f32_2 %179 = OpConstantComposite %178 %178 
                       Output f32_4* vs_TEXCOORD2 = OpVariable Output 
                                         u32 %190 = OpConstant 0 
                                Private f32* %192 = OpVariable Private 
                                Input f32_2* %193 = OpVariable Input 
                                             %194 = OpTypePointer Input %6 
                                         i32 %198 = OpConstant 18 
                                         i32 %202 = OpConstant 22 
                                         f32 %205 = OpConstant 3.674022E-40 
                                         i32 %214 = OpConstant 21 
                                             %235 = OpTypePointer Input %7 
                                Input f32_3* %236 = OpVariable Input 
                                         u32 %254 = OpConstant 2 
                              Private f32_3* %263 = OpVariable Private 
                                             %296 = OpTypeBool 
                                             %297 = OpTypePointer Private %296 
                               Private bool* %298 = OpVariable Private 
                                         u32 %299 = OpConstant 3 
                                         f32 %302 = OpConstant 3.674022E-40 
                                             %305 = OpTypePointer Function %6 
                               Private bool* %315 = OpVariable Private 
                                         i32 %322 = OpConstant 10 
                                         i32 %326 = OpConstant 11 
                                         i32 %341 = OpConstant 6 
                                         i32 %348 = OpConstant 12 
                                         f32 %355 = OpConstant 3.674022E-40 
                       Output f32_4* vs_TEXCOORD1 = OpVariable Output 
                                         i32 %366 = OpConstant 8 
                                         i32 %374 = OpConstant 7 
                                             %394 = OpTypePointer Output %6 
                                         i32 %407 = OpConstant 15 
                                         f32 %410 = OpConstant 3.674022E-40 
                                       f32_4 %411 = OpConstantComposite %410 %410 %410 %410 
                                         f32 %414 = OpConstant 3.674022E-40 
                                       f32_4 %415 = OpConstantComposite %414 %414 %414 %414 
                                         f32 %419 = OpConstant 3.674022E-40 
                                       f32_2 %420 = OpConstantComposite %419 %419 
                                         i32 %438 = OpConstant 9 
                                             %451 = OpTypePointer Output %7 
                       Output f32_3* vs_TEXCOORD3 = OpVariable Output 
                                         f32 %463 = OpConstant 3.674022E-40 
                                         f32 %473 = OpConstant 3.674022E-40 
                                         f32 %480 = OpConstant 3.674022E-40 
                                       f32_2 %481 = OpConstantComposite %480 %480 
                       Output f32_4* vs_TEXCOORD5 = OpVariable Output 
                                         i32 %488 = OpConstant 23 
                                         i32 %501 = OpConstant 24 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                               Function f32* %306 = OpVariable Function 
                                        f32_4 %14 = OpLoad %12 
                                        f32_2 %15 = OpVectorShuffle %14 %14 0 1 
                                 Uniform f32* %29 = OpAccessChain %25 %27 
                                          f32 %30 = OpLoad %29 
                                 Uniform f32* %32 = OpAccessChain %25 %31 
                                          f32 %33 = OpLoad %32 
                                        f32_2 %34 = OpCompositeConstruct %30 %33 
                                        f32_2 %35 = OpFAdd %15 %34 
                                        f32_3 %36 = OpLoad %9 
                                        f32_3 %37 = OpVectorShuffle %36 %35 3 4 2 
                                                      OpStore %9 %37 
                                        f32_3 %40 = OpLoad %9 
                                        f32_4 %41 = OpVectorShuffle %40 %40 1 1 1 1 
                               Uniform f32_4* %45 = OpAccessChain %25 %42 %43 
                                        f32_4 %46 = OpLoad %45 
                                        f32_4 %47 = OpFMul %41 %46 
                                                      OpStore %39 %47 
                               Uniform f32_4* %49 = OpAccessChain %25 %42 %48 
                                        f32_4 %50 = OpLoad %49 
                                        f32_3 %51 = OpLoad %9 
                                        f32_4 %52 = OpVectorShuffle %51 %51 0 0 0 0 
                                        f32_4 %53 = OpFMul %50 %52 
                                        f32_4 %54 = OpLoad %39 
                                        f32_4 %55 = OpFAdd %53 %54 
                                                      OpStore %39 %55 
                               Uniform f32_4* %56 = OpAccessChain %25 %42 %42 
                                        f32_4 %57 = OpLoad %56 
                                        f32_4 %58 = OpLoad %12 
                                        f32_4 %59 = OpVectorShuffle %58 %58 2 2 2 2 
                                        f32_4 %60 = OpFMul %57 %59 
                                        f32_4 %61 = OpLoad %39 
                                        f32_4 %62 = OpFAdd %60 %61 
                                                      OpStore %39 %62 
                                        f32_4 %64 = OpLoad %39 
                               Uniform f32_4* %66 = OpAccessChain %25 %42 %65 
                                        f32_4 %67 = OpLoad %66 
                                        f32_4 %68 = OpFAdd %64 %67 
                                                      OpStore %63 %68 
                               Uniform f32_4* %69 = OpAccessChain %25 %42 %65 
                                        f32_4 %70 = OpLoad %69 
                                        f32_3 %71 = OpVectorShuffle %70 %70 0 1 2 
                                        f32_4 %72 = OpLoad %12 
                                        f32_3 %73 = OpVectorShuffle %72 %72 3 3 3 
                                        f32_3 %74 = OpFMul %71 %73 
                                        f32_4 %75 = OpLoad %39 
                                        f32_3 %76 = OpVectorShuffle %75 %75 0 1 2 
                                        f32_3 %77 = OpFAdd %74 %76 
                                        f32_4 %78 = OpLoad %39 
                                        f32_4 %79 = OpVectorShuffle %78 %77 4 5 6 3 
                                                      OpStore %39 %79 
                                        f32_4 %80 = OpLoad %39 
                                        f32_3 %81 = OpVectorShuffle %80 %80 0 1 2 
                                        f32_3 %82 = OpFNegate %81 
                               Uniform f32_3* %84 = OpAccessChain %25 %48 
                                        f32_3 %85 = OpLoad %84 
                                        f32_3 %86 = OpFAdd %82 %85 
                                        f32_4 %87 = OpLoad %39 
                                        f32_4 %88 = OpVectorShuffle %87 %86 4 5 6 3 
                                                      OpStore %39 %88 
                                        f32_4 %90 = OpLoad %63 
                                        f32_4 %91 = OpVectorShuffle %90 %90 1 1 1 1 
                               Uniform f32_4* %93 = OpAccessChain %25 %92 %43 
                                        f32_4 %94 = OpLoad %93 
                                        f32_4 %95 = OpFMul %91 %94 
                                                      OpStore %89 %95 
                               Uniform f32_4* %96 = OpAccessChain %25 %92 %48 
                                        f32_4 %97 = OpLoad %96 
                                        f32_4 %98 = OpLoad %63 
                                        f32_4 %99 = OpVectorShuffle %98 %98 0 0 0 0 
                                       f32_4 %100 = OpFMul %97 %99 
                                       f32_4 %101 = OpLoad %89 
                                       f32_4 %102 = OpFAdd %100 %101 
                                                      OpStore %89 %102 
                              Uniform f32_4* %103 = OpAccessChain %25 %92 %42 
                                       f32_4 %104 = OpLoad %103 
                                       f32_4 %105 = OpLoad %63 
                                       f32_4 %106 = OpVectorShuffle %105 %105 2 2 2 2 
                                       f32_4 %107 = OpFMul %104 %106 
                                       f32_4 %108 = OpLoad %89 
                                       f32_4 %109 = OpFAdd %107 %108 
                                                      OpStore %89 %109 
                              Uniform f32_4* %110 = OpAccessChain %25 %92 %65 
                                       f32_4 %111 = OpLoad %110 
                                       f32_4 %112 = OpLoad %63 
                                       f32_4 %113 = OpVectorShuffle %112 %112 3 3 3 3 
                                       f32_4 %114 = OpFMul %111 %113 
                                       f32_4 %115 = OpLoad %89 
                                       f32_4 %116 = OpFAdd %114 %115 
                                                      OpStore %63 %116 
                                       f32_4 %122 = OpLoad %63 
                               Output f32_4* %124 = OpAccessChain %121 %48 
                                                      OpStore %124 %122 
                                       f32_4 %127 = OpLoad %126 
                                                      OpStore %125 %127 
                                       f32_2 %132 = OpLoad %131 
                                                      OpStore vs_TEXCOORD0 %132 
                              Uniform f32_4* %135 = OpAccessChain %25 %43 
                                       f32_4 %136 = OpLoad %135 
                                       f32_2 %137 = OpVectorShuffle %136 %136 1 1 
                              Uniform f32_4* %139 = OpAccessChain %25 %138 %43 
                                       f32_4 %140 = OpLoad %139 
                                       f32_2 %141 = OpVectorShuffle %140 %140 0 1 
                                       f32_2 %142 = OpFMul %137 %141 
                                                      OpStore %134 %142 
                              Uniform f32_4* %143 = OpAccessChain %25 %138 %48 
                                       f32_4 %144 = OpLoad %143 
                                       f32_2 %145 = OpVectorShuffle %144 %144 0 1 
                              Uniform f32_4* %146 = OpAccessChain %25 %43 
                                       f32_4 %147 = OpLoad %146 
                                       f32_2 %148 = OpVectorShuffle %147 %147 0 0 
                                       f32_2 %149 = OpFMul %145 %148 
                                       f32_2 %150 = OpLoad %134 
                                       f32_2 %151 = OpFAdd %149 %150 
                                                      OpStore %134 %151 
                                       f32_2 %152 = OpLoad %134 
                                       f32_2 %153 = OpExtInst %1 4 %152 
                                Uniform f32* %155 = OpAccessChain %25 %154 
                                         f32 %156 = OpLoad %155 
                                Uniform f32* %158 = OpAccessChain %25 %157 
                                         f32 %159 = OpLoad %158 
                                       f32_2 %160 = OpCompositeConstruct %156 %159 
                                       f32_2 %161 = OpFMul %153 %160 
                                                      OpStore %134 %161 
                                       f32_4 %162 = OpLoad %63 
                                       f32_2 %163 = OpVectorShuffle %162 %162 3 3 
                                       f32_2 %164 = OpLoad %134 
                                       f32_2 %165 = OpFDiv %163 %164 
                                                      OpStore %134 %165 
                                       f32_2 %168 = OpLoad %134 
                                       f32_2 %169 = OpLoad %134 
                                         f32 %170 = OpDot %168 %169 
                                                      OpStore %167 %170 
                                Uniform f32* %172 = OpAccessChain %25 %171 
                                         f32 %173 = OpLoad %172 
                                Uniform f32* %175 = OpAccessChain %25 %174 
                                         f32 %176 = OpLoad %175 
                                       f32_2 %177 = OpCompositeConstruct %173 %176 
                                       f32_2 %180 = OpFMul %177 %179 
                                       f32_2 %181 = OpLoad %134 
                                       f32_2 %182 = OpFAdd %180 %181 
                                                      OpStore %134 %182 
                                       f32_2 %184 = OpLoad %134 
                                       f32_2 %185 = OpFDiv %179 %184 
                                       f32_4 %186 = OpLoad vs_TEXCOORD2 
                                       f32_4 %187 = OpVectorShuffle %186 %185 0 1 4 5 
                                                      OpStore vs_TEXCOORD2 %187 
                                         f32 %188 = OpLoad %167 
                                         f32 %189 = OpExtInst %1 32 %188 
                                Private f32* %191 = OpAccessChain %134 %190 
                                                      OpStore %191 %189 
                                  Input f32* %195 = OpAccessChain %193 %117 
                                         f32 %196 = OpLoad %195 
                                         f32 %197 = OpExtInst %1 4 %196 
                                Uniform f32* %199 = OpAccessChain %25 %198 
                                         f32 %200 = OpLoad %199 
                                         f32 %201 = OpFMul %197 %200 
                                                      OpStore %192 %201 
                                Uniform f32* %203 = OpAccessChain %25 %202 
                                         f32 %204 = OpLoad %203 
                                         f32 %206 = OpFAdd %204 %205 
                                                      OpStore %167 %206 
                                         f32 %207 = OpLoad %192 
                                         f32 %208 = OpLoad %167 
                                         f32 %209 = OpFMul %207 %208 
                                                      OpStore %192 %209 
                                         f32 %210 = OpLoad %192 
                                Private f32* %211 = OpAccessChain %134 %190 
                                         f32 %212 = OpLoad %211 
                                         f32 %213 = OpFMul %210 %212 
                                                      OpStore %167 %213 
                                Uniform f32* %215 = OpAccessChain %25 %214 
                                         f32 %216 = OpLoad %215 
                                         f32 %217 = OpFNegate %216 
                                         f32 %218 = OpFAdd %217 %205 
                                Private f32* %219 = OpAccessChain %63 %190 
                                                      OpStore %219 %218 
                                         f32 %220 = OpLoad %167 
                                         f32 %221 = OpExtInst %1 4 %220 
                                Private f32* %222 = OpAccessChain %63 %190 
                                         f32 %223 = OpLoad %222 
                                         f32 %224 = OpFMul %221 %223 
                                Private f32* %225 = OpAccessChain %63 %190 
                                                      OpStore %225 %224 
                                Private f32* %226 = OpAccessChain %134 %190 
                                         f32 %227 = OpLoad %226 
                                         f32 %228 = OpLoad %192 
                                         f32 %229 = OpFMul %227 %228 
                                Private f32* %230 = OpAccessChain %63 %190 
                                         f32 %231 = OpLoad %230 
                                         f32 %232 = OpFNegate %231 
                                         f32 %233 = OpFAdd %229 %232 
                                Private f32* %234 = OpAccessChain %134 %190 
                                                      OpStore %234 %233 
                                       f32_3 %237 = OpLoad %236 
                              Uniform f32_4* %238 = OpAccessChain %25 %65 %48 
                                       f32_4 %239 = OpLoad %238 
                                       f32_3 %240 = OpVectorShuffle %239 %239 0 1 2 
                                         f32 %241 = OpDot %237 %240 
                                Private f32* %242 = OpAccessChain %89 %190 
                                                      OpStore %242 %241 
                                       f32_3 %243 = OpLoad %236 
                              Uniform f32_4* %244 = OpAccessChain %25 %65 %43 
                                       f32_4 %245 = OpLoad %244 
                                       f32_3 %246 = OpVectorShuffle %245 %245 0 1 2 
                                         f32 %247 = OpDot %243 %246 
                                Private f32* %248 = OpAccessChain %89 %117 
                                                      OpStore %248 %247 
                                       f32_3 %249 = OpLoad %236 
                              Uniform f32_4* %250 = OpAccessChain %25 %65 %42 
                                       f32_4 %251 = OpLoad %250 
                                       f32_3 %252 = OpVectorShuffle %251 %251 0 1 2 
                                         f32 %253 = OpDot %249 %252 
                                Private f32* %255 = OpAccessChain %89 %254 
                                                      OpStore %255 %253 
                                       f32_4 %256 = OpLoad %89 
                                       f32_3 %257 = OpVectorShuffle %256 %256 0 1 2 
                                       f32_4 %258 = OpLoad %89 
                                       f32_3 %259 = OpVectorShuffle %258 %258 0 1 2 
                                         f32 %260 = OpDot %257 %259 
                                                      OpStore %192 %260 
                                         f32 %261 = OpLoad %192 
                                         f32 %262 = OpExtInst %1 32 %261 
                                                      OpStore %192 %262 
                                         f32 %264 = OpLoad %192 
                                       f32_3 %265 = OpCompositeConstruct %264 %264 %264 
                                       f32_4 %266 = OpLoad %89 
                                       f32_3 %267 = OpVectorShuffle %266 %266 0 1 2 
                                       f32_3 %268 = OpFMul %265 %267 
                                                      OpStore %263 %268 
                                       f32_4 %269 = OpLoad %39 
                                       f32_3 %270 = OpVectorShuffle %269 %269 0 1 2 
                                       f32_4 %271 = OpLoad %39 
                                       f32_3 %272 = OpVectorShuffle %271 %271 0 1 2 
                                         f32 %273 = OpDot %270 %272 
                                                      OpStore %192 %273 
                                         f32 %274 = OpLoad %192 
                                         f32 %275 = OpExtInst %1 32 %274 
                                                      OpStore %192 %275 
                                         f32 %276 = OpLoad %192 
                                       f32_3 %277 = OpCompositeConstruct %276 %276 %276 
                                       f32_4 %278 = OpLoad %39 
                                       f32_3 %279 = OpVectorShuffle %278 %278 0 1 2 
                                       f32_3 %280 = OpFMul %277 %279 
                                       f32_4 %281 = OpLoad %89 
                                       f32_4 %282 = OpVectorShuffle %281 %280 4 5 6 3 
                                                      OpStore %89 %282 
                                       f32_3 %283 = OpLoad %263 
                                       f32_4 %284 = OpLoad %89 
                                       f32_3 %285 = OpVectorShuffle %284 %284 0 1 2 
                                         f32 %286 = OpDot %283 %285 
                                                      OpStore %192 %286 
                                         f32 %287 = OpLoad %192 
                                         f32 %288 = OpExtInst %1 4 %287 
                                Private f32* %289 = OpAccessChain %134 %190 
                                         f32 %290 = OpLoad %289 
                                         f32 %291 = OpFMul %288 %290 
                                Private f32* %292 = OpAccessChain %63 %190 
                                         f32 %293 = OpLoad %292 
                                         f32 %294 = OpFAdd %291 %293 
                                Private f32* %295 = OpAccessChain %134 %190 
                                                      OpStore %295 %294 
                                Uniform f32* %300 = OpAccessChain %25 %138 %65 %299 
                                         f32 %301 = OpLoad %300 
                                        bool %303 = OpFOrdEqual %301 %302 
                                                      OpStore %298 %303 
                                        bool %304 = OpLoad %298 
                                                      OpSelectionMerge %308 None 
                                                      OpBranchConditional %304 %307 %311 
                                             %307 = OpLabel 
                                Private f32* %309 = OpAccessChain %134 %190 
                                         f32 %310 = OpLoad %309 
                                                      OpStore %306 %310 
                                                      OpBranch %308 
                                             %311 = OpLabel 
                                         f32 %312 = OpLoad %167 
                                                      OpStore %306 %312 
                                                      OpBranch %308 
                                             %308 = OpLabel 
                                         f32 %313 = OpLoad %306 
                                Private f32* %314 = OpAccessChain %263 %190 
                                                      OpStore %314 %313 
                                  Input f32* %316 = OpAccessChain %193 %117 
                                         f32 %317 = OpLoad %316 
                                        bool %318 = OpFOrdGreaterThanEqual %302 %317 
                                                      OpStore %315 %318 
                                        bool %319 = OpLoad %315 
                                         f32 %320 = OpSelect %319 %205 %302 
                                Private f32* %321 = OpAccessChain %134 %190 
                                                      OpStore %321 %320 
                                Uniform f32* %323 = OpAccessChain %25 %322 
                                         f32 %324 = OpLoad %323 
                                         f32 %325 = OpFNegate %324 
                                Uniform f32* %327 = OpAccessChain %25 %326 
                                         f32 %328 = OpLoad %327 
                                         f32 %329 = OpFAdd %325 %328 
                                                      OpStore %192 %329 
                                Private f32* %330 = OpAccessChain %134 %190 
                                         f32 %331 = OpLoad %330 
                                         f32 %332 = OpLoad %192 
                                         f32 %333 = OpFMul %331 %332 
                                Uniform f32* %334 = OpAccessChain %25 %322 
                                         f32 %335 = OpLoad %334 
                                         f32 %336 = OpFAdd %333 %335 
                                Private f32* %337 = OpAccessChain %134 %190 
                                                      OpStore %337 %336 
                                Private f32* %338 = OpAccessChain %134 %190 
                                         f32 %339 = OpLoad %338 
                                         f32 %340 = OpFMul %339 %178 
                                Uniform f32* %342 = OpAccessChain %25 %341 
                                         f32 %343 = OpLoad %342 
                                         f32 %344 = OpFAdd %340 %343 
                                Private f32* %345 = OpAccessChain %134 %190 
                                                      OpStore %345 %344 
                                Private f32* %346 = OpAccessChain %134 %190 
                                         f32 %347 = OpLoad %346 
                                Uniform f32* %349 = OpAccessChain %25 %348 
                                         f32 %350 = OpLoad %349 
                                         f32 %351 = OpFMul %347 %350 
                                Private f32* %352 = OpAccessChain %134 %190 
                                                      OpStore %352 %351 
                                Private f32* %353 = OpAccessChain %134 %190 
                                         f32 %354 = OpLoad %353 
                                         f32 %356 = OpFMul %354 %355 
                                Private f32* %357 = OpAccessChain %263 %254 
                                                      OpStore %357 %356 
                                       f32_3 %359 = OpLoad %263 
                                       f32_2 %360 = OpVectorShuffle %359 %359 0 2 
                                       f32_4 %361 = OpLoad vs_TEXCOORD1 
                                       f32_4 %362 = OpVectorShuffle %361 %360 0 4 2 5 
                                                      OpStore vs_TEXCOORD1 %362 
                                Private f32* %363 = OpAccessChain %263 %190 
                                         f32 %364 = OpLoad %363 
                                         f32 %365 = OpFDiv %355 %364 
                                                      OpStore %192 %365 
                                Uniform f32* %367 = OpAccessChain %25 %366 
                                         f32 %368 = OpLoad %367 
                                         f32 %369 = OpFNegate %368 
                                Uniform f32* %370 = OpAccessChain %25 %348 
                                         f32 %371 = OpLoad %370 
                                         f32 %372 = OpFMul %369 %371 
                                         f32 %373 = OpFAdd %372 %205 
                                                      OpStore %167 %373 
                                Uniform f32* %375 = OpAccessChain %25 %374 
                                         f32 %376 = OpLoad %375 
                                         f32 %377 = OpFNegate %376 
                                Uniform f32* %378 = OpAccessChain %25 %348 
                                         f32 %379 = OpLoad %378 
                                         f32 %380 = OpFMul %377 %379 
                                         f32 %381 = OpLoad %167 
                                         f32 %382 = OpFAdd %380 %381 
                                                      OpStore %167 %382 
                                         f32 %383 = OpLoad %167 
                                         f32 %384 = OpFMul %383 %355 
                                         f32 %385 = OpLoad %192 
                                         f32 %386 = OpFNegate %385 
                                         f32 %387 = OpFAdd %384 %386 
                                                      OpStore %167 %387 
                                Private f32* %388 = OpAccessChain %134 %190 
                                         f32 %389 = OpLoad %388 
                                         f32 %390 = OpFNegate %389 
                                         f32 %391 = OpFMul %390 %355 
                                         f32 %392 = OpLoad %167 
                                         f32 %393 = OpFAdd %391 %392 
                                 Output f32* %395 = OpAccessChain vs_TEXCOORD1 %190 
                                                      OpStore %395 %393 
                                Private f32* %396 = OpAccessChain %134 %190 
                                         f32 %397 = OpLoad %396 
                                         f32 %398 = OpFNegate %397 
                                         f32 %399 = OpFMul %398 %355 
                                         f32 %400 = OpFAdd %399 %355 
                                Private f32* %401 = OpAccessChain %134 %190 
                                                      OpStore %401 %400 
                                         f32 %402 = OpLoad %192 
                                Private f32* %403 = OpAccessChain %134 %190 
                                         f32 %404 = OpLoad %403 
                                         f32 %405 = OpFAdd %402 %404 
                                 Output f32* %406 = OpAccessChain vs_TEXCOORD1 %254 
                                                      OpStore %406 %405 
                              Uniform f32_4* %408 = OpAccessChain %25 %407 
                                       f32_4 %409 = OpLoad %408 
                                       f32_4 %412 = OpExtInst %1 40 %409 %411 
                                                      OpStore %63 %412 
                                       f32_4 %413 = OpLoad %63 
                                       f32_4 %416 = OpExtInst %1 37 %413 %415 
                                                      OpStore %63 %416 
                                       f32_3 %417 = OpLoad %9 
                                       f32_2 %418 = OpVectorShuffle %417 %417 0 1 
                                       f32_2 %421 = OpFMul %418 %420 
                                       f32_4 %422 = OpLoad %63 
                                       f32_2 %423 = OpVectorShuffle %422 %422 0 1 
                                       f32_2 %424 = OpFNegate %423 
                                       f32_2 %425 = OpFAdd %421 %424 
                                       f32_3 %426 = OpLoad %9 
                                       f32_3 %427 = OpVectorShuffle %426 %425 3 4 2 
                                                      OpStore %9 %427 
                                       f32_4 %428 = OpLoad %63 
                                       f32_2 %429 = OpVectorShuffle %428 %428 2 3 
                                       f32_2 %430 = OpFNegate %429 
                                       f32_3 %431 = OpLoad %9 
                                       f32_2 %432 = OpVectorShuffle %431 %431 0 1 
                                       f32_2 %433 = OpFAdd %430 %432 
                                       f32_4 %434 = OpLoad vs_TEXCOORD2 
                                       f32_4 %435 = OpVectorShuffle %434 %433 4 5 2 3 
                                                      OpStore vs_TEXCOORD2 %435 
                                       f32_4 %436 = OpLoad %39 
                                       f32_3 %437 = OpVectorShuffle %436 %436 1 1 1 
                              Uniform f32_4* %439 = OpAccessChain %25 %438 %43 
                                       f32_4 %440 = OpLoad %439 
                                       f32_3 %441 = OpVectorShuffle %440 %440 0 1 2 
                                       f32_3 %442 = OpFMul %437 %441 
                                                      OpStore %9 %442 
                              Uniform f32_4* %443 = OpAccessChain %25 %438 %48 
                                       f32_4 %444 = OpLoad %443 
                                       f32_3 %445 = OpVectorShuffle %444 %444 0 1 2 
                                       f32_4 %446 = OpLoad %39 
                                       f32_3 %447 = OpVectorShuffle %446 %446 0 0 0 
                                       f32_3 %448 = OpFMul %445 %447 
                                       f32_3 %449 = OpLoad %9 
                                       f32_3 %450 = OpFAdd %448 %449 
                                                      OpStore %9 %450 
                              Uniform f32_4* %453 = OpAccessChain %25 %438 %42 
                                       f32_4 %454 = OpLoad %453 
                                       f32_3 %455 = OpVectorShuffle %454 %454 0 1 2 
                                       f32_4 %456 = OpLoad %39 
                                       f32_3 %457 = OpVectorShuffle %456 %456 2 2 2 
                                       f32_3 %458 = OpFMul %455 %457 
                                       f32_3 %459 = OpLoad %9 
                                       f32_3 %460 = OpFAdd %458 %459 
                                                      OpStore vs_TEXCOORD3 %460 
                                  Input f32* %461 = OpAccessChain %193 %190 
                                         f32 %462 = OpLoad %461 
                                         f32 %464 = OpFMul %462 %463 
                                Private f32* %465 = OpAccessChain %9 %190 
                                                      OpStore %465 %464 
                                Private f32* %466 = OpAccessChain %9 %190 
                                         f32 %467 = OpLoad %466 
                                         f32 %468 = OpExtInst %1 8 %467 
                                Private f32* %469 = OpAccessChain %134 %190 
                                                      OpStore %469 %468 
                                Private f32* %470 = OpAccessChain %134 %190 
                                         f32 %471 = OpLoad %470 
                                         f32 %472 = OpFNegate %471 
                                         f32 %474 = OpFMul %472 %473 
                                  Input f32* %475 = OpAccessChain %193 %190 
                                         f32 %476 = OpLoad %475 
                                         f32 %477 = OpFAdd %474 %476 
                                Private f32* %478 = OpAccessChain %134 %117 
                                                      OpStore %478 %477 
                                       f32_2 %479 = OpLoad %134 
                                       f32_2 %482 = OpFMul %479 %481 
                                       f32_3 %483 = OpLoad %9 
                                       f32_3 %484 = OpVectorShuffle %483 %482 3 4 2 
                                                      OpStore %9 %484 
                                       f32_3 %486 = OpLoad %9 
                                       f32_2 %487 = OpVectorShuffle %486 %486 0 1 
                              Uniform f32_4* %489 = OpAccessChain %25 %488 
                                       f32_4 %490 = OpLoad %489 
                                       f32_2 %491 = OpVectorShuffle %490 %490 0 1 
                                       f32_2 %492 = OpFMul %487 %491 
                              Uniform f32_4* %493 = OpAccessChain %25 %488 
                                       f32_4 %494 = OpLoad %493 
                                       f32_2 %495 = OpVectorShuffle %494 %494 2 3 
                                       f32_2 %496 = OpFAdd %492 %495 
                                       f32_4 %497 = OpLoad vs_TEXCOORD5 
                                       f32_4 %498 = OpVectorShuffle %497 %496 4 5 2 3 
                                                      OpStore vs_TEXCOORD5 %498 
                                       f32_3 %499 = OpLoad %9 
                                       f32_2 %500 = OpVectorShuffle %499 %499 0 1 
                              Uniform f32_4* %502 = OpAccessChain %25 %501 
                                       f32_4 %503 = OpLoad %502 
                                       f32_2 %504 = OpVectorShuffle %503 %503 0 1 
                                       f32_2 %505 = OpFMul %500 %504 
                              Uniform f32_4* %506 = OpAccessChain %25 %501 
                                       f32_4 %507 = OpLoad %506 
                                       f32_2 %508 = OpVectorShuffle %507 %507 2 3 
                                       f32_2 %509 = OpFAdd %505 %508 
                                       f32_4 %510 = OpLoad vs_TEXCOORD5 
                                       f32_4 %511 = OpVectorShuffle %510 %509 0 1 4 5 
                                                      OpStore vs_TEXCOORD5 %511 
                                 Output f32* %512 = OpAccessChain %121 %48 %117 
                                         f32 %513 = OpLoad %512 
                                         f32 %514 = OpFNegate %513 
                                 Output f32* %515 = OpAccessChain %121 %48 %117 
                                                      OpStore %515 %514 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 277
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %22 %35 %128 %149 %271 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpDecorate %9 RelaxedPrecision 
                                                      OpDecorate %12 RelaxedPrecision 
                                                      OpDecorate %12 DescriptorSet 12 
                                                      OpDecorate %12 Binding 12 
                                                      OpDecorate %13 RelaxedPrecision 
                                                      OpDecorate %16 RelaxedPrecision 
                                                      OpDecorate %16 DescriptorSet 16 
                                                      OpDecorate %16 Binding 16 
                                                      OpDecorate %17 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD0 Location 22 
                                                      OpDecorate %27 RelaxedPrecision 
                                                      OpDecorate %33 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD1 Location 35 
                                                      OpDecorate %45 RelaxedPrecision 
                                                      OpDecorate %46 RelaxedPrecision 
                                                      OpMemberDecorate %69 0 Offset 69 
                                                      OpMemberDecorate %69 1 Offset 69 
                                                      OpMemberDecorate %69 2 Offset 69 
                                                      OpMemberDecorate %69 3 RelaxedPrecision 
                                                      OpMemberDecorate %69 3 Offset 69 
                                                      OpMemberDecorate %69 4 Offset 69 
                                                      OpMemberDecorate %69 5 Offset 69 
                                                      OpMemberDecorate %69 6 Offset 69 
                                                      OpMemberDecorate %69 7 RelaxedPrecision 
                                                      OpMemberDecorate %69 7 Offset 69 
                                                      OpMemberDecorate %69 8 Offset 69 
                                                      OpMemberDecorate %69 9 Offset 69 
                                                      OpDecorate %69 Block 
                                                      OpDecorate %71 DescriptorSet 71 
                                                      OpDecorate %71 Binding 71 
                                                      OpDecorate %85 RelaxedPrecision 
                                                      OpDecorate %89 RelaxedPrecision 
                                                      OpDecorate %93 RelaxedPrecision 
                                                      OpDecorate %94 RelaxedPrecision 
                                                      OpDecorate %95 RelaxedPrecision 
                                                      OpDecorate %101 RelaxedPrecision 
                                                      OpDecorate %103 RelaxedPrecision 
                                                      OpDecorate %104 RelaxedPrecision 
                                                      OpDecorate %110 RelaxedPrecision 
                                                      OpDecorate %111 RelaxedPrecision 
                                                      OpDecorate %113 RelaxedPrecision 
                                                      OpDecorate %114 RelaxedPrecision 
                                                      OpDecorate %115 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD5 Location 128 
                                                      OpDecorate %134 RelaxedPrecision 
                                                      OpDecorate %134 DescriptorSet 134 
                                                      OpDecorate %134 Binding 134 
                                                      OpDecorate %135 RelaxedPrecision 
                                                      OpDecorate %136 RelaxedPrecision 
                                                      OpDecorate %136 DescriptorSet 136 
                                                      OpDecorate %136 Binding 136 
                                                      OpDecorate %137 RelaxedPrecision 
                                                      OpDecorate %143 RelaxedPrecision 
                                                      OpDecorate %146 RelaxedPrecision 
                                                      OpDecorate %147 RelaxedPrecision 
                                                      OpDecorate %148 RelaxedPrecision 
                                                      OpDecorate %149 RelaxedPrecision 
                                                      OpDecorate %149 Location 149 
                                                      OpDecorate %150 RelaxedPrecision 
                                                      OpDecorate %151 RelaxedPrecision 
                                                      OpDecorate %154 RelaxedPrecision 
                                                      OpDecorate %155 RelaxedPrecision 
                                                      OpDecorate %156 RelaxedPrecision 
                                                      OpDecorate %172 RelaxedPrecision 
                                                      OpDecorate %173 RelaxedPrecision 
                                                      OpDecorate %173 DescriptorSet 173 
                                                      OpDecorate %173 Binding 173 
                                                      OpDecorate %174 RelaxedPrecision 
                                                      OpDecorate %175 RelaxedPrecision 
                                                      OpDecorate %175 DescriptorSet 175 
                                                      OpDecorate %175 Binding 175 
                                                      OpDecorate %176 RelaxedPrecision 
                                                      OpDecorate %181 RelaxedPrecision 
                                                      OpDecorate %182 RelaxedPrecision 
                                                      OpDecorate %183 RelaxedPrecision 
                                                      OpDecorate %184 RelaxedPrecision 
                                                      OpDecorate %187 RelaxedPrecision 
                                                      OpDecorate %189 RelaxedPrecision 
                                                      OpDecorate %190 RelaxedPrecision 
                                                      OpDecorate %195 RelaxedPrecision 
                                                      OpDecorate %201 RelaxedPrecision 
                                                      OpDecorate %202 RelaxedPrecision 
                                                      OpDecorate %207 RelaxedPrecision 
                                                      OpDecorate %209 RelaxedPrecision 
                                                      OpDecorate %210 RelaxedPrecision 
                                                      OpDecorate %215 RelaxedPrecision 
                                                      OpDecorate %216 RelaxedPrecision 
                                                      OpDecorate %217 RelaxedPrecision 
                                                      OpDecorate %218 RelaxedPrecision 
                                                      OpDecorate %219 RelaxedPrecision 
                                                      OpDecorate %224 RelaxedPrecision 
                                                      OpDecorate %225 RelaxedPrecision 
                                                      OpDecorate %230 RelaxedPrecision 
                                                      OpDecorate %232 RelaxedPrecision 
                                                      OpDecorate %233 RelaxedPrecision 
                                                      OpDecorate %235 RelaxedPrecision 
                                                      OpDecorate %236 RelaxedPrecision 
                                                      OpDecorate %256 RelaxedPrecision 
                                                      OpDecorate %258 RelaxedPrecision 
                                                      OpDecorate %259 RelaxedPrecision 
                                                      OpDecorate %260 RelaxedPrecision 
                                                      OpDecorate %261 RelaxedPrecision 
                                                      OpDecorate %262 RelaxedPrecision 
                                                      OpDecorate %263 RelaxedPrecision 
                                                      OpDecorate %264 RelaxedPrecision 
                                                      OpDecorate %265 RelaxedPrecision 
                                                      OpDecorate %266 RelaxedPrecision 
                                                      OpDecorate %267 RelaxedPrecision 
                                                      OpDecorate %268 RelaxedPrecision 
                                                      OpDecorate %269 RelaxedPrecision 
                                                      OpDecorate %271 RelaxedPrecision 
                                                      OpDecorate %271 Location 271 
                                                      OpDecorate %272 RelaxedPrecision 
                                                      OpDecorate %273 RelaxedPrecision 
                                                      OpDecorate %274 RelaxedPrecision 
                                                      OpDecorate %275 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypePointer UniformConstant %10 
         UniformConstant read_only Texture2D* %12 = OpVariable UniformConstant 
                                              %14 = OpTypeSampler 
                                              %15 = OpTypePointer UniformConstant %14 
                     UniformConstant sampler* %16 = OpVariable UniformConstant 
                                              %18 = OpTypeSampledImage %10 
                                              %20 = OpTypeVector %6 2 
                                              %21 = OpTypePointer Input %20 
                        Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                              %25 = OpTypeInt 32 0 
                                          u32 %26 = OpConstant 3 
                                          u32 %28 = OpConstant 0 
                                              %29 = OpTypePointer Private %6 
                                 Private f32* %31 = OpVariable Private 
                                              %34 = OpTypePointer Input %7 
                        Input f32_4* vs_TEXCOORD1 = OpVariable Input 
                                              %36 = OpTypePointer Input %6 
                                              %41 = OpTypeVector %6 3 
                                              %42 = OpTypePointer Private %41 
                               Private f32_3* %43 = OpVariable Private 
                                          u32 %47 = OpConstant 2 
                                              %52 = OpTypeBool 
                                              %53 = OpTypePointer Private %52 
                                Private bool* %54 = OpVariable Private 
                                          f32 %56 = OpConstant 3.674022E-40 
                                              %59 = OpTypeInt 32 1 
                                          i32 %60 = OpConstant 0 
                                          i32 %61 = OpConstant 1 
                                          i32 %63 = OpConstant -1 
                                              %69 = OpTypeStruct %7 %6 %6 %7 %6 %6 %6 %7 %6 %6 
                                              %70 = OpTypePointer Uniform %69 
Uniform struct {f32_4; f32; f32; f32_4; f32; f32; f32; f32_4; f32; f32;}* %71 = OpVariable Uniform 
                                          i32 %72 = OpConstant 8 
                                              %73 = OpTypePointer Uniform %6 
                                          i32 %76 = OpConstant 9 
                                          u32 %81 = OpConstant 1 
                                 Private f32* %85 = OpVariable Private 
                                          f32 %87 = OpConstant 3.674022E-40 
                                 Private f32* %89 = OpVariable Private 
                                          f32 %91 = OpConstant 3.674022E-40 
                                 Private f32* %95 = OpVariable Private 
                                         i32 %116 = OpConstant 5 
                                         i32 %119 = OpConstant 6 
                                             %123 = OpTypePointer Uniform %7 
                        Input f32_4* vs_TEXCOORD5 = OpVariable Input 
        UniformConstant read_only Texture2D* %134 = OpVariable UniformConstant 
                    UniformConstant sampler* %136 = OpVariable UniformConstant 
                              Private f32_4* %142 = OpVariable Private 
                                         i32 %144 = OpConstant 7 
                              Private f32_3* %148 = OpVariable Private 
                                Input f32_4* %149 = OpVariable Input 
                                         i32 %152 = OpConstant 3 
                                         i32 %159 = OpConstant 2 
                              Private f32_4* %172 = OpVariable Private 
        UniformConstant read_only Texture2D* %173 = OpVariable UniformConstant 
                    UniformConstant sampler* %175 = OpVariable UniformConstant 
                                Private f32* %185 = OpVariable Private 
                              Private f32_4* %195 = OpVariable Private 
                              Private f32_4* %219 = OpVariable Private 
                                         i32 %238 = OpConstant 4 
                                Private f32* %244 = OpVariable Private 
                                             %270 = OpTypePointer Output %7 
                               Output f32_4* %271 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                          read_only Texture2D %13 = OpLoad %12 
                                      sampler %17 = OpLoad %16 
                   read_only Texture2DSampled %19 = OpSampledImage %13 %17 
                                        f32_2 %23 = OpLoad vs_TEXCOORD0 
                                        f32_4 %24 = OpImageSampleImplicitLod %19 %23 
                                          f32 %27 = OpCompositeExtract %24 3 
                                 Private f32* %30 = OpAccessChain %9 %28 
                                                      OpStore %30 %27 
                                 Private f32* %32 = OpAccessChain %9 %28 
                                          f32 %33 = OpLoad %32 
                                   Input f32* %37 = OpAccessChain vs_TEXCOORD1 %28 
                                          f32 %38 = OpLoad %37 
                                          f32 %39 = OpFNegate %38 
                                          f32 %40 = OpFAdd %33 %39 
                                                      OpStore %31 %40 
                                 Private f32* %44 = OpAccessChain %9 %28 
                                          f32 %45 = OpLoad %44 
                                          f32 %46 = OpFNegate %45 
                                   Input f32* %48 = OpAccessChain vs_TEXCOORD1 %47 
                                          f32 %49 = OpLoad %48 
                                          f32 %50 = OpFAdd %46 %49 
                                 Private f32* %51 = OpAccessChain %43 %28 
                                                      OpStore %51 %50 
                                          f32 %55 = OpLoad %31 
                                         bool %57 = OpFOrdLessThan %55 %56 
                                                      OpStore %54 %57 
                                         bool %58 = OpLoad %54 
                                          i32 %62 = OpSelect %58 %61 %60 
                                          i32 %64 = OpIMul %62 %63 
                                         bool %65 = OpINotEqual %64 %60 
                                                      OpSelectionMerge %67 None 
                                                      OpBranchConditional %65 %66 %67 
                                              %66 = OpLabel 
                                                      OpKill
                                              %67 = OpLabel 
                                 Uniform f32* %74 = OpAccessChain %71 %72 
                                          f32 %75 = OpLoad %74 
                                 Uniform f32* %77 = OpAccessChain %71 %76 
                                          f32 %78 = OpLoad %77 
                                          f32 %79 = OpFMul %75 %78 
                                                      OpStore %31 %79 
                                          f32 %80 = OpLoad %31 
                                   Input f32* %82 = OpAccessChain vs_TEXCOORD1 %81 
                                          f32 %83 = OpLoad %82 
                                          f32 %84 = OpFMul %80 %83 
                                                      OpStore %31 %84 
                                          f32 %86 = OpLoad %31 
                                          f32 %88 = OpExtInst %1 37 %86 %87 
                                                      OpStore %85 %88 
                                          f32 %90 = OpLoad %31 
                                          f32 %92 = OpFMul %90 %91 
                                                      OpStore %89 %92 
                                          f32 %93 = OpLoad %85 
                                          f32 %94 = OpExtInst %1 31 %93 
                                                      OpStore %85 %94 
                                 Private f32* %96 = OpAccessChain %43 %28 
                                          f32 %97 = OpLoad %96 
                                   Input f32* %98 = OpAccessChain vs_TEXCOORD1 %81 
                                          f32 %99 = OpLoad %98 
                                         f32 %100 = OpFMul %97 %99 
                                         f32 %101 = OpLoad %89 
                                         f32 %102 = OpFAdd %100 %101 
                                                      OpStore %95 %102 
                                         f32 %103 = OpLoad %95 
                                         f32 %104 = OpExtInst %1 43 %103 %56 %87 
                                                      OpStore %95 %104 
                                Private f32* %105 = OpAccessChain %43 %28 
                                         f32 %106 = OpLoad %105 
                                  Input f32* %107 = OpAccessChain vs_TEXCOORD1 %81 
                                         f32 %108 = OpLoad %107 
                                         f32 %109 = OpFMul %106 %108 
                                         f32 %110 = OpLoad %89 
                                         f32 %111 = OpFNegate %110 
                                         f32 %112 = OpFAdd %109 %111 
                                                      OpStore %89 %112 
                                         f32 %113 = OpLoad %85 
                                         f32 %114 = OpLoad %95 
                                         f32 %115 = OpFMul %113 %114 
                                                      OpStore %85 %115 
                                Uniform f32* %117 = OpAccessChain %71 %116 
                                         f32 %118 = OpLoad %117 
                                Uniform f32* %120 = OpAccessChain %71 %119 
                                         f32 %121 = OpLoad %120 
                                       f32_2 %122 = OpCompositeConstruct %118 %121 
                              Uniform f32_4* %124 = OpAccessChain %71 %60 
                                       f32_4 %125 = OpLoad %124 
                                       f32_2 %126 = OpVectorShuffle %125 %125 1 1 
                                       f32_2 %127 = OpFMul %122 %126 
                                       f32_4 %129 = OpLoad vs_TEXCOORD5 
                                       f32_2 %130 = OpVectorShuffle %129 %129 2 3 
                                       f32_2 %131 = OpFAdd %127 %130 
                                       f32_3 %132 = OpLoad %43 
                                       f32_3 %133 = OpVectorShuffle %132 %131 3 4 2 
                                                      OpStore %43 %133 
                         read_only Texture2D %135 = OpLoad %134 
                                     sampler %137 = OpLoad %136 
                  read_only Texture2DSampled %138 = OpSampledImage %135 %137 
                                       f32_3 %139 = OpLoad %43 
                                       f32_2 %140 = OpVectorShuffle %139 %139 0 1 
                                       f32_4 %141 = OpImageSampleImplicitLod %138 %140 
                                                      OpStore %9 %141 
                                       f32_4 %143 = OpLoad %9 
                              Uniform f32_4* %145 = OpAccessChain %71 %144 
                                       f32_4 %146 = OpLoad %145 
                                       f32_4 %147 = OpFMul %143 %146 
                                                      OpStore %142 %147 
                                       f32_4 %150 = OpLoad %149 
                                       f32_3 %151 = OpVectorShuffle %150 %150 0 1 2 
                              Uniform f32_4* %153 = OpAccessChain %71 %152 
                                       f32_4 %154 = OpLoad %153 
                                       f32_3 %155 = OpVectorShuffle %154 %154 0 1 2 
                                       f32_3 %156 = OpFMul %151 %155 
                                                      OpStore %148 %156 
                                Uniform f32* %157 = OpAccessChain %71 %61 
                                         f32 %158 = OpLoad %157 
                                Uniform f32* %160 = OpAccessChain %71 %159 
                                         f32 %161 = OpLoad %160 
                                       f32_2 %162 = OpCompositeConstruct %158 %161 
                              Uniform f32_4* %163 = OpAccessChain %71 %60 
                                       f32_4 %164 = OpLoad %163 
                                       f32_2 %165 = OpVectorShuffle %164 %164 1 1 
                                       f32_2 %166 = OpFMul %162 %165 
                                       f32_4 %167 = OpLoad vs_TEXCOORD5 
                                       f32_2 %168 = OpVectorShuffle %167 %167 0 1 
                                       f32_2 %169 = OpFAdd %166 %168 
                                       f32_3 %170 = OpLoad %43 
                                       f32_3 %171 = OpVectorShuffle %170 %169 3 4 2 
                                                      OpStore %43 %171 
                         read_only Texture2D %174 = OpLoad %173 
                                     sampler %176 = OpLoad %175 
                  read_only Texture2DSampled %177 = OpSampledImage %174 %176 
                                       f32_3 %178 = OpLoad %43 
                                       f32_2 %179 = OpVectorShuffle %178 %178 0 1 
                                       f32_4 %180 = OpImageSampleImplicitLod %177 %179 
                                                      OpStore %172 %180 
                                       f32_3 %181 = OpLoad %148 
                                       f32_4 %182 = OpLoad %172 
                                       f32_3 %183 = OpVectorShuffle %182 %182 0 1 2 
                                       f32_3 %184 = OpFMul %181 %183 
                                                      OpStore %43 %184 
                                Private f32* %186 = OpAccessChain %172 %26 
                                         f32 %187 = OpLoad %186 
                                Uniform f32* %188 = OpAccessChain %71 %152 %26 
                                         f32 %189 = OpLoad %188 
                                         f32 %190 = OpFMul %187 %189 
                                                      OpStore %185 %190 
                                       f32_3 %191 = OpLoad %43 
                                         f32 %192 = OpLoad %185 
                                       f32_3 %193 = OpCompositeConstruct %192 %192 %192 
                                       f32_3 %194 = OpFMul %191 %193 
                                                      OpStore %148 %194 
                                       f32_4 %196 = OpLoad %142 
                                       f32_3 %197 = OpVectorShuffle %196 %196 0 1 2 
                                       f32_4 %198 = OpLoad %142 
                                       f32_3 %199 = OpVectorShuffle %198 %198 3 3 3 
                                       f32_3 %200 = OpFMul %197 %199 
                                       f32_3 %201 = OpLoad %148 
                                       f32_3 %202 = OpFNegate %201 
                                       f32_3 %203 = OpFAdd %200 %202 
                                       f32_4 %204 = OpLoad %195 
                                       f32_4 %205 = OpVectorShuffle %204 %203 4 5 6 3 
                                                      OpStore %195 %205 
                                Uniform f32* %206 = OpAccessChain %71 %144 %26 
                                         f32 %207 = OpLoad %206 
                                Private f32* %208 = OpAccessChain %9 %26 
                                         f32 %209 = OpLoad %208 
                                         f32 %210 = OpFMul %207 %209 
                                         f32 %211 = OpLoad %185 
                                         f32 %212 = OpFNegate %211 
                                         f32 %213 = OpFAdd %210 %212 
                                Private f32* %214 = OpAccessChain %195 %26 
                                                      OpStore %214 %213 
                                         f32 %215 = OpLoad %85 
                                       f32_4 %216 = OpCompositeConstruct %215 %215 %215 %215 
                                       f32_4 %217 = OpLoad %195 
                                       f32_4 %218 = OpFMul %216 %217 
                                                      OpStore %195 %218 
                                       f32_3 %220 = OpLoad %43 
                                         f32 %221 = OpLoad %185 
                                       f32_3 %222 = OpCompositeConstruct %221 %221 %221 
                                       f32_3 %223 = OpFMul %220 %222 
                                       f32_4 %224 = OpLoad %195 
                                       f32_3 %225 = OpVectorShuffle %224 %224 0 1 2 
                                       f32_3 %226 = OpFAdd %223 %225 
                                       f32_4 %227 = OpLoad %219 
                                       f32_4 %228 = OpVectorShuffle %227 %226 4 5 6 3 
                                                      OpStore %219 %228 
                                Uniform f32* %229 = OpAccessChain %71 %152 %26 
                                         f32 %230 = OpLoad %229 
                                Private f32* %231 = OpAccessChain %172 %26 
                                         f32 %232 = OpLoad %231 
                                         f32 %233 = OpFMul %230 %232 
                                Private f32* %234 = OpAccessChain %195 %26 
                                         f32 %235 = OpLoad %234 
                                         f32 %236 = OpFAdd %233 %235 
                                Private f32* %237 = OpAccessChain %219 %26 
                                                      OpStore %237 %236 
                                Uniform f32* %239 = OpAccessChain %71 %238 
                                         f32 %240 = OpLoad %239 
                                Uniform f32* %241 = OpAccessChain %71 %76 
                                         f32 %242 = OpLoad %241 
                                         f32 %243 = OpFMul %240 %242 
                                                      OpStore %185 %243 
                                         f32 %245 = OpLoad %185 
                                  Input f32* %246 = OpAccessChain vs_TEXCOORD1 %81 
                                         f32 %247 = OpLoad %246 
                                         f32 %248 = OpFMul %245 %247 
                                                      OpStore %244 %248 
                                         f32 %249 = OpLoad %185 
                                  Input f32* %250 = OpAccessChain vs_TEXCOORD1 %81 
                                         f32 %251 = OpLoad %250 
                                         f32 %252 = OpFMul %249 %251 
                                         f32 %253 = OpFAdd %252 %87 
                                                      OpStore %85 %253 
                                         f32 %254 = OpLoad %244 
                                         f32 %255 = OpFMul %254 %91 
                                         f32 %256 = OpLoad %89 
                                         f32 %257 = OpFAdd %255 %256 
                                                      OpStore %89 %257 
                                         f32 %258 = OpLoad %89 
                                         f32 %259 = OpLoad %85 
                                         f32 %260 = OpFDiv %258 %259 
                                                      OpStore %85 %260 
                                         f32 %261 = OpLoad %85 
                                         f32 %262 = OpExtInst %1 43 %261 %56 %87 
                                                      OpStore %85 %262 
                                         f32 %263 = OpLoad %85 
                                         f32 %264 = OpFNegate %263 
                                         f32 %265 = OpFAdd %264 %87 
                                                      OpStore %85 %265 
                                       f32_4 %266 = OpLoad %219 
                                         f32 %267 = OpLoad %85 
                                       f32_4 %268 = OpCompositeConstruct %267 %267 %267 %267 
                                       f32_4 %269 = OpFMul %266 %268 
                                                      OpStore %219 %269 
                                       f32_4 %272 = OpLoad %219 
                                       f32_4 %273 = OpLoad %149 
                                       f32_4 %274 = OpVectorShuffle %273 %273 3 3 3 3 
                                       f32_4 %275 = OpFMul %272 %274 
                                                      OpStore %271 %275 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "vulkan hw_tier01 " {
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 517
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %12 %121 %125 %126 %129 %131 %183 %193 %236 %358 %452 %485 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpDecorate %12 Location 12 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpDecorate %19 ArrayStride 19 
                                                      OpDecorate %20 ArrayStride 20 
                                                      OpDecorate %21 ArrayStride 21 
                                                      OpDecorate %22 ArrayStride 22 
                                                      OpMemberDecorate %23 0 Offset 23 
                                                      OpMemberDecorate %23 1 Offset 23 
                                                      OpMemberDecorate %23 2 Offset 23 
                                                      OpMemberDecorate %23 3 Offset 23 
                                                      OpMemberDecorate %23 4 Offset 23 
                                                      OpMemberDecorate %23 5 Offset 23 
                                                      OpMemberDecorate %23 6 Offset 23 
                                                      OpMemberDecorate %23 7 Offset 23 
                                                      OpMemberDecorate %23 8 Offset 23 
                                                      OpMemberDecorate %23 9 Offset 23 
                                                      OpMemberDecorate %23 10 Offset 23 
                                                      OpMemberDecorate %23 11 Offset 23 
                                                      OpMemberDecorate %23 12 Offset 23 
                                                      OpMemberDecorate %23 13 Offset 23 
                                                      OpMemberDecorate %23 14 Offset 23 
                                                      OpMemberDecorate %23 15 Offset 23 
                                                      OpMemberDecorate %23 16 Offset 23 
                                                      OpMemberDecorate %23 17 Offset 23 
                                                      OpMemberDecorate %23 18 Offset 23 
                                                      OpMemberDecorate %23 19 Offset 23 
                                                      OpMemberDecorate %23 20 Offset 23 
                                                      OpMemberDecorate %23 21 Offset 23 
                                                      OpMemberDecorate %23 22 Offset 23 
                                                      OpMemberDecorate %23 23 Offset 23 
                                                      OpMemberDecorate %23 24 Offset 23 
                                                      OpDecorate %23 Block 
                                                      OpDecorate %25 DescriptorSet 25 
                                                      OpDecorate %25 Binding 25 
                                                      OpMemberDecorate %119 0 BuiltIn 119 
                                                      OpMemberDecorate %119 1 BuiltIn 119 
                                                      OpMemberDecorate %119 2 BuiltIn 119 
                                                      OpDecorate %119 Block 
                                                      OpDecorate %125 RelaxedPrecision 
                                                      OpDecorate %125 Location 125 
                                                      OpDecorate %126 RelaxedPrecision 
                                                      OpDecorate %126 Location 126 
                                                      OpDecorate %127 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD0 Location 129 
                                                      OpDecorate %131 Location 131 
                                                      OpDecorate vs_TEXCOORD2 Location 183 
                                                      OpDecorate %193 Location 193 
                                                      OpDecorate %236 Location 236 
                                                      OpDecorate vs_TEXCOORD1 Location 358 
                                                      OpDecorate vs_TEXCOORD3 Location 452 
                                                      OpDecorate vs_TEXCOORD5 Location 485 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 3 
                                               %8 = OpTypePointer Private %7 
                                Private f32_3* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 4 
                                              %11 = OpTypePointer Input %10 
                                 Input f32_4* %12 = OpVariable Input 
                                              %13 = OpTypeVector %6 2 
                                              %16 = OpTypeInt 32 0 
                                          u32 %17 = OpConstant 4 
                                              %18 = OpTypeArray %10 %17 
                                              %19 = OpTypeArray %10 %17 
                                              %20 = OpTypeArray %10 %17 
                                              %21 = OpTypeArray %10 %17 
                                              %22 = OpTypeArray %10 %17 
                                              %23 = OpTypeStruct %7 %10 %18 %19 %20 %21 %6 %6 %6 %22 %6 %6 %6 %6 %6 %10 %6 %6 %6 %6 %6 %6 %6 %10 %10 
                                              %24 = OpTypePointer Uniform %23 
Uniform struct {f32_3; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4[4]; f32; f32; f32; f32_4[4]; f32; f32; f32; f32; f32; f32_4; f32; f32; f32; f32; f32; f32; f32; f32_4; f32_4;}* %25 = OpVariable Uniform 
                                              %26 = OpTypeInt 32 1 
                                          i32 %27 = OpConstant 13 
                                              %28 = OpTypePointer Uniform %6 
                                          i32 %31 = OpConstant 14 
                                              %38 = OpTypePointer Private %10 
                               Private f32_4* %39 = OpVariable Private 
                                          i32 %42 = OpConstant 2 
                                          i32 %43 = OpConstant 1 
                                              %44 = OpTypePointer Uniform %10 
                                          i32 %48 = OpConstant 0 
                               Private f32_4* %63 = OpVariable Private 
                                          i32 %65 = OpConstant 3 
                                              %83 = OpTypePointer Uniform %7 
                               Private f32_4* %89 = OpVariable Private 
                                          i32 %92 = OpConstant 5 
                                         u32 %117 = OpConstant 1 
                                             %118 = OpTypeArray %6 %117 
                                             %119 = OpTypeStruct %10 %6 %118 
                                             %120 = OpTypePointer Output %119 
        Output struct {f32_4; f32; f32[1];}* %121 = OpVariable Output 
                                             %123 = OpTypePointer Output %10 
                               Output f32_4* %125 = OpVariable Output 
                                Input f32_4* %126 = OpVariable Input 
                                             %128 = OpTypePointer Output %13 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                             %130 = OpTypePointer Input %13 
                                Input f32_2* %131 = OpVariable Input 
                                             %133 = OpTypePointer Private %13 
                              Private f32_2* %134 = OpVariable Private 
                                         i32 %138 = OpConstant 4 
                                         i32 %154 = OpConstant 19 
                                         i32 %157 = OpConstant 20 
                                             %166 = OpTypePointer Private %6 
                                Private f32* %167 = OpVariable Private 
                                         i32 %171 = OpConstant 16 
                                         i32 %174 = OpConstant 17 
                                         f32 %178 = OpConstant 3.674022E-40 
                                       f32_2 %179 = OpConstantComposite %178 %178 
                       Output f32_4* vs_TEXCOORD2 = OpVariable Output 
                                         u32 %190 = OpConstant 0 
                                Private f32* %192 = OpVariable Private 
                                Input f32_2* %193 = OpVariable Input 
                                             %194 = OpTypePointer Input %6 
                                         i32 %198 = OpConstant 18 
                                         i32 %202 = OpConstant 22 
                                         f32 %205 = OpConstant 3.674022E-40 
                                         i32 %214 = OpConstant 21 
                                             %235 = OpTypePointer Input %7 
                                Input f32_3* %236 = OpVariable Input 
                                         u32 %254 = OpConstant 2 
                              Private f32_3* %263 = OpVariable Private 
                                             %296 = OpTypeBool 
                                             %297 = OpTypePointer Private %296 
                               Private bool* %298 = OpVariable Private 
                                         u32 %299 = OpConstant 3 
                                         f32 %302 = OpConstant 3.674022E-40 
                                             %305 = OpTypePointer Function %6 
                               Private bool* %315 = OpVariable Private 
                                         i32 %322 = OpConstant 10 
                                         i32 %326 = OpConstant 11 
                                         i32 %341 = OpConstant 6 
                                         i32 %348 = OpConstant 12 
                                         f32 %355 = OpConstant 3.674022E-40 
                       Output f32_4* vs_TEXCOORD1 = OpVariable Output 
                                         i32 %366 = OpConstant 8 
                                         i32 %374 = OpConstant 7 
                                             %394 = OpTypePointer Output %6 
                                         i32 %407 = OpConstant 15 
                                         f32 %410 = OpConstant 3.674022E-40 
                                       f32_4 %411 = OpConstantComposite %410 %410 %410 %410 
                                         f32 %414 = OpConstant 3.674022E-40 
                                       f32_4 %415 = OpConstantComposite %414 %414 %414 %414 
                                         f32 %419 = OpConstant 3.674022E-40 
                                       f32_2 %420 = OpConstantComposite %419 %419 
                                         i32 %438 = OpConstant 9 
                                             %451 = OpTypePointer Output %7 
                       Output f32_3* vs_TEXCOORD3 = OpVariable Output 
                                         f32 %463 = OpConstant 3.674022E-40 
                                         f32 %473 = OpConstant 3.674022E-40 
                                         f32 %480 = OpConstant 3.674022E-40 
                                       f32_2 %481 = OpConstantComposite %480 %480 
                       Output f32_4* vs_TEXCOORD5 = OpVariable Output 
                                         i32 %488 = OpConstant 23 
                                         i32 %501 = OpConstant 24 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                               Function f32* %306 = OpVariable Function 
                                        f32_4 %14 = OpLoad %12 
                                        f32_2 %15 = OpVectorShuffle %14 %14 0 1 
                                 Uniform f32* %29 = OpAccessChain %25 %27 
                                          f32 %30 = OpLoad %29 
                                 Uniform f32* %32 = OpAccessChain %25 %31 
                                          f32 %33 = OpLoad %32 
                                        f32_2 %34 = OpCompositeConstruct %30 %33 
                                        f32_2 %35 = OpFAdd %15 %34 
                                        f32_3 %36 = OpLoad %9 
                                        f32_3 %37 = OpVectorShuffle %36 %35 3 4 2 
                                                      OpStore %9 %37 
                                        f32_3 %40 = OpLoad %9 
                                        f32_4 %41 = OpVectorShuffle %40 %40 1 1 1 1 
                               Uniform f32_4* %45 = OpAccessChain %25 %42 %43 
                                        f32_4 %46 = OpLoad %45 
                                        f32_4 %47 = OpFMul %41 %46 
                                                      OpStore %39 %47 
                               Uniform f32_4* %49 = OpAccessChain %25 %42 %48 
                                        f32_4 %50 = OpLoad %49 
                                        f32_3 %51 = OpLoad %9 
                                        f32_4 %52 = OpVectorShuffle %51 %51 0 0 0 0 
                                        f32_4 %53 = OpFMul %50 %52 
                                        f32_4 %54 = OpLoad %39 
                                        f32_4 %55 = OpFAdd %53 %54 
                                                      OpStore %39 %55 
                               Uniform f32_4* %56 = OpAccessChain %25 %42 %42 
                                        f32_4 %57 = OpLoad %56 
                                        f32_4 %58 = OpLoad %12 
                                        f32_4 %59 = OpVectorShuffle %58 %58 2 2 2 2 
                                        f32_4 %60 = OpFMul %57 %59 
                                        f32_4 %61 = OpLoad %39 
                                        f32_4 %62 = OpFAdd %60 %61 
                                                      OpStore %39 %62 
                                        f32_4 %64 = OpLoad %39 
                               Uniform f32_4* %66 = OpAccessChain %25 %42 %65 
                                        f32_4 %67 = OpLoad %66 
                                        f32_4 %68 = OpFAdd %64 %67 
                                                      OpStore %63 %68 
                               Uniform f32_4* %69 = OpAccessChain %25 %42 %65 
                                        f32_4 %70 = OpLoad %69 
                                        f32_3 %71 = OpVectorShuffle %70 %70 0 1 2 
                                        f32_4 %72 = OpLoad %12 
                                        f32_3 %73 = OpVectorShuffle %72 %72 3 3 3 
                                        f32_3 %74 = OpFMul %71 %73 
                                        f32_4 %75 = OpLoad %39 
                                        f32_3 %76 = OpVectorShuffle %75 %75 0 1 2 
                                        f32_3 %77 = OpFAdd %74 %76 
                                        f32_4 %78 = OpLoad %39 
                                        f32_4 %79 = OpVectorShuffle %78 %77 4 5 6 3 
                                                      OpStore %39 %79 
                                        f32_4 %80 = OpLoad %39 
                                        f32_3 %81 = OpVectorShuffle %80 %80 0 1 2 
                                        f32_3 %82 = OpFNegate %81 
                               Uniform f32_3* %84 = OpAccessChain %25 %48 
                                        f32_3 %85 = OpLoad %84 
                                        f32_3 %86 = OpFAdd %82 %85 
                                        f32_4 %87 = OpLoad %39 
                                        f32_4 %88 = OpVectorShuffle %87 %86 4 5 6 3 
                                                      OpStore %39 %88 
                                        f32_4 %90 = OpLoad %63 
                                        f32_4 %91 = OpVectorShuffle %90 %90 1 1 1 1 
                               Uniform f32_4* %93 = OpAccessChain %25 %92 %43 
                                        f32_4 %94 = OpLoad %93 
                                        f32_4 %95 = OpFMul %91 %94 
                                                      OpStore %89 %95 
                               Uniform f32_4* %96 = OpAccessChain %25 %92 %48 
                                        f32_4 %97 = OpLoad %96 
                                        f32_4 %98 = OpLoad %63 
                                        f32_4 %99 = OpVectorShuffle %98 %98 0 0 0 0 
                                       f32_4 %100 = OpFMul %97 %99 
                                       f32_4 %101 = OpLoad %89 
                                       f32_4 %102 = OpFAdd %100 %101 
                                                      OpStore %89 %102 
                              Uniform f32_4* %103 = OpAccessChain %25 %92 %42 
                                       f32_4 %104 = OpLoad %103 
                                       f32_4 %105 = OpLoad %63 
                                       f32_4 %106 = OpVectorShuffle %105 %105 2 2 2 2 
                                       f32_4 %107 = OpFMul %104 %106 
                                       f32_4 %108 = OpLoad %89 
                                       f32_4 %109 = OpFAdd %107 %108 
                                                      OpStore %89 %109 
                              Uniform f32_4* %110 = OpAccessChain %25 %92 %65 
                                       f32_4 %111 = OpLoad %110 
                                       f32_4 %112 = OpLoad %63 
                                       f32_4 %113 = OpVectorShuffle %112 %112 3 3 3 3 
                                       f32_4 %114 = OpFMul %111 %113 
                                       f32_4 %115 = OpLoad %89 
                                       f32_4 %116 = OpFAdd %114 %115 
                                                      OpStore %63 %116 
                                       f32_4 %122 = OpLoad %63 
                               Output f32_4* %124 = OpAccessChain %121 %48 
                                                      OpStore %124 %122 
                                       f32_4 %127 = OpLoad %126 
                                                      OpStore %125 %127 
                                       f32_2 %132 = OpLoad %131 
                                                      OpStore vs_TEXCOORD0 %132 
                              Uniform f32_4* %135 = OpAccessChain %25 %43 
                                       f32_4 %136 = OpLoad %135 
                                       f32_2 %137 = OpVectorShuffle %136 %136 1 1 
                              Uniform f32_4* %139 = OpAccessChain %25 %138 %43 
                                       f32_4 %140 = OpLoad %139 
                                       f32_2 %141 = OpVectorShuffle %140 %140 0 1 
                                       f32_2 %142 = OpFMul %137 %141 
                                                      OpStore %134 %142 
                              Uniform f32_4* %143 = OpAccessChain %25 %138 %48 
                                       f32_4 %144 = OpLoad %143 
                                       f32_2 %145 = OpVectorShuffle %144 %144 0 1 
                              Uniform f32_4* %146 = OpAccessChain %25 %43 
                                       f32_4 %147 = OpLoad %146 
                                       f32_2 %148 = OpVectorShuffle %147 %147 0 0 
                                       f32_2 %149 = OpFMul %145 %148 
                                       f32_2 %150 = OpLoad %134 
                                       f32_2 %151 = OpFAdd %149 %150 
                                                      OpStore %134 %151 
                                       f32_2 %152 = OpLoad %134 
                                       f32_2 %153 = OpExtInst %1 4 %152 
                                Uniform f32* %155 = OpAccessChain %25 %154 
                                         f32 %156 = OpLoad %155 
                                Uniform f32* %158 = OpAccessChain %25 %157 
                                         f32 %159 = OpLoad %158 
                                       f32_2 %160 = OpCompositeConstruct %156 %159 
                                       f32_2 %161 = OpFMul %153 %160 
                                                      OpStore %134 %161 
                                       f32_4 %162 = OpLoad %63 
                                       f32_2 %163 = OpVectorShuffle %162 %162 3 3 
                                       f32_2 %164 = OpLoad %134 
                                       f32_2 %165 = OpFDiv %163 %164 
                                                      OpStore %134 %165 
                                       f32_2 %168 = OpLoad %134 
                                       f32_2 %169 = OpLoad %134 
                                         f32 %170 = OpDot %168 %169 
                                                      OpStore %167 %170 
                                Uniform f32* %172 = OpAccessChain %25 %171 
                                         f32 %173 = OpLoad %172 
                                Uniform f32* %175 = OpAccessChain %25 %174 
                                         f32 %176 = OpLoad %175 
                                       f32_2 %177 = OpCompositeConstruct %173 %176 
                                       f32_2 %180 = OpFMul %177 %179 
                                       f32_2 %181 = OpLoad %134 
                                       f32_2 %182 = OpFAdd %180 %181 
                                                      OpStore %134 %182 
                                       f32_2 %184 = OpLoad %134 
                                       f32_2 %185 = OpFDiv %179 %184 
                                       f32_4 %186 = OpLoad vs_TEXCOORD2 
                                       f32_4 %187 = OpVectorShuffle %186 %185 0 1 4 5 
                                                      OpStore vs_TEXCOORD2 %187 
                                         f32 %188 = OpLoad %167 
                                         f32 %189 = OpExtInst %1 32 %188 
                                Private f32* %191 = OpAccessChain %134 %190 
                                                      OpStore %191 %189 
                                  Input f32* %195 = OpAccessChain %193 %117 
                                         f32 %196 = OpLoad %195 
                                         f32 %197 = OpExtInst %1 4 %196 
                                Uniform f32* %199 = OpAccessChain %25 %198 
                                         f32 %200 = OpLoad %199 
                                         f32 %201 = OpFMul %197 %200 
                                                      OpStore %192 %201 
                                Uniform f32* %203 = OpAccessChain %25 %202 
                                         f32 %204 = OpLoad %203 
                                         f32 %206 = OpFAdd %204 %205 
                                                      OpStore %167 %206 
                                         f32 %207 = OpLoad %192 
                                         f32 %208 = OpLoad %167 
                                         f32 %209 = OpFMul %207 %208 
                                                      OpStore %192 %209 
                                         f32 %210 = OpLoad %192 
                                Private f32* %211 = OpAccessChain %134 %190 
                                         f32 %212 = OpLoad %211 
                                         f32 %213 = OpFMul %210 %212 
                                                      OpStore %167 %213 
                                Uniform f32* %215 = OpAccessChain %25 %214 
                                         f32 %216 = OpLoad %215 
                                         f32 %217 = OpFNegate %216 
                                         f32 %218 = OpFAdd %217 %205 
                                Private f32* %219 = OpAccessChain %63 %190 
                                                      OpStore %219 %218 
                                         f32 %220 = OpLoad %167 
                                         f32 %221 = OpExtInst %1 4 %220 
                                Private f32* %222 = OpAccessChain %63 %190 
                                         f32 %223 = OpLoad %222 
                                         f32 %224 = OpFMul %221 %223 
                                Private f32* %225 = OpAccessChain %63 %190 
                                                      OpStore %225 %224 
                                Private f32* %226 = OpAccessChain %134 %190 
                                         f32 %227 = OpLoad %226 
                                         f32 %228 = OpLoad %192 
                                         f32 %229 = OpFMul %227 %228 
                                Private f32* %230 = OpAccessChain %63 %190 
                                         f32 %231 = OpLoad %230 
                                         f32 %232 = OpFNegate %231 
                                         f32 %233 = OpFAdd %229 %232 
                                Private f32* %234 = OpAccessChain %134 %190 
                                                      OpStore %234 %233 
                                       f32_3 %237 = OpLoad %236 
                              Uniform f32_4* %238 = OpAccessChain %25 %65 %48 
                                       f32_4 %239 = OpLoad %238 
                                       f32_3 %240 = OpVectorShuffle %239 %239 0 1 2 
                                         f32 %241 = OpDot %237 %240 
                                Private f32* %242 = OpAccessChain %89 %190 
                                                      OpStore %242 %241 
                                       f32_3 %243 = OpLoad %236 
                              Uniform f32_4* %244 = OpAccessChain %25 %65 %43 
                                       f32_4 %245 = OpLoad %244 
                                       f32_3 %246 = OpVectorShuffle %245 %245 0 1 2 
                                         f32 %247 = OpDot %243 %246 
                                Private f32* %248 = OpAccessChain %89 %117 
                                                      OpStore %248 %247 
                                       f32_3 %249 = OpLoad %236 
                              Uniform f32_4* %250 = OpAccessChain %25 %65 %42 
                                       f32_4 %251 = OpLoad %250 
                                       f32_3 %252 = OpVectorShuffle %251 %251 0 1 2 
                                         f32 %253 = OpDot %249 %252 
                                Private f32* %255 = OpAccessChain %89 %254 
                                                      OpStore %255 %253 
                                       f32_4 %256 = OpLoad %89 
                                       f32_3 %257 = OpVectorShuffle %256 %256 0 1 2 
                                       f32_4 %258 = OpLoad %89 
                                       f32_3 %259 = OpVectorShuffle %258 %258 0 1 2 
                                         f32 %260 = OpDot %257 %259 
                                                      OpStore %192 %260 
                                         f32 %261 = OpLoad %192 
                                         f32 %262 = OpExtInst %1 32 %261 
                                                      OpStore %192 %262 
                                         f32 %264 = OpLoad %192 
                                       f32_3 %265 = OpCompositeConstruct %264 %264 %264 
                                       f32_4 %266 = OpLoad %89 
                                       f32_3 %267 = OpVectorShuffle %266 %266 0 1 2 
                                       f32_3 %268 = OpFMul %265 %267 
                                                      OpStore %263 %268 
                                       f32_4 %269 = OpLoad %39 
                                       f32_3 %270 = OpVectorShuffle %269 %269 0 1 2 
                                       f32_4 %271 = OpLoad %39 
                                       f32_3 %272 = OpVectorShuffle %271 %271 0 1 2 
                                         f32 %273 = OpDot %270 %272 
                                                      OpStore %192 %273 
                                         f32 %274 = OpLoad %192 
                                         f32 %275 = OpExtInst %1 32 %274 
                                                      OpStore %192 %275 
                                         f32 %276 = OpLoad %192 
                                       f32_3 %277 = OpCompositeConstruct %276 %276 %276 
                                       f32_4 %278 = OpLoad %39 
                                       f32_3 %279 = OpVectorShuffle %278 %278 0 1 2 
                                       f32_3 %280 = OpFMul %277 %279 
                                       f32_4 %281 = OpLoad %89 
                                       f32_4 %282 = OpVectorShuffle %281 %280 4 5 6 3 
                                                      OpStore %89 %282 
                                       f32_3 %283 = OpLoad %263 
                                       f32_4 %284 = OpLoad %89 
                                       f32_3 %285 = OpVectorShuffle %284 %284 0 1 2 
                                         f32 %286 = OpDot %283 %285 
                                                      OpStore %192 %286 
                                         f32 %287 = OpLoad %192 
                                         f32 %288 = OpExtInst %1 4 %287 
                                Private f32* %289 = OpAccessChain %134 %190 
                                         f32 %290 = OpLoad %289 
                                         f32 %291 = OpFMul %288 %290 
                                Private f32* %292 = OpAccessChain %63 %190 
                                         f32 %293 = OpLoad %292 
                                         f32 %294 = OpFAdd %291 %293 
                                Private f32* %295 = OpAccessChain %134 %190 
                                                      OpStore %295 %294 
                                Uniform f32* %300 = OpAccessChain %25 %138 %65 %299 
                                         f32 %301 = OpLoad %300 
                                        bool %303 = OpFOrdEqual %301 %302 
                                                      OpStore %298 %303 
                                        bool %304 = OpLoad %298 
                                                      OpSelectionMerge %308 None 
                                                      OpBranchConditional %304 %307 %311 
                                             %307 = OpLabel 
                                Private f32* %309 = OpAccessChain %134 %190 
                                         f32 %310 = OpLoad %309 
                                                      OpStore %306 %310 
                                                      OpBranch %308 
                                             %311 = OpLabel 
                                         f32 %312 = OpLoad %167 
                                                      OpStore %306 %312 
                                                      OpBranch %308 
                                             %308 = OpLabel 
                                         f32 %313 = OpLoad %306 
                                Private f32* %314 = OpAccessChain %263 %190 
                                                      OpStore %314 %313 
                                  Input f32* %316 = OpAccessChain %193 %117 
                                         f32 %317 = OpLoad %316 
                                        bool %318 = OpFOrdGreaterThanEqual %302 %317 
                                                      OpStore %315 %318 
                                        bool %319 = OpLoad %315 
                                         f32 %320 = OpSelect %319 %205 %302 
                                Private f32* %321 = OpAccessChain %134 %190 
                                                      OpStore %321 %320 
                                Uniform f32* %323 = OpAccessChain %25 %322 
                                         f32 %324 = OpLoad %323 
                                         f32 %325 = OpFNegate %324 
                                Uniform f32* %327 = OpAccessChain %25 %326 
                                         f32 %328 = OpLoad %327 
                                         f32 %329 = OpFAdd %325 %328 
                                                      OpStore %192 %329 
                                Private f32* %330 = OpAccessChain %134 %190 
                                         f32 %331 = OpLoad %330 
                                         f32 %332 = OpLoad %192 
                                         f32 %333 = OpFMul %331 %332 
                                Uniform f32* %334 = OpAccessChain %25 %322 
                                         f32 %335 = OpLoad %334 
                                         f32 %336 = OpFAdd %333 %335 
                                Private f32* %337 = OpAccessChain %134 %190 
                                                      OpStore %337 %336 
                                Private f32* %338 = OpAccessChain %134 %190 
                                         f32 %339 = OpLoad %338 
                                         f32 %340 = OpFMul %339 %178 
                                Uniform f32* %342 = OpAccessChain %25 %341 
                                         f32 %343 = OpLoad %342 
                                         f32 %344 = OpFAdd %340 %343 
                                Private f32* %345 = OpAccessChain %134 %190 
                                                      OpStore %345 %344 
                                Private f32* %346 = OpAccessChain %134 %190 
                                         f32 %347 = OpLoad %346 
                                Uniform f32* %349 = OpAccessChain %25 %348 
                                         f32 %350 = OpLoad %349 
                                         f32 %351 = OpFMul %347 %350 
                                Private f32* %352 = OpAccessChain %134 %190 
                                                      OpStore %352 %351 
                                Private f32* %353 = OpAccessChain %134 %190 
                                         f32 %354 = OpLoad %353 
                                         f32 %356 = OpFMul %354 %355 
                                Private f32* %357 = OpAccessChain %263 %254 
                                                      OpStore %357 %356 
                                       f32_3 %359 = OpLoad %263 
                                       f32_2 %360 = OpVectorShuffle %359 %359 0 2 
                                       f32_4 %361 = OpLoad vs_TEXCOORD1 
                                       f32_4 %362 = OpVectorShuffle %361 %360 0 4 2 5 
                                                      OpStore vs_TEXCOORD1 %362 
                                Private f32* %363 = OpAccessChain %263 %190 
                                         f32 %364 = OpLoad %363 
                                         f32 %365 = OpFDiv %355 %364 
                                                      OpStore %192 %365 
                                Uniform f32* %367 = OpAccessChain %25 %366 
                                         f32 %368 = OpLoad %367 
                                         f32 %369 = OpFNegate %368 
                                Uniform f32* %370 = OpAccessChain %25 %348 
                                         f32 %371 = OpLoad %370 
                                         f32 %372 = OpFMul %369 %371 
                                         f32 %373 = OpFAdd %372 %205 
                                                      OpStore %167 %373 
                                Uniform f32* %375 = OpAccessChain %25 %374 
                                         f32 %376 = OpLoad %375 
                                         f32 %377 = OpFNegate %376 
                                Uniform f32* %378 = OpAccessChain %25 %348 
                                         f32 %379 = OpLoad %378 
                                         f32 %380 = OpFMul %377 %379 
                                         f32 %381 = OpLoad %167 
                                         f32 %382 = OpFAdd %380 %381 
                                                      OpStore %167 %382 
                                         f32 %383 = OpLoad %167 
                                         f32 %384 = OpFMul %383 %355 
                                         f32 %385 = OpLoad %192 
                                         f32 %386 = OpFNegate %385 
                                         f32 %387 = OpFAdd %384 %386 
                                                      OpStore %167 %387 
                                Private f32* %388 = OpAccessChain %134 %190 
                                         f32 %389 = OpLoad %388 
                                         f32 %390 = OpFNegate %389 
                                         f32 %391 = OpFMul %390 %355 
                                         f32 %392 = OpLoad %167 
                                         f32 %393 = OpFAdd %391 %392 
                                 Output f32* %395 = OpAccessChain vs_TEXCOORD1 %190 
                                                      OpStore %395 %393 
                                Private f32* %396 = OpAccessChain %134 %190 
                                         f32 %397 = OpLoad %396 
                                         f32 %398 = OpFNegate %397 
                                         f32 %399 = OpFMul %398 %355 
                                         f32 %400 = OpFAdd %399 %355 
                                Private f32* %401 = OpAccessChain %134 %190 
                                                      OpStore %401 %400 
                                         f32 %402 = OpLoad %192 
                                Private f32* %403 = OpAccessChain %134 %190 
                                         f32 %404 = OpLoad %403 
                                         f32 %405 = OpFAdd %402 %404 
                                 Output f32* %406 = OpAccessChain vs_TEXCOORD1 %254 
                                                      OpStore %406 %405 
                              Uniform f32_4* %408 = OpAccessChain %25 %407 
                                       f32_4 %409 = OpLoad %408 
                                       f32_4 %412 = OpExtInst %1 40 %409 %411 
                                                      OpStore %63 %412 
                                       f32_4 %413 = OpLoad %63 
                                       f32_4 %416 = OpExtInst %1 37 %413 %415 
                                                      OpStore %63 %416 
                                       f32_3 %417 = OpLoad %9 
                                       f32_2 %418 = OpVectorShuffle %417 %417 0 1 
                                       f32_2 %421 = OpFMul %418 %420 
                                       f32_4 %422 = OpLoad %63 
                                       f32_2 %423 = OpVectorShuffle %422 %422 0 1 
                                       f32_2 %424 = OpFNegate %423 
                                       f32_2 %425 = OpFAdd %421 %424 
                                       f32_3 %426 = OpLoad %9 
                                       f32_3 %427 = OpVectorShuffle %426 %425 3 4 2 
                                                      OpStore %9 %427 
                                       f32_4 %428 = OpLoad %63 
                                       f32_2 %429 = OpVectorShuffle %428 %428 2 3 
                                       f32_2 %430 = OpFNegate %429 
                                       f32_3 %431 = OpLoad %9 
                                       f32_2 %432 = OpVectorShuffle %431 %431 0 1 
                                       f32_2 %433 = OpFAdd %430 %432 
                                       f32_4 %434 = OpLoad vs_TEXCOORD2 
                                       f32_4 %435 = OpVectorShuffle %434 %433 4 5 2 3 
                                                      OpStore vs_TEXCOORD2 %435 
                                       f32_4 %436 = OpLoad %39 
                                       f32_3 %437 = OpVectorShuffle %436 %436 1 1 1 
                              Uniform f32_4* %439 = OpAccessChain %25 %438 %43 
                                       f32_4 %440 = OpLoad %439 
                                       f32_3 %441 = OpVectorShuffle %440 %440 0 1 2 
                                       f32_3 %442 = OpFMul %437 %441 
                                                      OpStore %9 %442 
                              Uniform f32_4* %443 = OpAccessChain %25 %438 %48 
                                       f32_4 %444 = OpLoad %443 
                                       f32_3 %445 = OpVectorShuffle %444 %444 0 1 2 
                                       f32_4 %446 = OpLoad %39 
                                       f32_3 %447 = OpVectorShuffle %446 %446 0 0 0 
                                       f32_3 %448 = OpFMul %445 %447 
                                       f32_3 %449 = OpLoad %9 
                                       f32_3 %450 = OpFAdd %448 %449 
                                                      OpStore %9 %450 
                              Uniform f32_4* %453 = OpAccessChain %25 %438 %42 
                                       f32_4 %454 = OpLoad %453 
                                       f32_3 %455 = OpVectorShuffle %454 %454 0 1 2 
                                       f32_4 %456 = OpLoad %39 
                                       f32_3 %457 = OpVectorShuffle %456 %456 2 2 2 
                                       f32_3 %458 = OpFMul %455 %457 
                                       f32_3 %459 = OpLoad %9 
                                       f32_3 %460 = OpFAdd %458 %459 
                                                      OpStore vs_TEXCOORD3 %460 
                                  Input f32* %461 = OpAccessChain %193 %190 
                                         f32 %462 = OpLoad %461 
                                         f32 %464 = OpFMul %462 %463 
                                Private f32* %465 = OpAccessChain %9 %190 
                                                      OpStore %465 %464 
                                Private f32* %466 = OpAccessChain %9 %190 
                                         f32 %467 = OpLoad %466 
                                         f32 %468 = OpExtInst %1 8 %467 
                                Private f32* %469 = OpAccessChain %134 %190 
                                                      OpStore %469 %468 
                                Private f32* %470 = OpAccessChain %134 %190 
                                         f32 %471 = OpLoad %470 
                                         f32 %472 = OpFNegate %471 
                                         f32 %474 = OpFMul %472 %473 
                                  Input f32* %475 = OpAccessChain %193 %190 
                                         f32 %476 = OpLoad %475 
                                         f32 %477 = OpFAdd %474 %476 
                                Private f32* %478 = OpAccessChain %134 %117 
                                                      OpStore %478 %477 
                                       f32_2 %479 = OpLoad %134 
                                       f32_2 %482 = OpFMul %479 %481 
                                       f32_3 %483 = OpLoad %9 
                                       f32_3 %484 = OpVectorShuffle %483 %482 3 4 2 
                                                      OpStore %9 %484 
                                       f32_3 %486 = OpLoad %9 
                                       f32_2 %487 = OpVectorShuffle %486 %486 0 1 
                              Uniform f32_4* %489 = OpAccessChain %25 %488 
                                       f32_4 %490 = OpLoad %489 
                                       f32_2 %491 = OpVectorShuffle %490 %490 0 1 
                                       f32_2 %492 = OpFMul %487 %491 
                              Uniform f32_4* %493 = OpAccessChain %25 %488 
                                       f32_4 %494 = OpLoad %493 
                                       f32_2 %495 = OpVectorShuffle %494 %494 2 3 
                                       f32_2 %496 = OpFAdd %492 %495 
                                       f32_4 %497 = OpLoad vs_TEXCOORD5 
                                       f32_4 %498 = OpVectorShuffle %497 %496 4 5 2 3 
                                                      OpStore vs_TEXCOORD5 %498 
                                       f32_3 %499 = OpLoad %9 
                                       f32_2 %500 = OpVectorShuffle %499 %499 0 1 
                              Uniform f32_4* %502 = OpAccessChain %25 %501 
                                       f32_4 %503 = OpLoad %502 
                                       f32_2 %504 = OpVectorShuffle %503 %503 0 1 
                                       f32_2 %505 = OpFMul %500 %504 
                              Uniform f32_4* %506 = OpAccessChain %25 %501 
                                       f32_4 %507 = OpLoad %506 
                                       f32_2 %508 = OpVectorShuffle %507 %507 2 3 
                                       f32_2 %509 = OpFAdd %505 %508 
                                       f32_4 %510 = OpLoad vs_TEXCOORD5 
                                       f32_4 %511 = OpVectorShuffle %510 %509 0 1 4 5 
                                                      OpStore vs_TEXCOORD5 %511 
                                 Output f32* %512 = OpAccessChain %121 %48 %117 
                                         f32 %513 = OpLoad %512 
                                         f32 %514 = OpFNegate %513 
                                 Output f32* %515 = OpAccessChain %121 %48 %117 
                                                      OpStore %515 %514 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 277
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %22 %35 %128 %149 %271 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpDecorate %9 RelaxedPrecision 
                                                      OpDecorate %12 RelaxedPrecision 
                                                      OpDecorate %12 DescriptorSet 12 
                                                      OpDecorate %12 Binding 12 
                                                      OpDecorate %13 RelaxedPrecision 
                                                      OpDecorate %16 RelaxedPrecision 
                                                      OpDecorate %16 DescriptorSet 16 
                                                      OpDecorate %16 Binding 16 
                                                      OpDecorate %17 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD0 Location 22 
                                                      OpDecorate %27 RelaxedPrecision 
                                                      OpDecorate %33 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD1 Location 35 
                                                      OpDecorate %45 RelaxedPrecision 
                                                      OpDecorate %46 RelaxedPrecision 
                                                      OpMemberDecorate %69 0 Offset 69 
                                                      OpMemberDecorate %69 1 Offset 69 
                                                      OpMemberDecorate %69 2 Offset 69 
                                                      OpMemberDecorate %69 3 RelaxedPrecision 
                                                      OpMemberDecorate %69 3 Offset 69 
                                                      OpMemberDecorate %69 4 Offset 69 
                                                      OpMemberDecorate %69 5 Offset 69 
                                                      OpMemberDecorate %69 6 Offset 69 
                                                      OpMemberDecorate %69 7 RelaxedPrecision 
                                                      OpMemberDecorate %69 7 Offset 69 
                                                      OpMemberDecorate %69 8 Offset 69 
                                                      OpMemberDecorate %69 9 Offset 69 
                                                      OpDecorate %69 Block 
                                                      OpDecorate %71 DescriptorSet 71 
                                                      OpDecorate %71 Binding 71 
                                                      OpDecorate %85 RelaxedPrecision 
                                                      OpDecorate %89 RelaxedPrecision 
                                                      OpDecorate %93 RelaxedPrecision 
                                                      OpDecorate %94 RelaxedPrecision 
                                                      OpDecorate %95 RelaxedPrecision 
                                                      OpDecorate %101 RelaxedPrecision 
                                                      OpDecorate %103 RelaxedPrecision 
                                                      OpDecorate %104 RelaxedPrecision 
                                                      OpDecorate %110 RelaxedPrecision 
                                                      OpDecorate %111 RelaxedPrecision 
                                                      OpDecorate %113 RelaxedPrecision 
                                                      OpDecorate %114 RelaxedPrecision 
                                                      OpDecorate %115 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD5 Location 128 
                                                      OpDecorate %134 RelaxedPrecision 
                                                      OpDecorate %134 DescriptorSet 134 
                                                      OpDecorate %134 Binding 134 
                                                      OpDecorate %135 RelaxedPrecision 
                                                      OpDecorate %136 RelaxedPrecision 
                                                      OpDecorate %136 DescriptorSet 136 
                                                      OpDecorate %136 Binding 136 
                                                      OpDecorate %137 RelaxedPrecision 
                                                      OpDecorate %143 RelaxedPrecision 
                                                      OpDecorate %146 RelaxedPrecision 
                                                      OpDecorate %147 RelaxedPrecision 
                                                      OpDecorate %148 RelaxedPrecision 
                                                      OpDecorate %149 RelaxedPrecision 
                                                      OpDecorate %149 Location 149 
                                                      OpDecorate %150 RelaxedPrecision 
                                                      OpDecorate %151 RelaxedPrecision 
                                                      OpDecorate %154 RelaxedPrecision 
                                                      OpDecorate %155 RelaxedPrecision 
                                                      OpDecorate %156 RelaxedPrecision 
                                                      OpDecorate %172 RelaxedPrecision 
                                                      OpDecorate %173 RelaxedPrecision 
                                                      OpDecorate %173 DescriptorSet 173 
                                                      OpDecorate %173 Binding 173 
                                                      OpDecorate %174 RelaxedPrecision 
                                                      OpDecorate %175 RelaxedPrecision 
                                                      OpDecorate %175 DescriptorSet 175 
                                                      OpDecorate %175 Binding 175 
                                                      OpDecorate %176 RelaxedPrecision 
                                                      OpDecorate %181 RelaxedPrecision 
                                                      OpDecorate %182 RelaxedPrecision 
                                                      OpDecorate %183 RelaxedPrecision 
                                                      OpDecorate %184 RelaxedPrecision 
                                                      OpDecorate %187 RelaxedPrecision 
                                                      OpDecorate %189 RelaxedPrecision 
                                                      OpDecorate %190 RelaxedPrecision 
                                                      OpDecorate %195 RelaxedPrecision 
                                                      OpDecorate %201 RelaxedPrecision 
                                                      OpDecorate %202 RelaxedPrecision 
                                                      OpDecorate %207 RelaxedPrecision 
                                                      OpDecorate %209 RelaxedPrecision 
                                                      OpDecorate %210 RelaxedPrecision 
                                                      OpDecorate %215 RelaxedPrecision 
                                                      OpDecorate %216 RelaxedPrecision 
                                                      OpDecorate %217 RelaxedPrecision 
                                                      OpDecorate %218 RelaxedPrecision 
                                                      OpDecorate %219 RelaxedPrecision 
                                                      OpDecorate %224 RelaxedPrecision 
                                                      OpDecorate %225 RelaxedPrecision 
                                                      OpDecorate %230 RelaxedPrecision 
                                                      OpDecorate %232 RelaxedPrecision 
                                                      OpDecorate %233 RelaxedPrecision 
                                                      OpDecorate %235 RelaxedPrecision 
                                                      OpDecorate %236 RelaxedPrecision 
                                                      OpDecorate %256 RelaxedPrecision 
                                                      OpDecorate %258 RelaxedPrecision 
                                                      OpDecorate %259 RelaxedPrecision 
                                                      OpDecorate %260 RelaxedPrecision 
                                                      OpDecorate %261 RelaxedPrecision 
                                                      OpDecorate %262 RelaxedPrecision 
                                                      OpDecorate %263 RelaxedPrecision 
                                                      OpDecorate %264 RelaxedPrecision 
                                                      OpDecorate %265 RelaxedPrecision 
                                                      OpDecorate %266 RelaxedPrecision 
                                                      OpDecorate %267 RelaxedPrecision 
                                                      OpDecorate %268 RelaxedPrecision 
                                                      OpDecorate %269 RelaxedPrecision 
                                                      OpDecorate %271 RelaxedPrecision 
                                                      OpDecorate %271 Location 271 
                                                      OpDecorate %272 RelaxedPrecision 
                                                      OpDecorate %273 RelaxedPrecision 
                                                      OpDecorate %274 RelaxedPrecision 
                                                      OpDecorate %275 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypePointer UniformConstant %10 
         UniformConstant read_only Texture2D* %12 = OpVariable UniformConstant 
                                              %14 = OpTypeSampler 
                                              %15 = OpTypePointer UniformConstant %14 
                     UniformConstant sampler* %16 = OpVariable UniformConstant 
                                              %18 = OpTypeSampledImage %10 
                                              %20 = OpTypeVector %6 2 
                                              %21 = OpTypePointer Input %20 
                        Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                              %25 = OpTypeInt 32 0 
                                          u32 %26 = OpConstant 3 
                                          u32 %28 = OpConstant 0 
                                              %29 = OpTypePointer Private %6 
                                 Private f32* %31 = OpVariable Private 
                                              %34 = OpTypePointer Input %7 
                        Input f32_4* vs_TEXCOORD1 = OpVariable Input 
                                              %36 = OpTypePointer Input %6 
                                              %41 = OpTypeVector %6 3 
                                              %42 = OpTypePointer Private %41 
                               Private f32_3* %43 = OpVariable Private 
                                          u32 %47 = OpConstant 2 
                                              %52 = OpTypeBool 
                                              %53 = OpTypePointer Private %52 
                                Private bool* %54 = OpVariable Private 
                                          f32 %56 = OpConstant 3.674022E-40 
                                              %59 = OpTypeInt 32 1 
                                          i32 %60 = OpConstant 0 
                                          i32 %61 = OpConstant 1 
                                          i32 %63 = OpConstant -1 
                                              %69 = OpTypeStruct %7 %6 %6 %7 %6 %6 %6 %7 %6 %6 
                                              %70 = OpTypePointer Uniform %69 
Uniform struct {f32_4; f32; f32; f32_4; f32; f32; f32; f32_4; f32; f32;}* %71 = OpVariable Uniform 
                                          i32 %72 = OpConstant 8 
                                              %73 = OpTypePointer Uniform %6 
                                          i32 %76 = OpConstant 9 
                                          u32 %81 = OpConstant 1 
                                 Private f32* %85 = OpVariable Private 
                                          f32 %87 = OpConstant 3.674022E-40 
                                 Private f32* %89 = OpVariable Private 
                                          f32 %91 = OpConstant 3.674022E-40 
                                 Private f32* %95 = OpVariable Private 
                                         i32 %116 = OpConstant 5 
                                         i32 %119 = OpConstant 6 
                                             %123 = OpTypePointer Uniform %7 
                        Input f32_4* vs_TEXCOORD5 = OpVariable Input 
        UniformConstant read_only Texture2D* %134 = OpVariable UniformConstant 
                    UniformConstant sampler* %136 = OpVariable UniformConstant 
                              Private f32_4* %142 = OpVariable Private 
                                         i32 %144 = OpConstant 7 
                              Private f32_3* %148 = OpVariable Private 
                                Input f32_4* %149 = OpVariable Input 
                                         i32 %152 = OpConstant 3 
                                         i32 %159 = OpConstant 2 
                              Private f32_4* %172 = OpVariable Private 
        UniformConstant read_only Texture2D* %173 = OpVariable UniformConstant 
                    UniformConstant sampler* %175 = OpVariable UniformConstant 
                                Private f32* %185 = OpVariable Private 
                              Private f32_4* %195 = OpVariable Private 
                              Private f32_4* %219 = OpVariable Private 
                                         i32 %238 = OpConstant 4 
                                Private f32* %244 = OpVariable Private 
                                             %270 = OpTypePointer Output %7 
                               Output f32_4* %271 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                          read_only Texture2D %13 = OpLoad %12 
                                      sampler %17 = OpLoad %16 
                   read_only Texture2DSampled %19 = OpSampledImage %13 %17 
                                        f32_2 %23 = OpLoad vs_TEXCOORD0 
                                        f32_4 %24 = OpImageSampleImplicitLod %19 %23 
                                          f32 %27 = OpCompositeExtract %24 3 
                                 Private f32* %30 = OpAccessChain %9 %28 
                                                      OpStore %30 %27 
                                 Private f32* %32 = OpAccessChain %9 %28 
                                          f32 %33 = OpLoad %32 
                                   Input f32* %37 = OpAccessChain vs_TEXCOORD1 %28 
                                          f32 %38 = OpLoad %37 
                                          f32 %39 = OpFNegate %38 
                                          f32 %40 = OpFAdd %33 %39 
                                                      OpStore %31 %40 
                                 Private f32* %44 = OpAccessChain %9 %28 
                                          f32 %45 = OpLoad %44 
                                          f32 %46 = OpFNegate %45 
                                   Input f32* %48 = OpAccessChain vs_TEXCOORD1 %47 
                                          f32 %49 = OpLoad %48 
                                          f32 %50 = OpFAdd %46 %49 
                                 Private f32* %51 = OpAccessChain %43 %28 
                                                      OpStore %51 %50 
                                          f32 %55 = OpLoad %31 
                                         bool %57 = OpFOrdLessThan %55 %56 
                                                      OpStore %54 %57 
                                         bool %58 = OpLoad %54 
                                          i32 %62 = OpSelect %58 %61 %60 
                                          i32 %64 = OpIMul %62 %63 
                                         bool %65 = OpINotEqual %64 %60 
                                                      OpSelectionMerge %67 None 
                                                      OpBranchConditional %65 %66 %67 
                                              %66 = OpLabel 
                                                      OpKill
                                              %67 = OpLabel 
                                 Uniform f32* %74 = OpAccessChain %71 %72 
                                          f32 %75 = OpLoad %74 
                                 Uniform f32* %77 = OpAccessChain %71 %76 
                                          f32 %78 = OpLoad %77 
                                          f32 %79 = OpFMul %75 %78 
                                                      OpStore %31 %79 
                                          f32 %80 = OpLoad %31 
                                   Input f32* %82 = OpAccessChain vs_TEXCOORD1 %81 
                                          f32 %83 = OpLoad %82 
                                          f32 %84 = OpFMul %80 %83 
                                                      OpStore %31 %84 
                                          f32 %86 = OpLoad %31 
                                          f32 %88 = OpExtInst %1 37 %86 %87 
                                                      OpStore %85 %88 
                                          f32 %90 = OpLoad %31 
                                          f32 %92 = OpFMul %90 %91 
                                                      OpStore %89 %92 
                                          f32 %93 = OpLoad %85 
                                          f32 %94 = OpExtInst %1 31 %93 
                                                      OpStore %85 %94 
                                 Private f32* %96 = OpAccessChain %43 %28 
                                          f32 %97 = OpLoad %96 
                                   Input f32* %98 = OpAccessChain vs_TEXCOORD1 %81 
                                          f32 %99 = OpLoad %98 
                                         f32 %100 = OpFMul %97 %99 
                                         f32 %101 = OpLoad %89 
                                         f32 %102 = OpFAdd %100 %101 
                                                      OpStore %95 %102 
                                         f32 %103 = OpLoad %95 
                                         f32 %104 = OpExtInst %1 43 %103 %56 %87 
                                                      OpStore %95 %104 
                                Private f32* %105 = OpAccessChain %43 %28 
                                         f32 %106 = OpLoad %105 
                                  Input f32* %107 = OpAccessChain vs_TEXCOORD1 %81 
                                         f32 %108 = OpLoad %107 
                                         f32 %109 = OpFMul %106 %108 
                                         f32 %110 = OpLoad %89 
                                         f32 %111 = OpFNegate %110 
                                         f32 %112 = OpFAdd %109 %111 
                                                      OpStore %89 %112 
                                         f32 %113 = OpLoad %85 
                                         f32 %114 = OpLoad %95 
                                         f32 %115 = OpFMul %113 %114 
                                                      OpStore %85 %115 
                                Uniform f32* %117 = OpAccessChain %71 %116 
                                         f32 %118 = OpLoad %117 
                                Uniform f32* %120 = OpAccessChain %71 %119 
                                         f32 %121 = OpLoad %120 
                                       f32_2 %122 = OpCompositeConstruct %118 %121 
                              Uniform f32_4* %124 = OpAccessChain %71 %60 
                                       f32_4 %125 = OpLoad %124 
                                       f32_2 %126 = OpVectorShuffle %125 %125 1 1 
                                       f32_2 %127 = OpFMul %122 %126 
                                       f32_4 %129 = OpLoad vs_TEXCOORD5 
                                       f32_2 %130 = OpVectorShuffle %129 %129 2 3 
                                       f32_2 %131 = OpFAdd %127 %130 
                                       f32_3 %132 = OpLoad %43 
                                       f32_3 %133 = OpVectorShuffle %132 %131 3 4 2 
                                                      OpStore %43 %133 
                         read_only Texture2D %135 = OpLoad %134 
                                     sampler %137 = OpLoad %136 
                  read_only Texture2DSampled %138 = OpSampledImage %135 %137 
                                       f32_3 %139 = OpLoad %43 
                                       f32_2 %140 = OpVectorShuffle %139 %139 0 1 
                                       f32_4 %141 = OpImageSampleImplicitLod %138 %140 
                                                      OpStore %9 %141 
                                       f32_4 %143 = OpLoad %9 
                              Uniform f32_4* %145 = OpAccessChain %71 %144 
                                       f32_4 %146 = OpLoad %145 
                                       f32_4 %147 = OpFMul %143 %146 
                                                      OpStore %142 %147 
                                       f32_4 %150 = OpLoad %149 
                                       f32_3 %151 = OpVectorShuffle %150 %150 0 1 2 
                              Uniform f32_4* %153 = OpAccessChain %71 %152 
                                       f32_4 %154 = OpLoad %153 
                                       f32_3 %155 = OpVectorShuffle %154 %154 0 1 2 
                                       f32_3 %156 = OpFMul %151 %155 
                                                      OpStore %148 %156 
                                Uniform f32* %157 = OpAccessChain %71 %61 
                                         f32 %158 = OpLoad %157 
                                Uniform f32* %160 = OpAccessChain %71 %159 
                                         f32 %161 = OpLoad %160 
                                       f32_2 %162 = OpCompositeConstruct %158 %161 
                              Uniform f32_4* %163 = OpAccessChain %71 %60 
                                       f32_4 %164 = OpLoad %163 
                                       f32_2 %165 = OpVectorShuffle %164 %164 1 1 
                                       f32_2 %166 = OpFMul %162 %165 
                                       f32_4 %167 = OpLoad vs_TEXCOORD5 
                                       f32_2 %168 = OpVectorShuffle %167 %167 0 1 
                                       f32_2 %169 = OpFAdd %166 %168 
                                       f32_3 %170 = OpLoad %43 
                                       f32_3 %171 = OpVectorShuffle %170 %169 3 4 2 
                                                      OpStore %43 %171 
                         read_only Texture2D %174 = OpLoad %173 
                                     sampler %176 = OpLoad %175 
                  read_only Texture2DSampled %177 = OpSampledImage %174 %176 
                                       f32_3 %178 = OpLoad %43 
                                       f32_2 %179 = OpVectorShuffle %178 %178 0 1 
                                       f32_4 %180 = OpImageSampleImplicitLod %177 %179 
                                                      OpStore %172 %180 
                                       f32_3 %181 = OpLoad %148 
                                       f32_4 %182 = OpLoad %172 
                                       f32_3 %183 = OpVectorShuffle %182 %182 0 1 2 
                                       f32_3 %184 = OpFMul %181 %183 
                                                      OpStore %43 %184 
                                Private f32* %186 = OpAccessChain %172 %26 
                                         f32 %187 = OpLoad %186 
                                Uniform f32* %188 = OpAccessChain %71 %152 %26 
                                         f32 %189 = OpLoad %188 
                                         f32 %190 = OpFMul %187 %189 
                                                      OpStore %185 %190 
                                       f32_3 %191 = OpLoad %43 
                                         f32 %192 = OpLoad %185 
                                       f32_3 %193 = OpCompositeConstruct %192 %192 %192 
                                       f32_3 %194 = OpFMul %191 %193 
                                                      OpStore %148 %194 
                                       f32_4 %196 = OpLoad %142 
                                       f32_3 %197 = OpVectorShuffle %196 %196 0 1 2 
                                       f32_4 %198 = OpLoad %142 
                                       f32_3 %199 = OpVectorShuffle %198 %198 3 3 3 
                                       f32_3 %200 = OpFMul %197 %199 
                                       f32_3 %201 = OpLoad %148 
                                       f32_3 %202 = OpFNegate %201 
                                       f32_3 %203 = OpFAdd %200 %202 
                                       f32_4 %204 = OpLoad %195 
                                       f32_4 %205 = OpVectorShuffle %204 %203 4 5 6 3 
                                                      OpStore %195 %205 
                                Uniform f32* %206 = OpAccessChain %71 %144 %26 
                                         f32 %207 = OpLoad %206 
                                Private f32* %208 = OpAccessChain %9 %26 
                                         f32 %209 = OpLoad %208 
                                         f32 %210 = OpFMul %207 %209 
                                         f32 %211 = OpLoad %185 
                                         f32 %212 = OpFNegate %211 
                                         f32 %213 = OpFAdd %210 %212 
                                Private f32* %214 = OpAccessChain %195 %26 
                                                      OpStore %214 %213 
                                         f32 %215 = OpLoad %85 
                                       f32_4 %216 = OpCompositeConstruct %215 %215 %215 %215 
                                       f32_4 %217 = OpLoad %195 
                                       f32_4 %218 = OpFMul %216 %217 
                                                      OpStore %195 %218 
                                       f32_3 %220 = OpLoad %43 
                                         f32 %221 = OpLoad %185 
                                       f32_3 %222 = OpCompositeConstruct %221 %221 %221 
                                       f32_3 %223 = OpFMul %220 %222 
                                       f32_4 %224 = OpLoad %195 
                                       f32_3 %225 = OpVectorShuffle %224 %224 0 1 2 
                                       f32_3 %226 = OpFAdd %223 %225 
                                       f32_4 %227 = OpLoad %219 
                                       f32_4 %228 = OpVectorShuffle %227 %226 4 5 6 3 
                                                      OpStore %219 %228 
                                Uniform f32* %229 = OpAccessChain %71 %152 %26 
                                         f32 %230 = OpLoad %229 
                                Private f32* %231 = OpAccessChain %172 %26 
                                         f32 %232 = OpLoad %231 
                                         f32 %233 = OpFMul %230 %232 
                                Private f32* %234 = OpAccessChain %195 %26 
                                         f32 %235 = OpLoad %234 
                                         f32 %236 = OpFAdd %233 %235 
                                Private f32* %237 = OpAccessChain %219 %26 
                                                      OpStore %237 %236 
                                Uniform f32* %239 = OpAccessChain %71 %238 
                                         f32 %240 = OpLoad %239 
                                Uniform f32* %241 = OpAccessChain %71 %76 
                                         f32 %242 = OpLoad %241 
                                         f32 %243 = OpFMul %240 %242 
                                                      OpStore %185 %243 
                                         f32 %245 = OpLoad %185 
                                  Input f32* %246 = OpAccessChain vs_TEXCOORD1 %81 
                                         f32 %247 = OpLoad %246 
                                         f32 %248 = OpFMul %245 %247 
                                                      OpStore %244 %248 
                                         f32 %249 = OpLoad %185 
                                  Input f32* %250 = OpAccessChain vs_TEXCOORD1 %81 
                                         f32 %251 = OpLoad %250 
                                         f32 %252 = OpFMul %249 %251 
                                         f32 %253 = OpFAdd %252 %87 
                                                      OpStore %85 %253 
                                         f32 %254 = OpLoad %244 
                                         f32 %255 = OpFMul %254 %91 
                                         f32 %256 = OpLoad %89 
                                         f32 %257 = OpFAdd %255 %256 
                                                      OpStore %89 %257 
                                         f32 %258 = OpLoad %89 
                                         f32 %259 = OpLoad %85 
                                         f32 %260 = OpFDiv %258 %259 
                                                      OpStore %85 %260 
                                         f32 %261 = OpLoad %85 
                                         f32 %262 = OpExtInst %1 43 %261 %56 %87 
                                                      OpStore %85 %262 
                                         f32 %263 = OpLoad %85 
                                         f32 %264 = OpFNegate %263 
                                         f32 %265 = OpFAdd %264 %87 
                                                      OpStore %85 %265 
                                       f32_4 %266 = OpLoad %219 
                                         f32 %267 = OpLoad %85 
                                       f32_4 %268 = OpCompositeConstruct %267 %267 %267 %267 
                                       f32_4 %269 = OpFMul %266 %268 
                                                      OpStore %219 %269 
                                       f32_4 %272 = OpLoad %219 
                                       f32_4 %273 = OpLoad %149 
                                       f32_4 %274 = OpVectorShuffle %273 %273 3 3 3 3 
                                       f32_4 %275 = OpFMul %272 %274 
                                                      OpStore %271 %275 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "vulkan hw_tier02 " {
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 517
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %12 %121 %125 %126 %129 %131 %183 %193 %236 %358 %452 %485 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpDecorate %12 Location 12 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpDecorate %19 ArrayStride 19 
                                                      OpDecorate %20 ArrayStride 20 
                                                      OpDecorate %21 ArrayStride 21 
                                                      OpDecorate %22 ArrayStride 22 
                                                      OpMemberDecorate %23 0 Offset 23 
                                                      OpMemberDecorate %23 1 Offset 23 
                                                      OpMemberDecorate %23 2 Offset 23 
                                                      OpMemberDecorate %23 3 Offset 23 
                                                      OpMemberDecorate %23 4 Offset 23 
                                                      OpMemberDecorate %23 5 Offset 23 
                                                      OpMemberDecorate %23 6 Offset 23 
                                                      OpMemberDecorate %23 7 Offset 23 
                                                      OpMemberDecorate %23 8 Offset 23 
                                                      OpMemberDecorate %23 9 Offset 23 
                                                      OpMemberDecorate %23 10 Offset 23 
                                                      OpMemberDecorate %23 11 Offset 23 
                                                      OpMemberDecorate %23 12 Offset 23 
                                                      OpMemberDecorate %23 13 Offset 23 
                                                      OpMemberDecorate %23 14 Offset 23 
                                                      OpMemberDecorate %23 15 Offset 23 
                                                      OpMemberDecorate %23 16 Offset 23 
                                                      OpMemberDecorate %23 17 Offset 23 
                                                      OpMemberDecorate %23 18 Offset 23 
                                                      OpMemberDecorate %23 19 Offset 23 
                                                      OpMemberDecorate %23 20 Offset 23 
                                                      OpMemberDecorate %23 21 Offset 23 
                                                      OpMemberDecorate %23 22 Offset 23 
                                                      OpMemberDecorate %23 23 Offset 23 
                                                      OpMemberDecorate %23 24 Offset 23 
                                                      OpDecorate %23 Block 
                                                      OpDecorate %25 DescriptorSet 25 
                                                      OpDecorate %25 Binding 25 
                                                      OpMemberDecorate %119 0 BuiltIn 119 
                                                      OpMemberDecorate %119 1 BuiltIn 119 
                                                      OpMemberDecorate %119 2 BuiltIn 119 
                                                      OpDecorate %119 Block 
                                                      OpDecorate %125 RelaxedPrecision 
                                                      OpDecorate %125 Location 125 
                                                      OpDecorate %126 RelaxedPrecision 
                                                      OpDecorate %126 Location 126 
                                                      OpDecorate %127 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD0 Location 129 
                                                      OpDecorate %131 Location 131 
                                                      OpDecorate vs_TEXCOORD2 Location 183 
                                                      OpDecorate %193 Location 193 
                                                      OpDecorate %236 Location 236 
                                                      OpDecorate vs_TEXCOORD1 Location 358 
                                                      OpDecorate vs_TEXCOORD3 Location 452 
                                                      OpDecorate vs_TEXCOORD5 Location 485 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 3 
                                               %8 = OpTypePointer Private %7 
                                Private f32_3* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 4 
                                              %11 = OpTypePointer Input %10 
                                 Input f32_4* %12 = OpVariable Input 
                                              %13 = OpTypeVector %6 2 
                                              %16 = OpTypeInt 32 0 
                                          u32 %17 = OpConstant 4 
                                              %18 = OpTypeArray %10 %17 
                                              %19 = OpTypeArray %10 %17 
                                              %20 = OpTypeArray %10 %17 
                                              %21 = OpTypeArray %10 %17 
                                              %22 = OpTypeArray %10 %17 
                                              %23 = OpTypeStruct %7 %10 %18 %19 %20 %21 %6 %6 %6 %22 %6 %6 %6 %6 %6 %10 %6 %6 %6 %6 %6 %6 %6 %10 %10 
                                              %24 = OpTypePointer Uniform %23 
Uniform struct {f32_3; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4[4]; f32; f32; f32; f32_4[4]; f32; f32; f32; f32; f32; f32_4; f32; f32; f32; f32; f32; f32; f32; f32_4; f32_4;}* %25 = OpVariable Uniform 
                                              %26 = OpTypeInt 32 1 
                                          i32 %27 = OpConstant 13 
                                              %28 = OpTypePointer Uniform %6 
                                          i32 %31 = OpConstant 14 
                                              %38 = OpTypePointer Private %10 
                               Private f32_4* %39 = OpVariable Private 
                                          i32 %42 = OpConstant 2 
                                          i32 %43 = OpConstant 1 
                                              %44 = OpTypePointer Uniform %10 
                                          i32 %48 = OpConstant 0 
                               Private f32_4* %63 = OpVariable Private 
                                          i32 %65 = OpConstant 3 
                                              %83 = OpTypePointer Uniform %7 
                               Private f32_4* %89 = OpVariable Private 
                                          i32 %92 = OpConstant 5 
                                         u32 %117 = OpConstant 1 
                                             %118 = OpTypeArray %6 %117 
                                             %119 = OpTypeStruct %10 %6 %118 
                                             %120 = OpTypePointer Output %119 
        Output struct {f32_4; f32; f32[1];}* %121 = OpVariable Output 
                                             %123 = OpTypePointer Output %10 
                               Output f32_4* %125 = OpVariable Output 
                                Input f32_4* %126 = OpVariable Input 
                                             %128 = OpTypePointer Output %13 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                             %130 = OpTypePointer Input %13 
                                Input f32_2* %131 = OpVariable Input 
                                             %133 = OpTypePointer Private %13 
                              Private f32_2* %134 = OpVariable Private 
                                         i32 %138 = OpConstant 4 
                                         i32 %154 = OpConstant 19 
                                         i32 %157 = OpConstant 20 
                                             %166 = OpTypePointer Private %6 
                                Private f32* %167 = OpVariable Private 
                                         i32 %171 = OpConstant 16 
                                         i32 %174 = OpConstant 17 
                                         f32 %178 = OpConstant 3.674022E-40 
                                       f32_2 %179 = OpConstantComposite %178 %178 
                       Output f32_4* vs_TEXCOORD2 = OpVariable Output 
                                         u32 %190 = OpConstant 0 
                                Private f32* %192 = OpVariable Private 
                                Input f32_2* %193 = OpVariable Input 
                                             %194 = OpTypePointer Input %6 
                                         i32 %198 = OpConstant 18 
                                         i32 %202 = OpConstant 22 
                                         f32 %205 = OpConstant 3.674022E-40 
                                         i32 %214 = OpConstant 21 
                                             %235 = OpTypePointer Input %7 
                                Input f32_3* %236 = OpVariable Input 
                                         u32 %254 = OpConstant 2 
                              Private f32_3* %263 = OpVariable Private 
                                             %296 = OpTypeBool 
                                             %297 = OpTypePointer Private %296 
                               Private bool* %298 = OpVariable Private 
                                         u32 %299 = OpConstant 3 
                                         f32 %302 = OpConstant 3.674022E-40 
                                             %305 = OpTypePointer Function %6 
                               Private bool* %315 = OpVariable Private 
                                         i32 %322 = OpConstant 10 
                                         i32 %326 = OpConstant 11 
                                         i32 %341 = OpConstant 6 
                                         i32 %348 = OpConstant 12 
                                         f32 %355 = OpConstant 3.674022E-40 
                       Output f32_4* vs_TEXCOORD1 = OpVariable Output 
                                         i32 %366 = OpConstant 8 
                                         i32 %374 = OpConstant 7 
                                             %394 = OpTypePointer Output %6 
                                         i32 %407 = OpConstant 15 
                                         f32 %410 = OpConstant 3.674022E-40 
                                       f32_4 %411 = OpConstantComposite %410 %410 %410 %410 
                                         f32 %414 = OpConstant 3.674022E-40 
                                       f32_4 %415 = OpConstantComposite %414 %414 %414 %414 
                                         f32 %419 = OpConstant 3.674022E-40 
                                       f32_2 %420 = OpConstantComposite %419 %419 
                                         i32 %438 = OpConstant 9 
                                             %451 = OpTypePointer Output %7 
                       Output f32_3* vs_TEXCOORD3 = OpVariable Output 
                                         f32 %463 = OpConstant 3.674022E-40 
                                         f32 %473 = OpConstant 3.674022E-40 
                                         f32 %480 = OpConstant 3.674022E-40 
                                       f32_2 %481 = OpConstantComposite %480 %480 
                       Output f32_4* vs_TEXCOORD5 = OpVariable Output 
                                         i32 %488 = OpConstant 23 
                                         i32 %501 = OpConstant 24 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                               Function f32* %306 = OpVariable Function 
                                        f32_4 %14 = OpLoad %12 
                                        f32_2 %15 = OpVectorShuffle %14 %14 0 1 
                                 Uniform f32* %29 = OpAccessChain %25 %27 
                                          f32 %30 = OpLoad %29 
                                 Uniform f32* %32 = OpAccessChain %25 %31 
                                          f32 %33 = OpLoad %32 
                                        f32_2 %34 = OpCompositeConstruct %30 %33 
                                        f32_2 %35 = OpFAdd %15 %34 
                                        f32_3 %36 = OpLoad %9 
                                        f32_3 %37 = OpVectorShuffle %36 %35 3 4 2 
                                                      OpStore %9 %37 
                                        f32_3 %40 = OpLoad %9 
                                        f32_4 %41 = OpVectorShuffle %40 %40 1 1 1 1 
                               Uniform f32_4* %45 = OpAccessChain %25 %42 %43 
                                        f32_4 %46 = OpLoad %45 
                                        f32_4 %47 = OpFMul %41 %46 
                                                      OpStore %39 %47 
                               Uniform f32_4* %49 = OpAccessChain %25 %42 %48 
                                        f32_4 %50 = OpLoad %49 
                                        f32_3 %51 = OpLoad %9 
                                        f32_4 %52 = OpVectorShuffle %51 %51 0 0 0 0 
                                        f32_4 %53 = OpFMul %50 %52 
                                        f32_4 %54 = OpLoad %39 
                                        f32_4 %55 = OpFAdd %53 %54 
                                                      OpStore %39 %55 
                               Uniform f32_4* %56 = OpAccessChain %25 %42 %42 
                                        f32_4 %57 = OpLoad %56 
                                        f32_4 %58 = OpLoad %12 
                                        f32_4 %59 = OpVectorShuffle %58 %58 2 2 2 2 
                                        f32_4 %60 = OpFMul %57 %59 
                                        f32_4 %61 = OpLoad %39 
                                        f32_4 %62 = OpFAdd %60 %61 
                                                      OpStore %39 %62 
                                        f32_4 %64 = OpLoad %39 
                               Uniform f32_4* %66 = OpAccessChain %25 %42 %65 
                                        f32_4 %67 = OpLoad %66 
                                        f32_4 %68 = OpFAdd %64 %67 
                                                      OpStore %63 %68 
                               Uniform f32_4* %69 = OpAccessChain %25 %42 %65 
                                        f32_4 %70 = OpLoad %69 
                                        f32_3 %71 = OpVectorShuffle %70 %70 0 1 2 
                                        f32_4 %72 = OpLoad %12 
                                        f32_3 %73 = OpVectorShuffle %72 %72 3 3 3 
                                        f32_3 %74 = OpFMul %71 %73 
                                        f32_4 %75 = OpLoad %39 
                                        f32_3 %76 = OpVectorShuffle %75 %75 0 1 2 
                                        f32_3 %77 = OpFAdd %74 %76 
                                        f32_4 %78 = OpLoad %39 
                                        f32_4 %79 = OpVectorShuffle %78 %77 4 5 6 3 
                                                      OpStore %39 %79 
                                        f32_4 %80 = OpLoad %39 
                                        f32_3 %81 = OpVectorShuffle %80 %80 0 1 2 
                                        f32_3 %82 = OpFNegate %81 
                               Uniform f32_3* %84 = OpAccessChain %25 %48 
                                        f32_3 %85 = OpLoad %84 
                                        f32_3 %86 = OpFAdd %82 %85 
                                        f32_4 %87 = OpLoad %39 
                                        f32_4 %88 = OpVectorShuffle %87 %86 4 5 6 3 
                                                      OpStore %39 %88 
                                        f32_4 %90 = OpLoad %63 
                                        f32_4 %91 = OpVectorShuffle %90 %90 1 1 1 1 
                               Uniform f32_4* %93 = OpAccessChain %25 %92 %43 
                                        f32_4 %94 = OpLoad %93 
                                        f32_4 %95 = OpFMul %91 %94 
                                                      OpStore %89 %95 
                               Uniform f32_4* %96 = OpAccessChain %25 %92 %48 
                                        f32_4 %97 = OpLoad %96 
                                        f32_4 %98 = OpLoad %63 
                                        f32_4 %99 = OpVectorShuffle %98 %98 0 0 0 0 
                                       f32_4 %100 = OpFMul %97 %99 
                                       f32_4 %101 = OpLoad %89 
                                       f32_4 %102 = OpFAdd %100 %101 
                                                      OpStore %89 %102 
                              Uniform f32_4* %103 = OpAccessChain %25 %92 %42 
                                       f32_4 %104 = OpLoad %103 
                                       f32_4 %105 = OpLoad %63 
                                       f32_4 %106 = OpVectorShuffle %105 %105 2 2 2 2 
                                       f32_4 %107 = OpFMul %104 %106 
                                       f32_4 %108 = OpLoad %89 
                                       f32_4 %109 = OpFAdd %107 %108 
                                                      OpStore %89 %109 
                              Uniform f32_4* %110 = OpAccessChain %25 %92 %65 
                                       f32_4 %111 = OpLoad %110 
                                       f32_4 %112 = OpLoad %63 
                                       f32_4 %113 = OpVectorShuffle %112 %112 3 3 3 3 
                                       f32_4 %114 = OpFMul %111 %113 
                                       f32_4 %115 = OpLoad %89 
                                       f32_4 %116 = OpFAdd %114 %115 
                                                      OpStore %63 %116 
                                       f32_4 %122 = OpLoad %63 
                               Output f32_4* %124 = OpAccessChain %121 %48 
                                                      OpStore %124 %122 
                                       f32_4 %127 = OpLoad %126 
                                                      OpStore %125 %127 
                                       f32_2 %132 = OpLoad %131 
                                                      OpStore vs_TEXCOORD0 %132 
                              Uniform f32_4* %135 = OpAccessChain %25 %43 
                                       f32_4 %136 = OpLoad %135 
                                       f32_2 %137 = OpVectorShuffle %136 %136 1 1 
                              Uniform f32_4* %139 = OpAccessChain %25 %138 %43 
                                       f32_4 %140 = OpLoad %139 
                                       f32_2 %141 = OpVectorShuffle %140 %140 0 1 
                                       f32_2 %142 = OpFMul %137 %141 
                                                      OpStore %134 %142 
                              Uniform f32_4* %143 = OpAccessChain %25 %138 %48 
                                       f32_4 %144 = OpLoad %143 
                                       f32_2 %145 = OpVectorShuffle %144 %144 0 1 
                              Uniform f32_4* %146 = OpAccessChain %25 %43 
                                       f32_4 %147 = OpLoad %146 
                                       f32_2 %148 = OpVectorShuffle %147 %147 0 0 
                                       f32_2 %149 = OpFMul %145 %148 
                                       f32_2 %150 = OpLoad %134 
                                       f32_2 %151 = OpFAdd %149 %150 
                                                      OpStore %134 %151 
                                       f32_2 %152 = OpLoad %134 
                                       f32_2 %153 = OpExtInst %1 4 %152 
                                Uniform f32* %155 = OpAccessChain %25 %154 
                                         f32 %156 = OpLoad %155 
                                Uniform f32* %158 = OpAccessChain %25 %157 
                                         f32 %159 = OpLoad %158 
                                       f32_2 %160 = OpCompositeConstruct %156 %159 
                                       f32_2 %161 = OpFMul %153 %160 
                                                      OpStore %134 %161 
                                       f32_4 %162 = OpLoad %63 
                                       f32_2 %163 = OpVectorShuffle %162 %162 3 3 
                                       f32_2 %164 = OpLoad %134 
                                       f32_2 %165 = OpFDiv %163 %164 
                                                      OpStore %134 %165 
                                       f32_2 %168 = OpLoad %134 
                                       f32_2 %169 = OpLoad %134 
                                         f32 %170 = OpDot %168 %169 
                                                      OpStore %167 %170 
                                Uniform f32* %172 = OpAccessChain %25 %171 
                                         f32 %173 = OpLoad %172 
                                Uniform f32* %175 = OpAccessChain %25 %174 
                                         f32 %176 = OpLoad %175 
                                       f32_2 %177 = OpCompositeConstruct %173 %176 
                                       f32_2 %180 = OpFMul %177 %179 
                                       f32_2 %181 = OpLoad %134 
                                       f32_2 %182 = OpFAdd %180 %181 
                                                      OpStore %134 %182 
                                       f32_2 %184 = OpLoad %134 
                                       f32_2 %185 = OpFDiv %179 %184 
                                       f32_4 %186 = OpLoad vs_TEXCOORD2 
                                       f32_4 %187 = OpVectorShuffle %186 %185 0 1 4 5 
                                                      OpStore vs_TEXCOORD2 %187 
                                         f32 %188 = OpLoad %167 
                                         f32 %189 = OpExtInst %1 32 %188 
                                Private f32* %191 = OpAccessChain %134 %190 
                                                      OpStore %191 %189 
                                  Input f32* %195 = OpAccessChain %193 %117 
                                         f32 %196 = OpLoad %195 
                                         f32 %197 = OpExtInst %1 4 %196 
                                Uniform f32* %199 = OpAccessChain %25 %198 
                                         f32 %200 = OpLoad %199 
                                         f32 %201 = OpFMul %197 %200 
                                                      OpStore %192 %201 
                                Uniform f32* %203 = OpAccessChain %25 %202 
                                         f32 %204 = OpLoad %203 
                                         f32 %206 = OpFAdd %204 %205 
                                                      OpStore %167 %206 
                                         f32 %207 = OpLoad %192 
                                         f32 %208 = OpLoad %167 
                                         f32 %209 = OpFMul %207 %208 
                                                      OpStore %192 %209 
                                         f32 %210 = OpLoad %192 
                                Private f32* %211 = OpAccessChain %134 %190 
                                         f32 %212 = OpLoad %211 
                                         f32 %213 = OpFMul %210 %212 
                                                      OpStore %167 %213 
                                Uniform f32* %215 = OpAccessChain %25 %214 
                                         f32 %216 = OpLoad %215 
                                         f32 %217 = OpFNegate %216 
                                         f32 %218 = OpFAdd %217 %205 
                                Private f32* %219 = OpAccessChain %63 %190 
                                                      OpStore %219 %218 
                                         f32 %220 = OpLoad %167 
                                         f32 %221 = OpExtInst %1 4 %220 
                                Private f32* %222 = OpAccessChain %63 %190 
                                         f32 %223 = OpLoad %222 
                                         f32 %224 = OpFMul %221 %223 
                                Private f32* %225 = OpAccessChain %63 %190 
                                                      OpStore %225 %224 
                                Private f32* %226 = OpAccessChain %134 %190 
                                         f32 %227 = OpLoad %226 
                                         f32 %228 = OpLoad %192 
                                         f32 %229 = OpFMul %227 %228 
                                Private f32* %230 = OpAccessChain %63 %190 
                                         f32 %231 = OpLoad %230 
                                         f32 %232 = OpFNegate %231 
                                         f32 %233 = OpFAdd %229 %232 
                                Private f32* %234 = OpAccessChain %134 %190 
                                                      OpStore %234 %233 
                                       f32_3 %237 = OpLoad %236 
                              Uniform f32_4* %238 = OpAccessChain %25 %65 %48 
                                       f32_4 %239 = OpLoad %238 
                                       f32_3 %240 = OpVectorShuffle %239 %239 0 1 2 
                                         f32 %241 = OpDot %237 %240 
                                Private f32* %242 = OpAccessChain %89 %190 
                                                      OpStore %242 %241 
                                       f32_3 %243 = OpLoad %236 
                              Uniform f32_4* %244 = OpAccessChain %25 %65 %43 
                                       f32_4 %245 = OpLoad %244 
                                       f32_3 %246 = OpVectorShuffle %245 %245 0 1 2 
                                         f32 %247 = OpDot %243 %246 
                                Private f32* %248 = OpAccessChain %89 %117 
                                                      OpStore %248 %247 
                                       f32_3 %249 = OpLoad %236 
                              Uniform f32_4* %250 = OpAccessChain %25 %65 %42 
                                       f32_4 %251 = OpLoad %250 
                                       f32_3 %252 = OpVectorShuffle %251 %251 0 1 2 
                                         f32 %253 = OpDot %249 %252 
                                Private f32* %255 = OpAccessChain %89 %254 
                                                      OpStore %255 %253 
                                       f32_4 %256 = OpLoad %89 
                                       f32_3 %257 = OpVectorShuffle %256 %256 0 1 2 
                                       f32_4 %258 = OpLoad %89 
                                       f32_3 %259 = OpVectorShuffle %258 %258 0 1 2 
                                         f32 %260 = OpDot %257 %259 
                                                      OpStore %192 %260 
                                         f32 %261 = OpLoad %192 
                                         f32 %262 = OpExtInst %1 32 %261 
                                                      OpStore %192 %262 
                                         f32 %264 = OpLoad %192 
                                       f32_3 %265 = OpCompositeConstruct %264 %264 %264 
                                       f32_4 %266 = OpLoad %89 
                                       f32_3 %267 = OpVectorShuffle %266 %266 0 1 2 
                                       f32_3 %268 = OpFMul %265 %267 
                                                      OpStore %263 %268 
                                       f32_4 %269 = OpLoad %39 
                                       f32_3 %270 = OpVectorShuffle %269 %269 0 1 2 
                                       f32_4 %271 = OpLoad %39 
                                       f32_3 %272 = OpVectorShuffle %271 %271 0 1 2 
                                         f32 %273 = OpDot %270 %272 
                                                      OpStore %192 %273 
                                         f32 %274 = OpLoad %192 
                                         f32 %275 = OpExtInst %1 32 %274 
                                                      OpStore %192 %275 
                                         f32 %276 = OpLoad %192 
                                       f32_3 %277 = OpCompositeConstruct %276 %276 %276 
                                       f32_4 %278 = OpLoad %39 
                                       f32_3 %279 = OpVectorShuffle %278 %278 0 1 2 
                                       f32_3 %280 = OpFMul %277 %279 
                                       f32_4 %281 = OpLoad %89 
                                       f32_4 %282 = OpVectorShuffle %281 %280 4 5 6 3 
                                                      OpStore %89 %282 
                                       f32_3 %283 = OpLoad %263 
                                       f32_4 %284 = OpLoad %89 
                                       f32_3 %285 = OpVectorShuffle %284 %284 0 1 2 
                                         f32 %286 = OpDot %283 %285 
                                                      OpStore %192 %286 
                                         f32 %287 = OpLoad %192 
                                         f32 %288 = OpExtInst %1 4 %287 
                                Private f32* %289 = OpAccessChain %134 %190 
                                         f32 %290 = OpLoad %289 
                                         f32 %291 = OpFMul %288 %290 
                                Private f32* %292 = OpAccessChain %63 %190 
                                         f32 %293 = OpLoad %292 
                                         f32 %294 = OpFAdd %291 %293 
                                Private f32* %295 = OpAccessChain %134 %190 
                                                      OpStore %295 %294 
                                Uniform f32* %300 = OpAccessChain %25 %138 %65 %299 
                                         f32 %301 = OpLoad %300 
                                        bool %303 = OpFOrdEqual %301 %302 
                                                      OpStore %298 %303 
                                        bool %304 = OpLoad %298 
                                                      OpSelectionMerge %308 None 
                                                      OpBranchConditional %304 %307 %311 
                                             %307 = OpLabel 
                                Private f32* %309 = OpAccessChain %134 %190 
                                         f32 %310 = OpLoad %309 
                                                      OpStore %306 %310 
                                                      OpBranch %308 
                                             %311 = OpLabel 
                                         f32 %312 = OpLoad %167 
                                                      OpStore %306 %312 
                                                      OpBranch %308 
                                             %308 = OpLabel 
                                         f32 %313 = OpLoad %306 
                                Private f32* %314 = OpAccessChain %263 %190 
                                                      OpStore %314 %313 
                                  Input f32* %316 = OpAccessChain %193 %117 
                                         f32 %317 = OpLoad %316 
                                        bool %318 = OpFOrdGreaterThanEqual %302 %317 
                                                      OpStore %315 %318 
                                        bool %319 = OpLoad %315 
                                         f32 %320 = OpSelect %319 %205 %302 
                                Private f32* %321 = OpAccessChain %134 %190 
                                                      OpStore %321 %320 
                                Uniform f32* %323 = OpAccessChain %25 %322 
                                         f32 %324 = OpLoad %323 
                                         f32 %325 = OpFNegate %324 
                                Uniform f32* %327 = OpAccessChain %25 %326 
                                         f32 %328 = OpLoad %327 
                                         f32 %329 = OpFAdd %325 %328 
                                                      OpStore %192 %329 
                                Private f32* %330 = OpAccessChain %134 %190 
                                         f32 %331 = OpLoad %330 
                                         f32 %332 = OpLoad %192 
                                         f32 %333 = OpFMul %331 %332 
                                Uniform f32* %334 = OpAccessChain %25 %322 
                                         f32 %335 = OpLoad %334 
                                         f32 %336 = OpFAdd %333 %335 
                                Private f32* %337 = OpAccessChain %134 %190 
                                                      OpStore %337 %336 
                                Private f32* %338 = OpAccessChain %134 %190 
                                         f32 %339 = OpLoad %338 
                                         f32 %340 = OpFMul %339 %178 
                                Uniform f32* %342 = OpAccessChain %25 %341 
                                         f32 %343 = OpLoad %342 
                                         f32 %344 = OpFAdd %340 %343 
                                Private f32* %345 = OpAccessChain %134 %190 
                                                      OpStore %345 %344 
                                Private f32* %346 = OpAccessChain %134 %190 
                                         f32 %347 = OpLoad %346 
                                Uniform f32* %349 = OpAccessChain %25 %348 
                                         f32 %350 = OpLoad %349 
                                         f32 %351 = OpFMul %347 %350 
                                Private f32* %352 = OpAccessChain %134 %190 
                                                      OpStore %352 %351 
                                Private f32* %353 = OpAccessChain %134 %190 
                                         f32 %354 = OpLoad %353 
                                         f32 %356 = OpFMul %354 %355 
                                Private f32* %357 = OpAccessChain %263 %254 
                                                      OpStore %357 %356 
                                       f32_3 %359 = OpLoad %263 
                                       f32_2 %360 = OpVectorShuffle %359 %359 0 2 
                                       f32_4 %361 = OpLoad vs_TEXCOORD1 
                                       f32_4 %362 = OpVectorShuffle %361 %360 0 4 2 5 
                                                      OpStore vs_TEXCOORD1 %362 
                                Private f32* %363 = OpAccessChain %263 %190 
                                         f32 %364 = OpLoad %363 
                                         f32 %365 = OpFDiv %355 %364 
                                                      OpStore %192 %365 
                                Uniform f32* %367 = OpAccessChain %25 %366 
                                         f32 %368 = OpLoad %367 
                                         f32 %369 = OpFNegate %368 
                                Uniform f32* %370 = OpAccessChain %25 %348 
                                         f32 %371 = OpLoad %370 
                                         f32 %372 = OpFMul %369 %371 
                                         f32 %373 = OpFAdd %372 %205 
                                                      OpStore %167 %373 
                                Uniform f32* %375 = OpAccessChain %25 %374 
                                         f32 %376 = OpLoad %375 
                                         f32 %377 = OpFNegate %376 
                                Uniform f32* %378 = OpAccessChain %25 %348 
                                         f32 %379 = OpLoad %378 
                                         f32 %380 = OpFMul %377 %379 
                                         f32 %381 = OpLoad %167 
                                         f32 %382 = OpFAdd %380 %381 
                                                      OpStore %167 %382 
                                         f32 %383 = OpLoad %167 
                                         f32 %384 = OpFMul %383 %355 
                                         f32 %385 = OpLoad %192 
                                         f32 %386 = OpFNegate %385 
                                         f32 %387 = OpFAdd %384 %386 
                                                      OpStore %167 %387 
                                Private f32* %388 = OpAccessChain %134 %190 
                                         f32 %389 = OpLoad %388 
                                         f32 %390 = OpFNegate %389 
                                         f32 %391 = OpFMul %390 %355 
                                         f32 %392 = OpLoad %167 
                                         f32 %393 = OpFAdd %391 %392 
                                 Output f32* %395 = OpAccessChain vs_TEXCOORD1 %190 
                                                      OpStore %395 %393 
                                Private f32* %396 = OpAccessChain %134 %190 
                                         f32 %397 = OpLoad %396 
                                         f32 %398 = OpFNegate %397 
                                         f32 %399 = OpFMul %398 %355 
                                         f32 %400 = OpFAdd %399 %355 
                                Private f32* %401 = OpAccessChain %134 %190 
                                                      OpStore %401 %400 
                                         f32 %402 = OpLoad %192 
                                Private f32* %403 = OpAccessChain %134 %190 
                                         f32 %404 = OpLoad %403 
                                         f32 %405 = OpFAdd %402 %404 
                                 Output f32* %406 = OpAccessChain vs_TEXCOORD1 %254 
                                                      OpStore %406 %405 
                              Uniform f32_4* %408 = OpAccessChain %25 %407 
                                       f32_4 %409 = OpLoad %408 
                                       f32_4 %412 = OpExtInst %1 40 %409 %411 
                                                      OpStore %63 %412 
                                       f32_4 %413 = OpLoad %63 
                                       f32_4 %416 = OpExtInst %1 37 %413 %415 
                                                      OpStore %63 %416 
                                       f32_3 %417 = OpLoad %9 
                                       f32_2 %418 = OpVectorShuffle %417 %417 0 1 
                                       f32_2 %421 = OpFMul %418 %420 
                                       f32_4 %422 = OpLoad %63 
                                       f32_2 %423 = OpVectorShuffle %422 %422 0 1 
                                       f32_2 %424 = OpFNegate %423 
                                       f32_2 %425 = OpFAdd %421 %424 
                                       f32_3 %426 = OpLoad %9 
                                       f32_3 %427 = OpVectorShuffle %426 %425 3 4 2 
                                                      OpStore %9 %427 
                                       f32_4 %428 = OpLoad %63 
                                       f32_2 %429 = OpVectorShuffle %428 %428 2 3 
                                       f32_2 %430 = OpFNegate %429 
                                       f32_3 %431 = OpLoad %9 
                                       f32_2 %432 = OpVectorShuffle %431 %431 0 1 
                                       f32_2 %433 = OpFAdd %430 %432 
                                       f32_4 %434 = OpLoad vs_TEXCOORD2 
                                       f32_4 %435 = OpVectorShuffle %434 %433 4 5 2 3 
                                                      OpStore vs_TEXCOORD2 %435 
                                       f32_4 %436 = OpLoad %39 
                                       f32_3 %437 = OpVectorShuffle %436 %436 1 1 1 
                              Uniform f32_4* %439 = OpAccessChain %25 %438 %43 
                                       f32_4 %440 = OpLoad %439 
                                       f32_3 %441 = OpVectorShuffle %440 %440 0 1 2 
                                       f32_3 %442 = OpFMul %437 %441 
                                                      OpStore %9 %442 
                              Uniform f32_4* %443 = OpAccessChain %25 %438 %48 
                                       f32_4 %444 = OpLoad %443 
                                       f32_3 %445 = OpVectorShuffle %444 %444 0 1 2 
                                       f32_4 %446 = OpLoad %39 
                                       f32_3 %447 = OpVectorShuffle %446 %446 0 0 0 
                                       f32_3 %448 = OpFMul %445 %447 
                                       f32_3 %449 = OpLoad %9 
                                       f32_3 %450 = OpFAdd %448 %449 
                                                      OpStore %9 %450 
                              Uniform f32_4* %453 = OpAccessChain %25 %438 %42 
                                       f32_4 %454 = OpLoad %453 
                                       f32_3 %455 = OpVectorShuffle %454 %454 0 1 2 
                                       f32_4 %456 = OpLoad %39 
                                       f32_3 %457 = OpVectorShuffle %456 %456 2 2 2 
                                       f32_3 %458 = OpFMul %455 %457 
                                       f32_3 %459 = OpLoad %9 
                                       f32_3 %460 = OpFAdd %458 %459 
                                                      OpStore vs_TEXCOORD3 %460 
                                  Input f32* %461 = OpAccessChain %193 %190 
                                         f32 %462 = OpLoad %461 
                                         f32 %464 = OpFMul %462 %463 
                                Private f32* %465 = OpAccessChain %9 %190 
                                                      OpStore %465 %464 
                                Private f32* %466 = OpAccessChain %9 %190 
                                         f32 %467 = OpLoad %466 
                                         f32 %468 = OpExtInst %1 8 %467 
                                Private f32* %469 = OpAccessChain %134 %190 
                                                      OpStore %469 %468 
                                Private f32* %470 = OpAccessChain %134 %190 
                                         f32 %471 = OpLoad %470 
                                         f32 %472 = OpFNegate %471 
                                         f32 %474 = OpFMul %472 %473 
                                  Input f32* %475 = OpAccessChain %193 %190 
                                         f32 %476 = OpLoad %475 
                                         f32 %477 = OpFAdd %474 %476 
                                Private f32* %478 = OpAccessChain %134 %117 
                                                      OpStore %478 %477 
                                       f32_2 %479 = OpLoad %134 
                                       f32_2 %482 = OpFMul %479 %481 
                                       f32_3 %483 = OpLoad %9 
                                       f32_3 %484 = OpVectorShuffle %483 %482 3 4 2 
                                                      OpStore %9 %484 
                                       f32_3 %486 = OpLoad %9 
                                       f32_2 %487 = OpVectorShuffle %486 %486 0 1 
                              Uniform f32_4* %489 = OpAccessChain %25 %488 
                                       f32_4 %490 = OpLoad %489 
                                       f32_2 %491 = OpVectorShuffle %490 %490 0 1 
                                       f32_2 %492 = OpFMul %487 %491 
                              Uniform f32_4* %493 = OpAccessChain %25 %488 
                                       f32_4 %494 = OpLoad %493 
                                       f32_2 %495 = OpVectorShuffle %494 %494 2 3 
                                       f32_2 %496 = OpFAdd %492 %495 
                                       f32_4 %497 = OpLoad vs_TEXCOORD5 
                                       f32_4 %498 = OpVectorShuffle %497 %496 4 5 2 3 
                                                      OpStore vs_TEXCOORD5 %498 
                                       f32_3 %499 = OpLoad %9 
                                       f32_2 %500 = OpVectorShuffle %499 %499 0 1 
                              Uniform f32_4* %502 = OpAccessChain %25 %501 
                                       f32_4 %503 = OpLoad %502 
                                       f32_2 %504 = OpVectorShuffle %503 %503 0 1 
                                       f32_2 %505 = OpFMul %500 %504 
                              Uniform f32_4* %506 = OpAccessChain %25 %501 
                                       f32_4 %507 = OpLoad %506 
                                       f32_2 %508 = OpVectorShuffle %507 %507 2 3 
                                       f32_2 %509 = OpFAdd %505 %508 
                                       f32_4 %510 = OpLoad vs_TEXCOORD5 
                                       f32_4 %511 = OpVectorShuffle %510 %509 0 1 4 5 
                                                      OpStore vs_TEXCOORD5 %511 
                                 Output f32* %512 = OpAccessChain %121 %48 %117 
                                         f32 %513 = OpLoad %512 
                                         f32 %514 = OpFNegate %513 
                                 Output f32* %515 = OpAccessChain %121 %48 %117 
                                                      OpStore %515 %514 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 277
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %22 %35 %128 %149 %271 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpDecorate %9 RelaxedPrecision 
                                                      OpDecorate %12 RelaxedPrecision 
                                                      OpDecorate %12 DescriptorSet 12 
                                                      OpDecorate %12 Binding 12 
                                                      OpDecorate %13 RelaxedPrecision 
                                                      OpDecorate %16 RelaxedPrecision 
                                                      OpDecorate %16 DescriptorSet 16 
                                                      OpDecorate %16 Binding 16 
                                                      OpDecorate %17 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD0 Location 22 
                                                      OpDecorate %27 RelaxedPrecision 
                                                      OpDecorate %33 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD1 Location 35 
                                                      OpDecorate %45 RelaxedPrecision 
                                                      OpDecorate %46 RelaxedPrecision 
                                                      OpMemberDecorate %69 0 Offset 69 
                                                      OpMemberDecorate %69 1 Offset 69 
                                                      OpMemberDecorate %69 2 Offset 69 
                                                      OpMemberDecorate %69 3 RelaxedPrecision 
                                                      OpMemberDecorate %69 3 Offset 69 
                                                      OpMemberDecorate %69 4 Offset 69 
                                                      OpMemberDecorate %69 5 Offset 69 
                                                      OpMemberDecorate %69 6 Offset 69 
                                                      OpMemberDecorate %69 7 RelaxedPrecision 
                                                      OpMemberDecorate %69 7 Offset 69 
                                                      OpMemberDecorate %69 8 Offset 69 
                                                      OpMemberDecorate %69 9 Offset 69 
                                                      OpDecorate %69 Block 
                                                      OpDecorate %71 DescriptorSet 71 
                                                      OpDecorate %71 Binding 71 
                                                      OpDecorate %85 RelaxedPrecision 
                                                      OpDecorate %89 RelaxedPrecision 
                                                      OpDecorate %93 RelaxedPrecision 
                                                      OpDecorate %94 RelaxedPrecision 
                                                      OpDecorate %95 RelaxedPrecision 
                                                      OpDecorate %101 RelaxedPrecision 
                                                      OpDecorate %103 RelaxedPrecision 
                                                      OpDecorate %104 RelaxedPrecision 
                                                      OpDecorate %110 RelaxedPrecision 
                                                      OpDecorate %111 RelaxedPrecision 
                                                      OpDecorate %113 RelaxedPrecision 
                                                      OpDecorate %114 RelaxedPrecision 
                                                      OpDecorate %115 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD5 Location 128 
                                                      OpDecorate %134 RelaxedPrecision 
                                                      OpDecorate %134 DescriptorSet 134 
                                                      OpDecorate %134 Binding 134 
                                                      OpDecorate %135 RelaxedPrecision 
                                                      OpDecorate %136 RelaxedPrecision 
                                                      OpDecorate %136 DescriptorSet 136 
                                                      OpDecorate %136 Binding 136 
                                                      OpDecorate %137 RelaxedPrecision 
                                                      OpDecorate %143 RelaxedPrecision 
                                                      OpDecorate %146 RelaxedPrecision 
                                                      OpDecorate %147 RelaxedPrecision 
                                                      OpDecorate %148 RelaxedPrecision 
                                                      OpDecorate %149 RelaxedPrecision 
                                                      OpDecorate %149 Location 149 
                                                      OpDecorate %150 RelaxedPrecision 
                                                      OpDecorate %151 RelaxedPrecision 
                                                      OpDecorate %154 RelaxedPrecision 
                                                      OpDecorate %155 RelaxedPrecision 
                                                      OpDecorate %156 RelaxedPrecision 
                                                      OpDecorate %172 RelaxedPrecision 
                                                      OpDecorate %173 RelaxedPrecision 
                                                      OpDecorate %173 DescriptorSet 173 
                                                      OpDecorate %173 Binding 173 
                                                      OpDecorate %174 RelaxedPrecision 
                                                      OpDecorate %175 RelaxedPrecision 
                                                      OpDecorate %175 DescriptorSet 175 
                                                      OpDecorate %175 Binding 175 
                                                      OpDecorate %176 RelaxedPrecision 
                                                      OpDecorate %181 RelaxedPrecision 
                                                      OpDecorate %182 RelaxedPrecision 
                                                      OpDecorate %183 RelaxedPrecision 
                                                      OpDecorate %184 RelaxedPrecision 
                                                      OpDecorate %187 RelaxedPrecision 
                                                      OpDecorate %189 RelaxedPrecision 
                                                      OpDecorate %190 RelaxedPrecision 
                                                      OpDecorate %195 RelaxedPrecision 
                                                      OpDecorate %201 RelaxedPrecision 
                                                      OpDecorate %202 RelaxedPrecision 
                                                      OpDecorate %207 RelaxedPrecision 
                                                      OpDecorate %209 RelaxedPrecision 
                                                      OpDecorate %210 RelaxedPrecision 
                                                      OpDecorate %215 RelaxedPrecision 
                                                      OpDecorate %216 RelaxedPrecision 
                                                      OpDecorate %217 RelaxedPrecision 
                                                      OpDecorate %218 RelaxedPrecision 
                                                      OpDecorate %219 RelaxedPrecision 
                                                      OpDecorate %224 RelaxedPrecision 
                                                      OpDecorate %225 RelaxedPrecision 
                                                      OpDecorate %230 RelaxedPrecision 
                                                      OpDecorate %232 RelaxedPrecision 
                                                      OpDecorate %233 RelaxedPrecision 
                                                      OpDecorate %235 RelaxedPrecision 
                                                      OpDecorate %236 RelaxedPrecision 
                                                      OpDecorate %256 RelaxedPrecision 
                                                      OpDecorate %258 RelaxedPrecision 
                                                      OpDecorate %259 RelaxedPrecision 
                                                      OpDecorate %260 RelaxedPrecision 
                                                      OpDecorate %261 RelaxedPrecision 
                                                      OpDecorate %262 RelaxedPrecision 
                                                      OpDecorate %263 RelaxedPrecision 
                                                      OpDecorate %264 RelaxedPrecision 
                                                      OpDecorate %265 RelaxedPrecision 
                                                      OpDecorate %266 RelaxedPrecision 
                                                      OpDecorate %267 RelaxedPrecision 
                                                      OpDecorate %268 RelaxedPrecision 
                                                      OpDecorate %269 RelaxedPrecision 
                                                      OpDecorate %271 RelaxedPrecision 
                                                      OpDecorate %271 Location 271 
                                                      OpDecorate %272 RelaxedPrecision 
                                                      OpDecorate %273 RelaxedPrecision 
                                                      OpDecorate %274 RelaxedPrecision 
                                                      OpDecorate %275 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypePointer UniformConstant %10 
         UniformConstant read_only Texture2D* %12 = OpVariable UniformConstant 
                                              %14 = OpTypeSampler 
                                              %15 = OpTypePointer UniformConstant %14 
                     UniformConstant sampler* %16 = OpVariable UniformConstant 
                                              %18 = OpTypeSampledImage %10 
                                              %20 = OpTypeVector %6 2 
                                              %21 = OpTypePointer Input %20 
                        Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                              %25 = OpTypeInt 32 0 
                                          u32 %26 = OpConstant 3 
                                          u32 %28 = OpConstant 0 
                                              %29 = OpTypePointer Private %6 
                                 Private f32* %31 = OpVariable Private 
                                              %34 = OpTypePointer Input %7 
                        Input f32_4* vs_TEXCOORD1 = OpVariable Input 
                                              %36 = OpTypePointer Input %6 
                                              %41 = OpTypeVector %6 3 
                                              %42 = OpTypePointer Private %41 
                               Private f32_3* %43 = OpVariable Private 
                                          u32 %47 = OpConstant 2 
                                              %52 = OpTypeBool 
                                              %53 = OpTypePointer Private %52 
                                Private bool* %54 = OpVariable Private 
                                          f32 %56 = OpConstant 3.674022E-40 
                                              %59 = OpTypeInt 32 1 
                                          i32 %60 = OpConstant 0 
                                          i32 %61 = OpConstant 1 
                                          i32 %63 = OpConstant -1 
                                              %69 = OpTypeStruct %7 %6 %6 %7 %6 %6 %6 %7 %6 %6 
                                              %70 = OpTypePointer Uniform %69 
Uniform struct {f32_4; f32; f32; f32_4; f32; f32; f32; f32_4; f32; f32;}* %71 = OpVariable Uniform 
                                          i32 %72 = OpConstant 8 
                                              %73 = OpTypePointer Uniform %6 
                                          i32 %76 = OpConstant 9 
                                          u32 %81 = OpConstant 1 
                                 Private f32* %85 = OpVariable Private 
                                          f32 %87 = OpConstant 3.674022E-40 
                                 Private f32* %89 = OpVariable Private 
                                          f32 %91 = OpConstant 3.674022E-40 
                                 Private f32* %95 = OpVariable Private 
                                         i32 %116 = OpConstant 5 
                                         i32 %119 = OpConstant 6 
                                             %123 = OpTypePointer Uniform %7 
                        Input f32_4* vs_TEXCOORD5 = OpVariable Input 
        UniformConstant read_only Texture2D* %134 = OpVariable UniformConstant 
                    UniformConstant sampler* %136 = OpVariable UniformConstant 
                              Private f32_4* %142 = OpVariable Private 
                                         i32 %144 = OpConstant 7 
                              Private f32_3* %148 = OpVariable Private 
                                Input f32_4* %149 = OpVariable Input 
                                         i32 %152 = OpConstant 3 
                                         i32 %159 = OpConstant 2 
                              Private f32_4* %172 = OpVariable Private 
        UniformConstant read_only Texture2D* %173 = OpVariable UniformConstant 
                    UniformConstant sampler* %175 = OpVariable UniformConstant 
                                Private f32* %185 = OpVariable Private 
                              Private f32_4* %195 = OpVariable Private 
                              Private f32_4* %219 = OpVariable Private 
                                         i32 %238 = OpConstant 4 
                                Private f32* %244 = OpVariable Private 
                                             %270 = OpTypePointer Output %7 
                               Output f32_4* %271 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                          read_only Texture2D %13 = OpLoad %12 
                                      sampler %17 = OpLoad %16 
                   read_only Texture2DSampled %19 = OpSampledImage %13 %17 
                                        f32_2 %23 = OpLoad vs_TEXCOORD0 
                                        f32_4 %24 = OpImageSampleImplicitLod %19 %23 
                                          f32 %27 = OpCompositeExtract %24 3 
                                 Private f32* %30 = OpAccessChain %9 %28 
                                                      OpStore %30 %27 
                                 Private f32* %32 = OpAccessChain %9 %28 
                                          f32 %33 = OpLoad %32 
                                   Input f32* %37 = OpAccessChain vs_TEXCOORD1 %28 
                                          f32 %38 = OpLoad %37 
                                          f32 %39 = OpFNegate %38 
                                          f32 %40 = OpFAdd %33 %39 
                                                      OpStore %31 %40 
                                 Private f32* %44 = OpAccessChain %9 %28 
                                          f32 %45 = OpLoad %44 
                                          f32 %46 = OpFNegate %45 
                                   Input f32* %48 = OpAccessChain vs_TEXCOORD1 %47 
                                          f32 %49 = OpLoad %48 
                                          f32 %50 = OpFAdd %46 %49 
                                 Private f32* %51 = OpAccessChain %43 %28 
                                                      OpStore %51 %50 
                                          f32 %55 = OpLoad %31 
                                         bool %57 = OpFOrdLessThan %55 %56 
                                                      OpStore %54 %57 
                                         bool %58 = OpLoad %54 
                                          i32 %62 = OpSelect %58 %61 %60 
                                          i32 %64 = OpIMul %62 %63 
                                         bool %65 = OpINotEqual %64 %60 
                                                      OpSelectionMerge %67 None 
                                                      OpBranchConditional %65 %66 %67 
                                              %66 = OpLabel 
                                                      OpKill
                                              %67 = OpLabel 
                                 Uniform f32* %74 = OpAccessChain %71 %72 
                                          f32 %75 = OpLoad %74 
                                 Uniform f32* %77 = OpAccessChain %71 %76 
                                          f32 %78 = OpLoad %77 
                                          f32 %79 = OpFMul %75 %78 
                                                      OpStore %31 %79 
                                          f32 %80 = OpLoad %31 
                                   Input f32* %82 = OpAccessChain vs_TEXCOORD1 %81 
                                          f32 %83 = OpLoad %82 
                                          f32 %84 = OpFMul %80 %83 
                                                      OpStore %31 %84 
                                          f32 %86 = OpLoad %31 
                                          f32 %88 = OpExtInst %1 37 %86 %87 
                                                      OpStore %85 %88 
                                          f32 %90 = OpLoad %31 
                                          f32 %92 = OpFMul %90 %91 
                                                      OpStore %89 %92 
                                          f32 %93 = OpLoad %85 
                                          f32 %94 = OpExtInst %1 31 %93 
                                                      OpStore %85 %94 
                                 Private f32* %96 = OpAccessChain %43 %28 
                                          f32 %97 = OpLoad %96 
                                   Input f32* %98 = OpAccessChain vs_TEXCOORD1 %81 
                                          f32 %99 = OpLoad %98 
                                         f32 %100 = OpFMul %97 %99 
                                         f32 %101 = OpLoad %89 
                                         f32 %102 = OpFAdd %100 %101 
                                                      OpStore %95 %102 
                                         f32 %103 = OpLoad %95 
                                         f32 %104 = OpExtInst %1 43 %103 %56 %87 
                                                      OpStore %95 %104 
                                Private f32* %105 = OpAccessChain %43 %28 
                                         f32 %106 = OpLoad %105 
                                  Input f32* %107 = OpAccessChain vs_TEXCOORD1 %81 
                                         f32 %108 = OpLoad %107 
                                         f32 %109 = OpFMul %106 %108 
                                         f32 %110 = OpLoad %89 
                                         f32 %111 = OpFNegate %110 
                                         f32 %112 = OpFAdd %109 %111 
                                                      OpStore %89 %112 
                                         f32 %113 = OpLoad %85 
                                         f32 %114 = OpLoad %95 
                                         f32 %115 = OpFMul %113 %114 
                                                      OpStore %85 %115 
                                Uniform f32* %117 = OpAccessChain %71 %116 
                                         f32 %118 = OpLoad %117 
                                Uniform f32* %120 = OpAccessChain %71 %119 
                                         f32 %121 = OpLoad %120 
                                       f32_2 %122 = OpCompositeConstruct %118 %121 
                              Uniform f32_4* %124 = OpAccessChain %71 %60 
                                       f32_4 %125 = OpLoad %124 
                                       f32_2 %126 = OpVectorShuffle %125 %125 1 1 
                                       f32_2 %127 = OpFMul %122 %126 
                                       f32_4 %129 = OpLoad vs_TEXCOORD5 
                                       f32_2 %130 = OpVectorShuffle %129 %129 2 3 
                                       f32_2 %131 = OpFAdd %127 %130 
                                       f32_3 %132 = OpLoad %43 
                                       f32_3 %133 = OpVectorShuffle %132 %131 3 4 2 
                                                      OpStore %43 %133 
                         read_only Texture2D %135 = OpLoad %134 
                                     sampler %137 = OpLoad %136 
                  read_only Texture2DSampled %138 = OpSampledImage %135 %137 
                                       f32_3 %139 = OpLoad %43 
                                       f32_2 %140 = OpVectorShuffle %139 %139 0 1 
                                       f32_4 %141 = OpImageSampleImplicitLod %138 %140 
                                                      OpStore %9 %141 
                                       f32_4 %143 = OpLoad %9 
                              Uniform f32_4* %145 = OpAccessChain %71 %144 
                                       f32_4 %146 = OpLoad %145 
                                       f32_4 %147 = OpFMul %143 %146 
                                                      OpStore %142 %147 
                                       f32_4 %150 = OpLoad %149 
                                       f32_3 %151 = OpVectorShuffle %150 %150 0 1 2 
                              Uniform f32_4* %153 = OpAccessChain %71 %152 
                                       f32_4 %154 = OpLoad %153 
                                       f32_3 %155 = OpVectorShuffle %154 %154 0 1 2 
                                       f32_3 %156 = OpFMul %151 %155 
                                                      OpStore %148 %156 
                                Uniform f32* %157 = OpAccessChain %71 %61 
                                         f32 %158 = OpLoad %157 
                                Uniform f32* %160 = OpAccessChain %71 %159 
                                         f32 %161 = OpLoad %160 
                                       f32_2 %162 = OpCompositeConstruct %158 %161 
                              Uniform f32_4* %163 = OpAccessChain %71 %60 
                                       f32_4 %164 = OpLoad %163 
                                       f32_2 %165 = OpVectorShuffle %164 %164 1 1 
                                       f32_2 %166 = OpFMul %162 %165 
                                       f32_4 %167 = OpLoad vs_TEXCOORD5 
                                       f32_2 %168 = OpVectorShuffle %167 %167 0 1 
                                       f32_2 %169 = OpFAdd %166 %168 
                                       f32_3 %170 = OpLoad %43 
                                       f32_3 %171 = OpVectorShuffle %170 %169 3 4 2 
                                                      OpStore %43 %171 
                         read_only Texture2D %174 = OpLoad %173 
                                     sampler %176 = OpLoad %175 
                  read_only Texture2DSampled %177 = OpSampledImage %174 %176 
                                       f32_3 %178 = OpLoad %43 
                                       f32_2 %179 = OpVectorShuffle %178 %178 0 1 
                                       f32_4 %180 = OpImageSampleImplicitLod %177 %179 
                                                      OpStore %172 %180 
                                       f32_3 %181 = OpLoad %148 
                                       f32_4 %182 = OpLoad %172 
                                       f32_3 %183 = OpVectorShuffle %182 %182 0 1 2 
                                       f32_3 %184 = OpFMul %181 %183 
                                                      OpStore %43 %184 
                                Private f32* %186 = OpAccessChain %172 %26 
                                         f32 %187 = OpLoad %186 
                                Uniform f32* %188 = OpAccessChain %71 %152 %26 
                                         f32 %189 = OpLoad %188 
                                         f32 %190 = OpFMul %187 %189 
                                                      OpStore %185 %190 
                                       f32_3 %191 = OpLoad %43 
                                         f32 %192 = OpLoad %185 
                                       f32_3 %193 = OpCompositeConstruct %192 %192 %192 
                                       f32_3 %194 = OpFMul %191 %193 
                                                      OpStore %148 %194 
                                       f32_4 %196 = OpLoad %142 
                                       f32_3 %197 = OpVectorShuffle %196 %196 0 1 2 
                                       f32_4 %198 = OpLoad %142 
                                       f32_3 %199 = OpVectorShuffle %198 %198 3 3 3 
                                       f32_3 %200 = OpFMul %197 %199 
                                       f32_3 %201 = OpLoad %148 
                                       f32_3 %202 = OpFNegate %201 
                                       f32_3 %203 = OpFAdd %200 %202 
                                       f32_4 %204 = OpLoad %195 
                                       f32_4 %205 = OpVectorShuffle %204 %203 4 5 6 3 
                                                      OpStore %195 %205 
                                Uniform f32* %206 = OpAccessChain %71 %144 %26 
                                         f32 %207 = OpLoad %206 
                                Private f32* %208 = OpAccessChain %9 %26 
                                         f32 %209 = OpLoad %208 
                                         f32 %210 = OpFMul %207 %209 
                                         f32 %211 = OpLoad %185 
                                         f32 %212 = OpFNegate %211 
                                         f32 %213 = OpFAdd %210 %212 
                                Private f32* %214 = OpAccessChain %195 %26 
                                                      OpStore %214 %213 
                                         f32 %215 = OpLoad %85 
                                       f32_4 %216 = OpCompositeConstruct %215 %215 %215 %215 
                                       f32_4 %217 = OpLoad %195 
                                       f32_4 %218 = OpFMul %216 %217 
                                                      OpStore %195 %218 
                                       f32_3 %220 = OpLoad %43 
                                         f32 %221 = OpLoad %185 
                                       f32_3 %222 = OpCompositeConstruct %221 %221 %221 
                                       f32_3 %223 = OpFMul %220 %222 
                                       f32_4 %224 = OpLoad %195 
                                       f32_3 %225 = OpVectorShuffle %224 %224 0 1 2 
                                       f32_3 %226 = OpFAdd %223 %225 
                                       f32_4 %227 = OpLoad %219 
                                       f32_4 %228 = OpVectorShuffle %227 %226 4 5 6 3 
                                                      OpStore %219 %228 
                                Uniform f32* %229 = OpAccessChain %71 %152 %26 
                                         f32 %230 = OpLoad %229 
                                Private f32* %231 = OpAccessChain %172 %26 
                                         f32 %232 = OpLoad %231 
                                         f32 %233 = OpFMul %230 %232 
                                Private f32* %234 = OpAccessChain %195 %26 
                                         f32 %235 = OpLoad %234 
                                         f32 %236 = OpFAdd %233 %235 
                                Private f32* %237 = OpAccessChain %219 %26 
                                                      OpStore %237 %236 
                                Uniform f32* %239 = OpAccessChain %71 %238 
                                         f32 %240 = OpLoad %239 
                                Uniform f32* %241 = OpAccessChain %71 %76 
                                         f32 %242 = OpLoad %241 
                                         f32 %243 = OpFMul %240 %242 
                                                      OpStore %185 %243 
                                         f32 %245 = OpLoad %185 
                                  Input f32* %246 = OpAccessChain vs_TEXCOORD1 %81 
                                         f32 %247 = OpLoad %246 
                                         f32 %248 = OpFMul %245 %247 
                                                      OpStore %244 %248 
                                         f32 %249 = OpLoad %185 
                                  Input f32* %250 = OpAccessChain vs_TEXCOORD1 %81 
                                         f32 %251 = OpLoad %250 
                                         f32 %252 = OpFMul %249 %251 
                                         f32 %253 = OpFAdd %252 %87 
                                                      OpStore %85 %253 
                                         f32 %254 = OpLoad %244 
                                         f32 %255 = OpFMul %254 %91 
                                         f32 %256 = OpLoad %89 
                                         f32 %257 = OpFAdd %255 %256 
                                                      OpStore %89 %257 
                                         f32 %258 = OpLoad %89 
                                         f32 %259 = OpLoad %85 
                                         f32 %260 = OpFDiv %258 %259 
                                                      OpStore %85 %260 
                                         f32 %261 = OpLoad %85 
                                         f32 %262 = OpExtInst %1 43 %261 %56 %87 
                                                      OpStore %85 %262 
                                         f32 %263 = OpLoad %85 
                                         f32 %264 = OpFNegate %263 
                                         f32 %265 = OpFAdd %264 %87 
                                                      OpStore %85 %265 
                                       f32_4 %266 = OpLoad %219 
                                         f32 %267 = OpLoad %85 
                                       f32_4 %268 = OpCompositeConstruct %267 %267 %267 %267 
                                       f32_4 %269 = OpFMul %266 %268 
                                                      OpStore %219 %269 
                                       f32_4 %272 = OpLoad %219 
                                       f32_4 %273 = OpLoad %149 
                                       f32_4 %274 = OpVectorShuffle %273 %273 3 3 3 3 
                                       f32_4 %275 = OpFMul %272 %274 
                                                      OpStore %271 %275 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "UNITY_UI_ALPHACLIP" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _FaceDilate;
uniform 	float _OutlineSoftness;
uniform 	float _OutlineWidth;
uniform 	vec4 hlslcc_mtx4x4_EnvMatrix[4];
uniform 	float _WeightNormal;
uniform 	float _WeightBold;
uniform 	float _ScaleRatioA;
uniform 	float _VertexOffsetX;
uniform 	float _VertexOffsetY;
uniform 	vec4 _ClipRect;
uniform 	float _MaskSoftnessX;
uniform 	float _MaskSoftnessY;
uniform 	float _GradientScale;
uniform 	float _ScaleX;
uniform 	float _ScaleY;
uniform 	float _PerspectiveFilter;
uniform 	float _Sharpness;
uniform 	vec4 _FaceTex_ST;
uniform 	vec4 _OutlineTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
out mediump vec4 vs_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD5;
vec3 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec3 u_xlat6;
vec2 u_xlat8;
bool u_xlatb8;
float u_xlat12;
bool u_xlatb12;
float u_xlat13;
void main()
{
    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
    gl_Position = u_xlat2;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat8.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;
    u_xlat8.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat8.xy;
    u_xlat8.xy = abs(u_xlat8.xy) * vec2(_ScaleX, _ScaleY);
    u_xlat8.xy = u_xlat2.ww / u_xlat8.xy;
    u_xlat13 = dot(u_xlat8.xy, u_xlat8.xy);
    u_xlat8.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) * vec2(0.25, 0.25) + u_xlat8.xy;
    vs_TEXCOORD2.zw = vec2(0.25, 0.25) / u_xlat8.xy;
    u_xlat8.x = inversesqrt(u_xlat13);
    u_xlat12 = abs(in_TEXCOORD1.y) * _GradientScale;
    u_xlat13 = _Sharpness + 1.0;
    u_xlat12 = u_xlat12 * u_xlat13;
    u_xlat13 = u_xlat12 * u_xlat8.x;
    u_xlat2.x = (-_PerspectiveFilter) + 1.0;
    u_xlat2.x = abs(u_xlat13) * u_xlat2.x;
    u_xlat8.x = u_xlat8.x * u_xlat12 + (-u_xlat2.x);
    u_xlat3.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat3.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat3.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat6.xyz = vec3(u_xlat12) * u_xlat3.xyz;
    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat3.xyz = vec3(u_xlat12) * u_xlat1.xyz;
    u_xlat12 = dot(u_xlat6.xyz, u_xlat3.xyz);
    u_xlat8.x = abs(u_xlat12) * u_xlat8.x + u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(hlslcc_mtx4x4glstate_matrix_projection[3].w==0.0);
#else
    u_xlatb12 = hlslcc_mtx4x4glstate_matrix_projection[3].w==0.0;
#endif
    u_xlat6.x = (u_xlatb12) ? u_xlat8.x : u_xlat13;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.0>=in_TEXCOORD1.y);
#else
    u_xlatb8 = 0.0>=in_TEXCOORD1.y;
#endif
    u_xlat8.x = u_xlatb8 ? 1.0 : float(0.0);
    u_xlat12 = (-_WeightNormal) + _WeightBold;
    u_xlat8.x = u_xlat8.x * u_xlat12 + _WeightNormal;
    u_xlat8.x = u_xlat8.x * 0.25 + _FaceDilate;
    u_xlat8.x = u_xlat8.x * _ScaleRatioA;
    u_xlat6.z = u_xlat8.x * 0.5;
    vs_TEXCOORD1.yw = u_xlat6.xz;
    u_xlat12 = 0.5 / u_xlat6.x;
    u_xlat13 = (-_OutlineWidth) * _ScaleRatioA + 1.0;
    u_xlat13 = (-_OutlineSoftness) * _ScaleRatioA + u_xlat13;
    u_xlat13 = u_xlat13 * 0.5 + (-u_xlat12);
    vs_TEXCOORD1.x = (-u_xlat8.x) * 0.5 + u_xlat13;
    u_xlat8.x = (-u_xlat8.x) * 0.5 + 0.5;
    vs_TEXCOORD1.z = u_xlat12 + u_xlat8.x;
    u_xlat2 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));
    u_xlat2 = min(u_xlat2, vec4(2e+10, 2e+10, 2e+10, 2e+10));
    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + (-u_xlat2.xy);
    vs_TEXCOORD2.xy = (-u_xlat2.zw) + u_xlat0.xy;
    u_xlat0.xyz = u_xlat1.yyy * hlslcc_mtx4x4_EnvMatrix[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4_EnvMatrix[0].xyz * u_xlat1.xxx + u_xlat0.xyz;
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4_EnvMatrix[2].xyz * u_xlat1.zzz + u_xlat0.xyz;
    u_xlat0.x = in_TEXCOORD1.x * 0.000244140625;
    u_xlat8.x = floor(u_xlat0.x);
    u_xlat8.y = (-u_xlat8.x) * 4096.0 + in_TEXCOORD1.x;
    u_xlat0.xy = u_xlat8.xy * vec2(0.001953125, 0.001953125);
    vs_TEXCOORD5.xy = u_xlat0.xy * _FaceTex_ST.xy + _FaceTex_ST.zw;
    vs_TEXCOORD5.zw = u_xlat0.xy * _OutlineTex_ST.xy + _OutlineTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _Time;
uniform 	float _FaceUVSpeedX;
uniform 	float _FaceUVSpeedY;
uniform 	mediump vec4 _FaceColor;
uniform 	float _OutlineSoftness;
uniform 	float _OutlineUVSpeedX;
uniform 	float _OutlineUVSpeedY;
uniform 	mediump vec4 _OutlineColor;
uniform 	float _OutlineWidth;
uniform 	float _ScaleRatioA;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _FaceTex;
UNITY_LOCATION(2) uniform mediump sampler2D _OutlineTex;
in mediump vec4 vs_COLOR0;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
mediump float u_xlat16_1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
mediump vec4 u_xlat16_3;
float u_xlat4;
mediump vec4 u_xlat16_4;
bool u_xlatb4;
float u_xlat5;
bool u_xlatb5;
mediump float u_xlat16_6;
mediump float u_xlat16_11;
void main()
{
    u_xlat16_0.x = texture(_MainTex, vs_TEXCOORD0.xy).w;
    u_xlat5 = u_xlat16_0.x + (-vs_TEXCOORD1.x);
    u_xlat0.x = (-u_xlat16_0.x) + vs_TEXCOORD1.z;
#ifdef UNITY_ADRENO_ES3
    u_xlatb5 = !!(u_xlat5<0.0);
#else
    u_xlatb5 = u_xlat5<0.0;
#endif
    if(u_xlatb5){discard;}
    u_xlat5 = _OutlineWidth * _ScaleRatioA;
    u_xlat5 = u_xlat5 * vs_TEXCOORD1.y;
    u_xlat16_1 = min(u_xlat5, 1.0);
    u_xlat16_6 = u_xlat5 * 0.5;
    u_xlat16_1 = sqrt(u_xlat16_1);
    u_xlat16_11 = u_xlat0.x * vs_TEXCOORD1.y + u_xlat16_6;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_11 = min(max(u_xlat16_11, 0.0), 1.0);
#else
    u_xlat16_11 = clamp(u_xlat16_11, 0.0, 1.0);
#endif
    u_xlat16_6 = u_xlat0.x * vs_TEXCOORD1.y + (-u_xlat16_6);
    u_xlat16_1 = u_xlat16_1 * u_xlat16_11;
    u_xlat0.xy = vec2(_OutlineUVSpeedX, _OutlineUVSpeedY) * _Time.yy + vs_TEXCOORD5.zw;
    u_xlat16_0 = texture(_OutlineTex, u_xlat0.xy);
    u_xlat2 = u_xlat16_0 * _OutlineColor;
    u_xlat16_3.xyz = vs_COLOR0.xyz * _FaceColor.xyz;
    u_xlat0.xy = vec2(_FaceUVSpeedX, _FaceUVSpeedY) * _Time.yy + vs_TEXCOORD5.xy;
    u_xlat16_4 = texture(_FaceTex, u_xlat0.xy);
    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;
    u_xlat4 = u_xlat16_4.w * _FaceColor.w;
    u_xlat16_3.xyz = u_xlat0.xyz * vec3(u_xlat4);
    u_xlat16_2.xyz = u_xlat2.xyz * u_xlat2.www + (-u_xlat16_3.xyz);
    u_xlat16_2.w = _OutlineColor.w * u_xlat16_0.w + (-u_xlat4);
    u_xlat16_2 = vec4(u_xlat16_1) * u_xlat16_2;
    u_xlat16_3.w = _FaceColor.w * u_xlat16_4.w + u_xlat16_2.w;
    u_xlat16_3.xyz = u_xlat0.xyz * vec3(u_xlat4) + u_xlat16_2.xyz;
    u_xlat0.x = _OutlineSoftness * _ScaleRatioA;
    u_xlat5 = u_xlat0.x * vs_TEXCOORD1.y;
    u_xlat16_1 = u_xlat0.x * vs_TEXCOORD1.y + 1.0;
    u_xlat16_6 = u_xlat5 * 0.5 + u_xlat16_6;
    u_xlat16_1 = u_xlat16_6 / u_xlat16_1;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1 = min(max(u_xlat16_1, 0.0), 1.0);
#else
    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);
#endif
    u_xlat16_1 = (-u_xlat16_1) + 1.0;
    u_xlat16_6 = u_xlat16_3.w * u_xlat16_1 + -0.00100000005;
    u_xlat16_0 = vec4(u_xlat16_1) * u_xlat16_3;
    SV_Target0 = u_xlat16_0 * vs_COLOR0.wwww;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(u_xlat16_6<0.0);
#else
    u_xlatb4 = u_xlat16_6<0.0;
#endif
    if(u_xlatb4){discard;}
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "UNITY_UI_ALPHACLIP" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _FaceDilate;
uniform 	float _OutlineSoftness;
uniform 	float _OutlineWidth;
uniform 	vec4 hlslcc_mtx4x4_EnvMatrix[4];
uniform 	float _WeightNormal;
uniform 	float _WeightBold;
uniform 	float _ScaleRatioA;
uniform 	float _VertexOffsetX;
uniform 	float _VertexOffsetY;
uniform 	vec4 _ClipRect;
uniform 	float _MaskSoftnessX;
uniform 	float _MaskSoftnessY;
uniform 	float _GradientScale;
uniform 	float _ScaleX;
uniform 	float _ScaleY;
uniform 	float _PerspectiveFilter;
uniform 	float _Sharpness;
uniform 	vec4 _FaceTex_ST;
uniform 	vec4 _OutlineTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
out mediump vec4 vs_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD5;
vec3 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec3 u_xlat6;
vec2 u_xlat8;
bool u_xlatb8;
float u_xlat12;
bool u_xlatb12;
float u_xlat13;
void main()
{
    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
    gl_Position = u_xlat2;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat8.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;
    u_xlat8.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat8.xy;
    u_xlat8.xy = abs(u_xlat8.xy) * vec2(_ScaleX, _ScaleY);
    u_xlat8.xy = u_xlat2.ww / u_xlat8.xy;
    u_xlat13 = dot(u_xlat8.xy, u_xlat8.xy);
    u_xlat8.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) * vec2(0.25, 0.25) + u_xlat8.xy;
    vs_TEXCOORD2.zw = vec2(0.25, 0.25) / u_xlat8.xy;
    u_xlat8.x = inversesqrt(u_xlat13);
    u_xlat12 = abs(in_TEXCOORD1.y) * _GradientScale;
    u_xlat13 = _Sharpness + 1.0;
    u_xlat12 = u_xlat12 * u_xlat13;
    u_xlat13 = u_xlat12 * u_xlat8.x;
    u_xlat2.x = (-_PerspectiveFilter) + 1.0;
    u_xlat2.x = abs(u_xlat13) * u_xlat2.x;
    u_xlat8.x = u_xlat8.x * u_xlat12 + (-u_xlat2.x);
    u_xlat3.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat3.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat3.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat6.xyz = vec3(u_xlat12) * u_xlat3.xyz;
    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat3.xyz = vec3(u_xlat12) * u_xlat1.xyz;
    u_xlat12 = dot(u_xlat6.xyz, u_xlat3.xyz);
    u_xlat8.x = abs(u_xlat12) * u_xlat8.x + u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(hlslcc_mtx4x4glstate_matrix_projection[3].w==0.0);
#else
    u_xlatb12 = hlslcc_mtx4x4glstate_matrix_projection[3].w==0.0;
#endif
    u_xlat6.x = (u_xlatb12) ? u_xlat8.x : u_xlat13;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.0>=in_TEXCOORD1.y);
#else
    u_xlatb8 = 0.0>=in_TEXCOORD1.y;
#endif
    u_xlat8.x = u_xlatb8 ? 1.0 : float(0.0);
    u_xlat12 = (-_WeightNormal) + _WeightBold;
    u_xlat8.x = u_xlat8.x * u_xlat12 + _WeightNormal;
    u_xlat8.x = u_xlat8.x * 0.25 + _FaceDilate;
    u_xlat8.x = u_xlat8.x * _ScaleRatioA;
    u_xlat6.z = u_xlat8.x * 0.5;
    vs_TEXCOORD1.yw = u_xlat6.xz;
    u_xlat12 = 0.5 / u_xlat6.x;
    u_xlat13 = (-_OutlineWidth) * _ScaleRatioA + 1.0;
    u_xlat13 = (-_OutlineSoftness) * _ScaleRatioA + u_xlat13;
    u_xlat13 = u_xlat13 * 0.5 + (-u_xlat12);
    vs_TEXCOORD1.x = (-u_xlat8.x) * 0.5 + u_xlat13;
    u_xlat8.x = (-u_xlat8.x) * 0.5 + 0.5;
    vs_TEXCOORD1.z = u_xlat12 + u_xlat8.x;
    u_xlat2 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));
    u_xlat2 = min(u_xlat2, vec4(2e+10, 2e+10, 2e+10, 2e+10));
    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + (-u_xlat2.xy);
    vs_TEXCOORD2.xy = (-u_xlat2.zw) + u_xlat0.xy;
    u_xlat0.xyz = u_xlat1.yyy * hlslcc_mtx4x4_EnvMatrix[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4_EnvMatrix[0].xyz * u_xlat1.xxx + u_xlat0.xyz;
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4_EnvMatrix[2].xyz * u_xlat1.zzz + u_xlat0.xyz;
    u_xlat0.x = in_TEXCOORD1.x * 0.000244140625;
    u_xlat8.x = floor(u_xlat0.x);
    u_xlat8.y = (-u_xlat8.x) * 4096.0 + in_TEXCOORD1.x;
    u_xlat0.xy = u_xlat8.xy * vec2(0.001953125, 0.001953125);
    vs_TEXCOORD5.xy = u_xlat0.xy * _FaceTex_ST.xy + _FaceTex_ST.zw;
    vs_TEXCOORD5.zw = u_xlat0.xy * _OutlineTex_ST.xy + _OutlineTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _Time;
uniform 	float _FaceUVSpeedX;
uniform 	float _FaceUVSpeedY;
uniform 	mediump vec4 _FaceColor;
uniform 	float _OutlineSoftness;
uniform 	float _OutlineUVSpeedX;
uniform 	float _OutlineUVSpeedY;
uniform 	mediump vec4 _OutlineColor;
uniform 	float _OutlineWidth;
uniform 	float _ScaleRatioA;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _FaceTex;
UNITY_LOCATION(2) uniform mediump sampler2D _OutlineTex;
in mediump vec4 vs_COLOR0;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
mediump float u_xlat16_1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
mediump vec4 u_xlat16_3;
float u_xlat4;
mediump vec4 u_xlat16_4;
bool u_xlatb4;
float u_xlat5;
bool u_xlatb5;
mediump float u_xlat16_6;
mediump float u_xlat16_11;
void main()
{
    u_xlat16_0.x = texture(_MainTex, vs_TEXCOORD0.xy).w;
    u_xlat5 = u_xlat16_0.x + (-vs_TEXCOORD1.x);
    u_xlat0.x = (-u_xlat16_0.x) + vs_TEXCOORD1.z;
#ifdef UNITY_ADRENO_ES3
    u_xlatb5 = !!(u_xlat5<0.0);
#else
    u_xlatb5 = u_xlat5<0.0;
#endif
    if(u_xlatb5){discard;}
    u_xlat5 = _OutlineWidth * _ScaleRatioA;
    u_xlat5 = u_xlat5 * vs_TEXCOORD1.y;
    u_xlat16_1 = min(u_xlat5, 1.0);
    u_xlat16_6 = u_xlat5 * 0.5;
    u_xlat16_1 = sqrt(u_xlat16_1);
    u_xlat16_11 = u_xlat0.x * vs_TEXCOORD1.y + u_xlat16_6;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_11 = min(max(u_xlat16_11, 0.0), 1.0);
#else
    u_xlat16_11 = clamp(u_xlat16_11, 0.0, 1.0);
#endif
    u_xlat16_6 = u_xlat0.x * vs_TEXCOORD1.y + (-u_xlat16_6);
    u_xlat16_1 = u_xlat16_1 * u_xlat16_11;
    u_xlat0.xy = vec2(_OutlineUVSpeedX, _OutlineUVSpeedY) * _Time.yy + vs_TEXCOORD5.zw;
    u_xlat16_0 = texture(_OutlineTex, u_xlat0.xy);
    u_xlat2 = u_xlat16_0 * _OutlineColor;
    u_xlat16_3.xyz = vs_COLOR0.xyz * _FaceColor.xyz;
    u_xlat0.xy = vec2(_FaceUVSpeedX, _FaceUVSpeedY) * _Time.yy + vs_TEXCOORD5.xy;
    u_xlat16_4 = texture(_FaceTex, u_xlat0.xy);
    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;
    u_xlat4 = u_xlat16_4.w * _FaceColor.w;
    u_xlat16_3.xyz = u_xlat0.xyz * vec3(u_xlat4);
    u_xlat16_2.xyz = u_xlat2.xyz * u_xlat2.www + (-u_xlat16_3.xyz);
    u_xlat16_2.w = _OutlineColor.w * u_xlat16_0.w + (-u_xlat4);
    u_xlat16_2 = vec4(u_xlat16_1) * u_xlat16_2;
    u_xlat16_3.w = _FaceColor.w * u_xlat16_4.w + u_xlat16_2.w;
    u_xlat16_3.xyz = u_xlat0.xyz * vec3(u_xlat4) + u_xlat16_2.xyz;
    u_xlat0.x = _OutlineSoftness * _ScaleRatioA;
    u_xlat5 = u_xlat0.x * vs_TEXCOORD1.y;
    u_xlat16_1 = u_xlat0.x * vs_TEXCOORD1.y + 1.0;
    u_xlat16_6 = u_xlat5 * 0.5 + u_xlat16_6;
    u_xlat16_1 = u_xlat16_6 / u_xlat16_1;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1 = min(max(u_xlat16_1, 0.0), 1.0);
#else
    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);
#endif
    u_xlat16_1 = (-u_xlat16_1) + 1.0;
    u_xlat16_6 = u_xlat16_3.w * u_xlat16_1 + -0.00100000005;
    u_xlat16_0 = vec4(u_xlat16_1) * u_xlat16_3;
    SV_Target0 = u_xlat16_0 * vs_COLOR0.wwww;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(u_xlat16_6<0.0);
#else
    u_xlatb4 = u_xlat16_6<0.0;
#endif
    if(u_xlatb4){discard;}
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "UNITY_UI_ALPHACLIP" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _FaceDilate;
uniform 	float _OutlineSoftness;
uniform 	float _OutlineWidth;
uniform 	vec4 hlslcc_mtx4x4_EnvMatrix[4];
uniform 	float _WeightNormal;
uniform 	float _WeightBold;
uniform 	float _ScaleRatioA;
uniform 	float _VertexOffsetX;
uniform 	float _VertexOffsetY;
uniform 	vec4 _ClipRect;
uniform 	float _MaskSoftnessX;
uniform 	float _MaskSoftnessY;
uniform 	float _GradientScale;
uniform 	float _ScaleX;
uniform 	float _ScaleY;
uniform 	float _PerspectiveFilter;
uniform 	float _Sharpness;
uniform 	vec4 _FaceTex_ST;
uniform 	vec4 _OutlineTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
out mediump vec4 vs_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD5;
vec3 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec3 u_xlat6;
vec2 u_xlat8;
bool u_xlatb8;
float u_xlat12;
bool u_xlatb12;
float u_xlat13;
void main()
{
    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
    gl_Position = u_xlat2;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat8.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;
    u_xlat8.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat8.xy;
    u_xlat8.xy = abs(u_xlat8.xy) * vec2(_ScaleX, _ScaleY);
    u_xlat8.xy = u_xlat2.ww / u_xlat8.xy;
    u_xlat13 = dot(u_xlat8.xy, u_xlat8.xy);
    u_xlat8.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) * vec2(0.25, 0.25) + u_xlat8.xy;
    vs_TEXCOORD2.zw = vec2(0.25, 0.25) / u_xlat8.xy;
    u_xlat8.x = inversesqrt(u_xlat13);
    u_xlat12 = abs(in_TEXCOORD1.y) * _GradientScale;
    u_xlat13 = _Sharpness + 1.0;
    u_xlat12 = u_xlat12 * u_xlat13;
    u_xlat13 = u_xlat12 * u_xlat8.x;
    u_xlat2.x = (-_PerspectiveFilter) + 1.0;
    u_xlat2.x = abs(u_xlat13) * u_xlat2.x;
    u_xlat8.x = u_xlat8.x * u_xlat12 + (-u_xlat2.x);
    u_xlat3.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat3.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat3.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat6.xyz = vec3(u_xlat12) * u_xlat3.xyz;
    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat3.xyz = vec3(u_xlat12) * u_xlat1.xyz;
    u_xlat12 = dot(u_xlat6.xyz, u_xlat3.xyz);
    u_xlat8.x = abs(u_xlat12) * u_xlat8.x + u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(hlslcc_mtx4x4glstate_matrix_projection[3].w==0.0);
#else
    u_xlatb12 = hlslcc_mtx4x4glstate_matrix_projection[3].w==0.0;
#endif
    u_xlat6.x = (u_xlatb12) ? u_xlat8.x : u_xlat13;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.0>=in_TEXCOORD1.y);
#else
    u_xlatb8 = 0.0>=in_TEXCOORD1.y;
#endif
    u_xlat8.x = u_xlatb8 ? 1.0 : float(0.0);
    u_xlat12 = (-_WeightNormal) + _WeightBold;
    u_xlat8.x = u_xlat8.x * u_xlat12 + _WeightNormal;
    u_xlat8.x = u_xlat8.x * 0.25 + _FaceDilate;
    u_xlat8.x = u_xlat8.x * _ScaleRatioA;
    u_xlat6.z = u_xlat8.x * 0.5;
    vs_TEXCOORD1.yw = u_xlat6.xz;
    u_xlat12 = 0.5 / u_xlat6.x;
    u_xlat13 = (-_OutlineWidth) * _ScaleRatioA + 1.0;
    u_xlat13 = (-_OutlineSoftness) * _ScaleRatioA + u_xlat13;
    u_xlat13 = u_xlat13 * 0.5 + (-u_xlat12);
    vs_TEXCOORD1.x = (-u_xlat8.x) * 0.5 + u_xlat13;
    u_xlat8.x = (-u_xlat8.x) * 0.5 + 0.5;
    vs_TEXCOORD1.z = u_xlat12 + u_xlat8.x;
    u_xlat2 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));
    u_xlat2 = min(u_xlat2, vec4(2e+10, 2e+10, 2e+10, 2e+10));
    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + (-u_xlat2.xy);
    vs_TEXCOORD2.xy = (-u_xlat2.zw) + u_xlat0.xy;
    u_xlat0.xyz = u_xlat1.yyy * hlslcc_mtx4x4_EnvMatrix[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4_EnvMatrix[0].xyz * u_xlat1.xxx + u_xlat0.xyz;
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4_EnvMatrix[2].xyz * u_xlat1.zzz + u_xlat0.xyz;
    u_xlat0.x = in_TEXCOORD1.x * 0.000244140625;
    u_xlat8.x = floor(u_xlat0.x);
    u_xlat8.y = (-u_xlat8.x) * 4096.0 + in_TEXCOORD1.x;
    u_xlat0.xy = u_xlat8.xy * vec2(0.001953125, 0.001953125);
    vs_TEXCOORD5.xy = u_xlat0.xy * _FaceTex_ST.xy + _FaceTex_ST.zw;
    vs_TEXCOORD5.zw = u_xlat0.xy * _OutlineTex_ST.xy + _OutlineTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _Time;
uniform 	float _FaceUVSpeedX;
uniform 	float _FaceUVSpeedY;
uniform 	mediump vec4 _FaceColor;
uniform 	float _OutlineSoftness;
uniform 	float _OutlineUVSpeedX;
uniform 	float _OutlineUVSpeedY;
uniform 	mediump vec4 _OutlineColor;
uniform 	float _OutlineWidth;
uniform 	float _ScaleRatioA;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _FaceTex;
UNITY_LOCATION(2) uniform mediump sampler2D _OutlineTex;
in mediump vec4 vs_COLOR0;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
mediump float u_xlat16_1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
mediump vec4 u_xlat16_3;
float u_xlat4;
mediump vec4 u_xlat16_4;
bool u_xlatb4;
float u_xlat5;
bool u_xlatb5;
mediump float u_xlat16_6;
mediump float u_xlat16_11;
void main()
{
    u_xlat16_0.x = texture(_MainTex, vs_TEXCOORD0.xy).w;
    u_xlat5 = u_xlat16_0.x + (-vs_TEXCOORD1.x);
    u_xlat0.x = (-u_xlat16_0.x) + vs_TEXCOORD1.z;
#ifdef UNITY_ADRENO_ES3
    u_xlatb5 = !!(u_xlat5<0.0);
#else
    u_xlatb5 = u_xlat5<0.0;
#endif
    if(u_xlatb5){discard;}
    u_xlat5 = _OutlineWidth * _ScaleRatioA;
    u_xlat5 = u_xlat5 * vs_TEXCOORD1.y;
    u_xlat16_1 = min(u_xlat5, 1.0);
    u_xlat16_6 = u_xlat5 * 0.5;
    u_xlat16_1 = sqrt(u_xlat16_1);
    u_xlat16_11 = u_xlat0.x * vs_TEXCOORD1.y + u_xlat16_6;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_11 = min(max(u_xlat16_11, 0.0), 1.0);
#else
    u_xlat16_11 = clamp(u_xlat16_11, 0.0, 1.0);
#endif
    u_xlat16_6 = u_xlat0.x * vs_TEXCOORD1.y + (-u_xlat16_6);
    u_xlat16_1 = u_xlat16_1 * u_xlat16_11;
    u_xlat0.xy = vec2(_OutlineUVSpeedX, _OutlineUVSpeedY) * _Time.yy + vs_TEXCOORD5.zw;
    u_xlat16_0 = texture(_OutlineTex, u_xlat0.xy);
    u_xlat2 = u_xlat16_0 * _OutlineColor;
    u_xlat16_3.xyz = vs_COLOR0.xyz * _FaceColor.xyz;
    u_xlat0.xy = vec2(_FaceUVSpeedX, _FaceUVSpeedY) * _Time.yy + vs_TEXCOORD5.xy;
    u_xlat16_4 = texture(_FaceTex, u_xlat0.xy);
    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;
    u_xlat4 = u_xlat16_4.w * _FaceColor.w;
    u_xlat16_3.xyz = u_xlat0.xyz * vec3(u_xlat4);
    u_xlat16_2.xyz = u_xlat2.xyz * u_xlat2.www + (-u_xlat16_3.xyz);
    u_xlat16_2.w = _OutlineColor.w * u_xlat16_0.w + (-u_xlat4);
    u_xlat16_2 = vec4(u_xlat16_1) * u_xlat16_2;
    u_xlat16_3.w = _FaceColor.w * u_xlat16_4.w + u_xlat16_2.w;
    u_xlat16_3.xyz = u_xlat0.xyz * vec3(u_xlat4) + u_xlat16_2.xyz;
    u_xlat0.x = _OutlineSoftness * _ScaleRatioA;
    u_xlat5 = u_xlat0.x * vs_TEXCOORD1.y;
    u_xlat16_1 = u_xlat0.x * vs_TEXCOORD1.y + 1.0;
    u_xlat16_6 = u_xlat5 * 0.5 + u_xlat16_6;
    u_xlat16_1 = u_xlat16_6 / u_xlat16_1;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1 = min(max(u_xlat16_1, 0.0), 1.0);
#else
    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);
#endif
    u_xlat16_1 = (-u_xlat16_1) + 1.0;
    u_xlat16_6 = u_xlat16_3.w * u_xlat16_1 + -0.00100000005;
    u_xlat16_0 = vec4(u_xlat16_1) * u_xlat16_3;
    SV_Target0 = u_xlat16_0 * vs_COLOR0.wwww;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(u_xlat16_6<0.0);
#else
    u_xlatb4 = u_xlat16_6<0.0;
#endif
    if(u_xlatb4){discard;}
    return;
}

#endif
"
}
SubProgram "vulkan hw_tier00 " {
Keywords { "UNITY_UI_ALPHACLIP" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 517
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %12 %121 %125 %126 %129 %131 %183 %193 %236 %358 %452 %485 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpDecorate %12 Location 12 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpDecorate %19 ArrayStride 19 
                                                      OpDecorate %20 ArrayStride 20 
                                                      OpDecorate %21 ArrayStride 21 
                                                      OpDecorate %22 ArrayStride 22 
                                                      OpMemberDecorate %23 0 Offset 23 
                                                      OpMemberDecorate %23 1 Offset 23 
                                                      OpMemberDecorate %23 2 Offset 23 
                                                      OpMemberDecorate %23 3 Offset 23 
                                                      OpMemberDecorate %23 4 Offset 23 
                                                      OpMemberDecorate %23 5 Offset 23 
                                                      OpMemberDecorate %23 6 Offset 23 
                                                      OpMemberDecorate %23 7 Offset 23 
                                                      OpMemberDecorate %23 8 Offset 23 
                                                      OpMemberDecorate %23 9 Offset 23 
                                                      OpMemberDecorate %23 10 Offset 23 
                                                      OpMemberDecorate %23 11 Offset 23 
                                                      OpMemberDecorate %23 12 Offset 23 
                                                      OpMemberDecorate %23 13 Offset 23 
                                                      OpMemberDecorate %23 14 Offset 23 
                                                      OpMemberDecorate %23 15 Offset 23 
                                                      OpMemberDecorate %23 16 Offset 23 
                                                      OpMemberDecorate %23 17 Offset 23 
                                                      OpMemberDecorate %23 18 Offset 23 
                                                      OpMemberDecorate %23 19 Offset 23 
                                                      OpMemberDecorate %23 20 Offset 23 
                                                      OpMemberDecorate %23 21 Offset 23 
                                                      OpMemberDecorate %23 22 Offset 23 
                                                      OpMemberDecorate %23 23 Offset 23 
                                                      OpMemberDecorate %23 24 Offset 23 
                                                      OpDecorate %23 Block 
                                                      OpDecorate %25 DescriptorSet 25 
                                                      OpDecorate %25 Binding 25 
                                                      OpMemberDecorate %119 0 BuiltIn 119 
                                                      OpMemberDecorate %119 1 BuiltIn 119 
                                                      OpMemberDecorate %119 2 BuiltIn 119 
                                                      OpDecorate %119 Block 
                                                      OpDecorate %125 RelaxedPrecision 
                                                      OpDecorate %125 Location 125 
                                                      OpDecorate %126 RelaxedPrecision 
                                                      OpDecorate %126 Location 126 
                                                      OpDecorate %127 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD0 Location 129 
                                                      OpDecorate %131 Location 131 
                                                      OpDecorate vs_TEXCOORD2 Location 183 
                                                      OpDecorate %193 Location 193 
                                                      OpDecorate %236 Location 236 
                                                      OpDecorate vs_TEXCOORD1 Location 358 
                                                      OpDecorate vs_TEXCOORD3 Location 452 
                                                      OpDecorate vs_TEXCOORD5 Location 485 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 3 
                                               %8 = OpTypePointer Private %7 
                                Private f32_3* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 4 
                                              %11 = OpTypePointer Input %10 
                                 Input f32_4* %12 = OpVariable Input 
                                              %13 = OpTypeVector %6 2 
                                              %16 = OpTypeInt 32 0 
                                          u32 %17 = OpConstant 4 
                                              %18 = OpTypeArray %10 %17 
                                              %19 = OpTypeArray %10 %17 
                                              %20 = OpTypeArray %10 %17 
                                              %21 = OpTypeArray %10 %17 
                                              %22 = OpTypeArray %10 %17 
                                              %23 = OpTypeStruct %7 %10 %18 %19 %20 %21 %6 %6 %6 %22 %6 %6 %6 %6 %6 %10 %6 %6 %6 %6 %6 %6 %6 %10 %10 
                                              %24 = OpTypePointer Uniform %23 
Uniform struct {f32_3; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4[4]; f32; f32; f32; f32_4[4]; f32; f32; f32; f32; f32; f32_4; f32; f32; f32; f32; f32; f32; f32; f32_4; f32_4;}* %25 = OpVariable Uniform 
                                              %26 = OpTypeInt 32 1 
                                          i32 %27 = OpConstant 13 
                                              %28 = OpTypePointer Uniform %6 
                                          i32 %31 = OpConstant 14 
                                              %38 = OpTypePointer Private %10 
                               Private f32_4* %39 = OpVariable Private 
                                          i32 %42 = OpConstant 2 
                                          i32 %43 = OpConstant 1 
                                              %44 = OpTypePointer Uniform %10 
                                          i32 %48 = OpConstant 0 
                               Private f32_4* %63 = OpVariable Private 
                                          i32 %65 = OpConstant 3 
                                              %83 = OpTypePointer Uniform %7 
                               Private f32_4* %89 = OpVariable Private 
                                          i32 %92 = OpConstant 5 
                                         u32 %117 = OpConstant 1 
                                             %118 = OpTypeArray %6 %117 
                                             %119 = OpTypeStruct %10 %6 %118 
                                             %120 = OpTypePointer Output %119 
        Output struct {f32_4; f32; f32[1];}* %121 = OpVariable Output 
                                             %123 = OpTypePointer Output %10 
                               Output f32_4* %125 = OpVariable Output 
                                Input f32_4* %126 = OpVariable Input 
                                             %128 = OpTypePointer Output %13 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                             %130 = OpTypePointer Input %13 
                                Input f32_2* %131 = OpVariable Input 
                                             %133 = OpTypePointer Private %13 
                              Private f32_2* %134 = OpVariable Private 
                                         i32 %138 = OpConstant 4 
                                         i32 %154 = OpConstant 19 
                                         i32 %157 = OpConstant 20 
                                             %166 = OpTypePointer Private %6 
                                Private f32* %167 = OpVariable Private 
                                         i32 %171 = OpConstant 16 
                                         i32 %174 = OpConstant 17 
                                         f32 %178 = OpConstant 3.674022E-40 
                                       f32_2 %179 = OpConstantComposite %178 %178 
                       Output f32_4* vs_TEXCOORD2 = OpVariable Output 
                                         u32 %190 = OpConstant 0 
                                Private f32* %192 = OpVariable Private 
                                Input f32_2* %193 = OpVariable Input 
                                             %194 = OpTypePointer Input %6 
                                         i32 %198 = OpConstant 18 
                                         i32 %202 = OpConstant 22 
                                         f32 %205 = OpConstant 3.674022E-40 
                                         i32 %214 = OpConstant 21 
                                             %235 = OpTypePointer Input %7 
                                Input f32_3* %236 = OpVariable Input 
                                         u32 %254 = OpConstant 2 
                              Private f32_3* %263 = OpVariable Private 
                                             %296 = OpTypeBool 
                                             %297 = OpTypePointer Private %296 
                               Private bool* %298 = OpVariable Private 
                                         u32 %299 = OpConstant 3 
                                         f32 %302 = OpConstant 3.674022E-40 
                                             %305 = OpTypePointer Function %6 
                               Private bool* %315 = OpVariable Private 
                                         i32 %322 = OpConstant 10 
                                         i32 %326 = OpConstant 11 
                                         i32 %341 = OpConstant 6 
                                         i32 %348 = OpConstant 12 
                                         f32 %355 = OpConstant 3.674022E-40 
                       Output f32_4* vs_TEXCOORD1 = OpVariable Output 
                                         i32 %366 = OpConstant 8 
                                         i32 %374 = OpConstant 7 
                                             %394 = OpTypePointer Output %6 
                                         i32 %407 = OpConstant 15 
                                         f32 %410 = OpConstant 3.674022E-40 
                                       f32_4 %411 = OpConstantComposite %410 %410 %410 %410 
                                         f32 %414 = OpConstant 3.674022E-40 
                                       f32_4 %415 = OpConstantComposite %414 %414 %414 %414 
                                         f32 %419 = OpConstant 3.674022E-40 
                                       f32_2 %420 = OpConstantComposite %419 %419 
                                         i32 %438 = OpConstant 9 
                                             %451 = OpTypePointer Output %7 
                       Output f32_3* vs_TEXCOORD3 = OpVariable Output 
                                         f32 %463 = OpConstant 3.674022E-40 
                                         f32 %473 = OpConstant 3.674022E-40 
                                         f32 %480 = OpConstant 3.674022E-40 
                                       f32_2 %481 = OpConstantComposite %480 %480 
                       Output f32_4* vs_TEXCOORD5 = OpVariable Output 
                                         i32 %488 = OpConstant 23 
                                         i32 %501 = OpConstant 24 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                               Function f32* %306 = OpVariable Function 
                                        f32_4 %14 = OpLoad %12 
                                        f32_2 %15 = OpVectorShuffle %14 %14 0 1 
                                 Uniform f32* %29 = OpAccessChain %25 %27 
                                          f32 %30 = OpLoad %29 
                                 Uniform f32* %32 = OpAccessChain %25 %31 
                                          f32 %33 = OpLoad %32 
                                        f32_2 %34 = OpCompositeConstruct %30 %33 
                                        f32_2 %35 = OpFAdd %15 %34 
                                        f32_3 %36 = OpLoad %9 
                                        f32_3 %37 = OpVectorShuffle %36 %35 3 4 2 
                                                      OpStore %9 %37 
                                        f32_3 %40 = OpLoad %9 
                                        f32_4 %41 = OpVectorShuffle %40 %40 1 1 1 1 
                               Uniform f32_4* %45 = OpAccessChain %25 %42 %43 
                                        f32_4 %46 = OpLoad %45 
                                        f32_4 %47 = OpFMul %41 %46 
                                                      OpStore %39 %47 
                               Uniform f32_4* %49 = OpAccessChain %25 %42 %48 
                                        f32_4 %50 = OpLoad %49 
                                        f32_3 %51 = OpLoad %9 
                                        f32_4 %52 = OpVectorShuffle %51 %51 0 0 0 0 
                                        f32_4 %53 = OpFMul %50 %52 
                                        f32_4 %54 = OpLoad %39 
                                        f32_4 %55 = OpFAdd %53 %54 
                                                      OpStore %39 %55 
                               Uniform f32_4* %56 = OpAccessChain %25 %42 %42 
                                        f32_4 %57 = OpLoad %56 
                                        f32_4 %58 = OpLoad %12 
                                        f32_4 %59 = OpVectorShuffle %58 %58 2 2 2 2 
                                        f32_4 %60 = OpFMul %57 %59 
                                        f32_4 %61 = OpLoad %39 
                                        f32_4 %62 = OpFAdd %60 %61 
                                                      OpStore %39 %62 
                                        f32_4 %64 = OpLoad %39 
                               Uniform f32_4* %66 = OpAccessChain %25 %42 %65 
                                        f32_4 %67 = OpLoad %66 
                                        f32_4 %68 = OpFAdd %64 %67 
                                                      OpStore %63 %68 
                               Uniform f32_4* %69 = OpAccessChain %25 %42 %65 
                                        f32_4 %70 = OpLoad %69 
                                        f32_3 %71 = OpVectorShuffle %70 %70 0 1 2 
                                        f32_4 %72 = OpLoad %12 
                                        f32_3 %73 = OpVectorShuffle %72 %72 3 3 3 
                                        f32_3 %74 = OpFMul %71 %73 
                                        f32_4 %75 = OpLoad %39 
                                        f32_3 %76 = OpVectorShuffle %75 %75 0 1 2 
                                        f32_3 %77 = OpFAdd %74 %76 
                                        f32_4 %78 = OpLoad %39 
                                        f32_4 %79 = OpVectorShuffle %78 %77 4 5 6 3 
                                                      OpStore %39 %79 
                                        f32_4 %80 = OpLoad %39 
                                        f32_3 %81 = OpVectorShuffle %80 %80 0 1 2 
                                        f32_3 %82 = OpFNegate %81 
                               Uniform f32_3* %84 = OpAccessChain %25 %48 
                                        f32_3 %85 = OpLoad %84 
                                        f32_3 %86 = OpFAdd %82 %85 
                                        f32_4 %87 = OpLoad %39 
                                        f32_4 %88 = OpVectorShuffle %87 %86 4 5 6 3 
                                                      OpStore %39 %88 
                                        f32_4 %90 = OpLoad %63 
                                        f32_4 %91 = OpVectorShuffle %90 %90 1 1 1 1 
                               Uniform f32_4* %93 = OpAccessChain %25 %92 %43 
                                        f32_4 %94 = OpLoad %93 
                                        f32_4 %95 = OpFMul %91 %94 
                                                      OpStore %89 %95 
                               Uniform f32_4* %96 = OpAccessChain %25 %92 %48 
                                        f32_4 %97 = OpLoad %96 
                                        f32_4 %98 = OpLoad %63 
                                        f32_4 %99 = OpVectorShuffle %98 %98 0 0 0 0 
                                       f32_4 %100 = OpFMul %97 %99 
                                       f32_4 %101 = OpLoad %89 
                                       f32_4 %102 = OpFAdd %100 %101 
                                                      OpStore %89 %102 
                              Uniform f32_4* %103 = OpAccessChain %25 %92 %42 
                                       f32_4 %104 = OpLoad %103 
                                       f32_4 %105 = OpLoad %63 
                                       f32_4 %106 = OpVectorShuffle %105 %105 2 2 2 2 
                                       f32_4 %107 = OpFMul %104 %106 
                                       f32_4 %108 = OpLoad %89 
                                       f32_4 %109 = OpFAdd %107 %108 
                                                      OpStore %89 %109 
                              Uniform f32_4* %110 = OpAccessChain %25 %92 %65 
                                       f32_4 %111 = OpLoad %110 
                                       f32_4 %112 = OpLoad %63 
                                       f32_4 %113 = OpVectorShuffle %112 %112 3 3 3 3 
                                       f32_4 %114 = OpFMul %111 %113 
                                       f32_4 %115 = OpLoad %89 
                                       f32_4 %116 = OpFAdd %114 %115 
                                                      OpStore %63 %116 
                                       f32_4 %122 = OpLoad %63 
                               Output f32_4* %124 = OpAccessChain %121 %48 
                                                      OpStore %124 %122 
                                       f32_4 %127 = OpLoad %126 
                                                      OpStore %125 %127 
                                       f32_2 %132 = OpLoad %131 
                                                      OpStore vs_TEXCOORD0 %132 
                              Uniform f32_4* %135 = OpAccessChain %25 %43 
                                       f32_4 %136 = OpLoad %135 
                                       f32_2 %137 = OpVectorShuffle %136 %136 1 1 
                              Uniform f32_4* %139 = OpAccessChain %25 %138 %43 
                                       f32_4 %140 = OpLoad %139 
                                       f32_2 %141 = OpVectorShuffle %140 %140 0 1 
                                       f32_2 %142 = OpFMul %137 %141 
                                                      OpStore %134 %142 
                              Uniform f32_4* %143 = OpAccessChain %25 %138 %48 
                                       f32_4 %144 = OpLoad %143 
                                       f32_2 %145 = OpVectorShuffle %144 %144 0 1 
                              Uniform f32_4* %146 = OpAccessChain %25 %43 
                                       f32_4 %147 = OpLoad %146 
                                       f32_2 %148 = OpVectorShuffle %147 %147 0 0 
                                       f32_2 %149 = OpFMul %145 %148 
                                       f32_2 %150 = OpLoad %134 
                                       f32_2 %151 = OpFAdd %149 %150 
                                                      OpStore %134 %151 
                                       f32_2 %152 = OpLoad %134 
                                       f32_2 %153 = OpExtInst %1 4 %152 
                                Uniform f32* %155 = OpAccessChain %25 %154 
                                         f32 %156 = OpLoad %155 
                                Uniform f32* %158 = OpAccessChain %25 %157 
                                         f32 %159 = OpLoad %158 
                                       f32_2 %160 = OpCompositeConstruct %156 %159 
                                       f32_2 %161 = OpFMul %153 %160 
                                                      OpStore %134 %161 
                                       f32_4 %162 = OpLoad %63 
                                       f32_2 %163 = OpVectorShuffle %162 %162 3 3 
                                       f32_2 %164 = OpLoad %134 
                                       f32_2 %165 = OpFDiv %163 %164 
                                                      OpStore %134 %165 
                                       f32_2 %168 = OpLoad %134 
                                       f32_2 %169 = OpLoad %134 
                                         f32 %170 = OpDot %168 %169 
                                                      OpStore %167 %170 
                                Uniform f32* %172 = OpAccessChain %25 %171 
                                         f32 %173 = OpLoad %172 
                                Uniform f32* %175 = OpAccessChain %25 %174 
                                         f32 %176 = OpLoad %175 
                                       f32_2 %177 = OpCompositeConstruct %173 %176 
                                       f32_2 %180 = OpFMul %177 %179 
                                       f32_2 %181 = OpLoad %134 
                                       f32_2 %182 = OpFAdd %180 %181 
                                                      OpStore %134 %182 
                                       f32_2 %184 = OpLoad %134 
                                       f32_2 %185 = OpFDiv %179 %184 
                                       f32_4 %186 = OpLoad vs_TEXCOORD2 
                                       f32_4 %187 = OpVectorShuffle %186 %185 0 1 4 5 
                                                      OpStore vs_TEXCOORD2 %187 
                                         f32 %188 = OpLoad %167 
                                         f32 %189 = OpExtInst %1 32 %188 
                                Private f32* %191 = OpAccessChain %134 %190 
                                                      OpStore %191 %189 
                                  Input f32* %195 = OpAccessChain %193 %117 
                                         f32 %196 = OpLoad %195 
                                         f32 %197 = OpExtInst %1 4 %196 
                                Uniform f32* %199 = OpAccessChain %25 %198 
                                         f32 %200 = OpLoad %199 
                                         f32 %201 = OpFMul %197 %200 
                                                      OpStore %192 %201 
                                Uniform f32* %203 = OpAccessChain %25 %202 
                                         f32 %204 = OpLoad %203 
                                         f32 %206 = OpFAdd %204 %205 
                                                      OpStore %167 %206 
                                         f32 %207 = OpLoad %192 
                                         f32 %208 = OpLoad %167 
                                         f32 %209 = OpFMul %207 %208 
                                                      OpStore %192 %209 
                                         f32 %210 = OpLoad %192 
                                Private f32* %211 = OpAccessChain %134 %190 
                                         f32 %212 = OpLoad %211 
                                         f32 %213 = OpFMul %210 %212 
                                                      OpStore %167 %213 
                                Uniform f32* %215 = OpAccessChain %25 %214 
                                         f32 %216 = OpLoad %215 
                                         f32 %217 = OpFNegate %216 
                                         f32 %218 = OpFAdd %217 %205 
                                Private f32* %219 = OpAccessChain %63 %190 
                                                      OpStore %219 %218 
                                         f32 %220 = OpLoad %167 
                                         f32 %221 = OpExtInst %1 4 %220 
                                Private f32* %222 = OpAccessChain %63 %190 
                                         f32 %223 = OpLoad %222 
                                         f32 %224 = OpFMul %221 %223 
                                Private f32* %225 = OpAccessChain %63 %190 
                                                      OpStore %225 %224 
                                Private f32* %226 = OpAccessChain %134 %190 
                                         f32 %227 = OpLoad %226 
                                         f32 %228 = OpLoad %192 
                                         f32 %229 = OpFMul %227 %228 
                                Private f32* %230 = OpAccessChain %63 %190 
                                         f32 %231 = OpLoad %230 
                                         f32 %232 = OpFNegate %231 
                                         f32 %233 = OpFAdd %229 %232 
                                Private f32* %234 = OpAccessChain %134 %190 
                                                      OpStore %234 %233 
                                       f32_3 %237 = OpLoad %236 
                              Uniform f32_4* %238 = OpAccessChain %25 %65 %48 
                                       f32_4 %239 = OpLoad %238 
                                       f32_3 %240 = OpVectorShuffle %239 %239 0 1 2 
                                         f32 %241 = OpDot %237 %240 
                                Private f32* %242 = OpAccessChain %89 %190 
                                                      OpStore %242 %241 
                                       f32_3 %243 = OpLoad %236 
                              Uniform f32_4* %244 = OpAccessChain %25 %65 %43 
                                       f32_4 %245 = OpLoad %244 
                                       f32_3 %246 = OpVectorShuffle %245 %245 0 1 2 
                                         f32 %247 = OpDot %243 %246 
                                Private f32* %248 = OpAccessChain %89 %117 
                                                      OpStore %248 %247 
                                       f32_3 %249 = OpLoad %236 
                              Uniform f32_4* %250 = OpAccessChain %25 %65 %42 
                                       f32_4 %251 = OpLoad %250 
                                       f32_3 %252 = OpVectorShuffle %251 %251 0 1 2 
                                         f32 %253 = OpDot %249 %252 
                                Private f32* %255 = OpAccessChain %89 %254 
                                                      OpStore %255 %253 
                                       f32_4 %256 = OpLoad %89 
                                       f32_3 %257 = OpVectorShuffle %256 %256 0 1 2 
                                       f32_4 %258 = OpLoad %89 
                                       f32_3 %259 = OpVectorShuffle %258 %258 0 1 2 
                                         f32 %260 = OpDot %257 %259 
                                                      OpStore %192 %260 
                                         f32 %261 = OpLoad %192 
                                         f32 %262 = OpExtInst %1 32 %261 
                                                      OpStore %192 %262 
                                         f32 %264 = OpLoad %192 
                                       f32_3 %265 = OpCompositeConstruct %264 %264 %264 
                                       f32_4 %266 = OpLoad %89 
                                       f32_3 %267 = OpVectorShuffle %266 %266 0 1 2 
                                       f32_3 %268 = OpFMul %265 %267 
                                                      OpStore %263 %268 
                                       f32_4 %269 = OpLoad %39 
                                       f32_3 %270 = OpVectorShuffle %269 %269 0 1 2 
                                       f32_4 %271 = OpLoad %39 
                                       f32_3 %272 = OpVectorShuffle %271 %271 0 1 2 
                                         f32 %273 = OpDot %270 %272 
                                                      OpStore %192 %273 
                                         f32 %274 = OpLoad %192 
                                         f32 %275 = OpExtInst %1 32 %274 
                                                      OpStore %192 %275 
                                         f32 %276 = OpLoad %192 
                                       f32_3 %277 = OpCompositeConstruct %276 %276 %276 
                                       f32_4 %278 = OpLoad %39 
                                       f32_3 %279 = OpVectorShuffle %278 %278 0 1 2 
                                       f32_3 %280 = OpFMul %277 %279 
                                       f32_4 %281 = OpLoad %89 
                                       f32_4 %282 = OpVectorShuffle %281 %280 4 5 6 3 
                                                      OpStore %89 %282 
                                       f32_3 %283 = OpLoad %263 
                                       f32_4 %284 = OpLoad %89 
                                       f32_3 %285 = OpVectorShuffle %284 %284 0 1 2 
                                         f32 %286 = OpDot %283 %285 
                                                      OpStore %192 %286 
                                         f32 %287 = OpLoad %192 
                                         f32 %288 = OpExtInst %1 4 %287 
                                Private f32* %289 = OpAccessChain %134 %190 
                                         f32 %290 = OpLoad %289 
                                         f32 %291 = OpFMul %288 %290 
                                Private f32* %292 = OpAccessChain %63 %190 
                                         f32 %293 = OpLoad %292 
                                         f32 %294 = OpFAdd %291 %293 
                                Private f32* %295 = OpAccessChain %134 %190 
                                                      OpStore %295 %294 
                                Uniform f32* %300 = OpAccessChain %25 %138 %65 %299 
                                         f32 %301 = OpLoad %300 
                                        bool %303 = OpFOrdEqual %301 %302 
                                                      OpStore %298 %303 
                                        bool %304 = OpLoad %298 
                                                      OpSelectionMerge %308 None 
                                                      OpBranchConditional %304 %307 %311 
                                             %307 = OpLabel 
                                Private f32* %309 = OpAccessChain %134 %190 
                                         f32 %310 = OpLoad %309 
                                                      OpStore %306 %310 
                                                      OpBranch %308 
                                             %311 = OpLabel 
                                         f32 %312 = OpLoad %167 
                                                      OpStore %306 %312 
                                                      OpBranch %308 
                                             %308 = OpLabel 
                                         f32 %313 = OpLoad %306 
                                Private f32* %314 = OpAccessChain %263 %190 
                                                      OpStore %314 %313 
                                  Input f32* %316 = OpAccessChain %193 %117 
                                         f32 %317 = OpLoad %316 
                                        bool %318 = OpFOrdGreaterThanEqual %302 %317 
                                                      OpStore %315 %318 
                                        bool %319 = OpLoad %315 
                                         f32 %320 = OpSelect %319 %205 %302 
                                Private f32* %321 = OpAccessChain %134 %190 
                                                      OpStore %321 %320 
                                Uniform f32* %323 = OpAccessChain %25 %322 
                                         f32 %324 = OpLoad %323 
                                         f32 %325 = OpFNegate %324 
                                Uniform f32* %327 = OpAccessChain %25 %326 
                                         f32 %328 = OpLoad %327 
                                         f32 %329 = OpFAdd %325 %328 
                                                      OpStore %192 %329 
                                Private f32* %330 = OpAccessChain %134 %190 
                                         f32 %331 = OpLoad %330 
                                         f32 %332 = OpLoad %192 
                                         f32 %333 = OpFMul %331 %332 
                                Uniform f32* %334 = OpAccessChain %25 %322 
                                         f32 %335 = OpLoad %334 
                                         f32 %336 = OpFAdd %333 %335 
                                Private f32* %337 = OpAccessChain %134 %190 
                                                      OpStore %337 %336 
                                Private f32* %338 = OpAccessChain %134 %190 
                                         f32 %339 = OpLoad %338 
                                         f32 %340 = OpFMul %339 %178 
                                Uniform f32* %342 = OpAccessChain %25 %341 
                                         f32 %343 = OpLoad %342 
                                         f32 %344 = OpFAdd %340 %343 
                                Private f32* %345 = OpAccessChain %134 %190 
                                                      OpStore %345 %344 
                                Private f32* %346 = OpAccessChain %134 %190 
                                         f32 %347 = OpLoad %346 
                                Uniform f32* %349 = OpAccessChain %25 %348 
                                         f32 %350 = OpLoad %349 
                                         f32 %351 = OpFMul %347 %350 
                                Private f32* %352 = OpAccessChain %134 %190 
                                                      OpStore %352 %351 
                                Private f32* %353 = OpAccessChain %134 %190 
                                         f32 %354 = OpLoad %353 
                                         f32 %356 = OpFMul %354 %355 
                                Private f32* %357 = OpAccessChain %263 %254 
                                                      OpStore %357 %356 
                                       f32_3 %359 = OpLoad %263 
                                       f32_2 %360 = OpVectorShuffle %359 %359 0 2 
                                       f32_4 %361 = OpLoad vs_TEXCOORD1 
                                       f32_4 %362 = OpVectorShuffle %361 %360 0 4 2 5 
                                                      OpStore vs_TEXCOORD1 %362 
                                Private f32* %363 = OpAccessChain %263 %190 
                                         f32 %364 = OpLoad %363 
                                         f32 %365 = OpFDiv %355 %364 
                                                      OpStore %192 %365 
                                Uniform f32* %367 = OpAccessChain %25 %366 
                                         f32 %368 = OpLoad %367 
                                         f32 %369 = OpFNegate %368 
                                Uniform f32* %370 = OpAccessChain %25 %348 
                                         f32 %371 = OpLoad %370 
                                         f32 %372 = OpFMul %369 %371 
                                         f32 %373 = OpFAdd %372 %205 
                                                      OpStore %167 %373 
                                Uniform f32* %375 = OpAccessChain %25 %374 
                                         f32 %376 = OpLoad %375 
                                         f32 %377 = OpFNegate %376 
                                Uniform f32* %378 = OpAccessChain %25 %348 
                                         f32 %379 = OpLoad %378 
                                         f32 %380 = OpFMul %377 %379 
                                         f32 %381 = OpLoad %167 
                                         f32 %382 = OpFAdd %380 %381 
                                                      OpStore %167 %382 
                                         f32 %383 = OpLoad %167 
                                         f32 %384 = OpFMul %383 %355 
                                         f32 %385 = OpLoad %192 
                                         f32 %386 = OpFNegate %385 
                                         f32 %387 = OpFAdd %384 %386 
                                                      OpStore %167 %387 
                                Private f32* %388 = OpAccessChain %134 %190 
                                         f32 %389 = OpLoad %388 
                                         f32 %390 = OpFNegate %389 
                                         f32 %391 = OpFMul %390 %355 
                                         f32 %392 = OpLoad %167 
                                         f32 %393 = OpFAdd %391 %392 
                                 Output f32* %395 = OpAccessChain vs_TEXCOORD1 %190 
                                                      OpStore %395 %393 
                                Private f32* %396 = OpAccessChain %134 %190 
                                         f32 %397 = OpLoad %396 
                                         f32 %398 = OpFNegate %397 
                                         f32 %399 = OpFMul %398 %355 
                                         f32 %400 = OpFAdd %399 %355 
                                Private f32* %401 = OpAccessChain %134 %190 
                                                      OpStore %401 %400 
                                         f32 %402 = OpLoad %192 
                                Private f32* %403 = OpAccessChain %134 %190 
                                         f32 %404 = OpLoad %403 
                                         f32 %405 = OpFAdd %402 %404 
                                 Output f32* %406 = OpAccessChain vs_TEXCOORD1 %254 
                                                      OpStore %406 %405 
                              Uniform f32_4* %408 = OpAccessChain %25 %407 
                                       f32_4 %409 = OpLoad %408 
                                       f32_4 %412 = OpExtInst %1 40 %409 %411 
                                                      OpStore %63 %412 
                                       f32_4 %413 = OpLoad %63 
                                       f32_4 %416 = OpExtInst %1 37 %413 %415 
                                                      OpStore %63 %416 
                                       f32_3 %417 = OpLoad %9 
                                       f32_2 %418 = OpVectorShuffle %417 %417 0 1 
                                       f32_2 %421 = OpFMul %418 %420 
                                       f32_4 %422 = OpLoad %63 
                                       f32_2 %423 = OpVectorShuffle %422 %422 0 1 
                                       f32_2 %424 = OpFNegate %423 
                                       f32_2 %425 = OpFAdd %421 %424 
                                       f32_3 %426 = OpLoad %9 
                                       f32_3 %427 = OpVectorShuffle %426 %425 3 4 2 
                                                      OpStore %9 %427 
                                       f32_4 %428 = OpLoad %63 
                                       f32_2 %429 = OpVectorShuffle %428 %428 2 3 
                                       f32_2 %430 = OpFNegate %429 
                                       f32_3 %431 = OpLoad %9 
                                       f32_2 %432 = OpVectorShuffle %431 %431 0 1 
                                       f32_2 %433 = OpFAdd %430 %432 
                                       f32_4 %434 = OpLoad vs_TEXCOORD2 
                                       f32_4 %435 = OpVectorShuffle %434 %433 4 5 2 3 
                                                      OpStore vs_TEXCOORD2 %435 
                                       f32_4 %436 = OpLoad %39 
                                       f32_3 %437 = OpVectorShuffle %436 %436 1 1 1 
                              Uniform f32_4* %439 = OpAccessChain %25 %438 %43 
                                       f32_4 %440 = OpLoad %439 
                                       f32_3 %441 = OpVectorShuffle %440 %440 0 1 2 
                                       f32_3 %442 = OpFMul %437 %441 
                                                      OpStore %9 %442 
                              Uniform f32_4* %443 = OpAccessChain %25 %438 %48 
                                       f32_4 %444 = OpLoad %443 
                                       f32_3 %445 = OpVectorShuffle %444 %444 0 1 2 
                                       f32_4 %446 = OpLoad %39 
                                       f32_3 %447 = OpVectorShuffle %446 %446 0 0 0 
                                       f32_3 %448 = OpFMul %445 %447 
                                       f32_3 %449 = OpLoad %9 
                                       f32_3 %450 = OpFAdd %448 %449 
                                                      OpStore %9 %450 
                              Uniform f32_4* %453 = OpAccessChain %25 %438 %42 
                                       f32_4 %454 = OpLoad %453 
                                       f32_3 %455 = OpVectorShuffle %454 %454 0 1 2 
                                       f32_4 %456 = OpLoad %39 
                                       f32_3 %457 = OpVectorShuffle %456 %456 2 2 2 
                                       f32_3 %458 = OpFMul %455 %457 
                                       f32_3 %459 = OpLoad %9 
                                       f32_3 %460 = OpFAdd %458 %459 
                                                      OpStore vs_TEXCOORD3 %460 
                                  Input f32* %461 = OpAccessChain %193 %190 
                                         f32 %462 = OpLoad %461 
                                         f32 %464 = OpFMul %462 %463 
                                Private f32* %465 = OpAccessChain %9 %190 
                                                      OpStore %465 %464 
                                Private f32* %466 = OpAccessChain %9 %190 
                                         f32 %467 = OpLoad %466 
                                         f32 %468 = OpExtInst %1 8 %467 
                                Private f32* %469 = OpAccessChain %134 %190 
                                                      OpStore %469 %468 
                                Private f32* %470 = OpAccessChain %134 %190 
                                         f32 %471 = OpLoad %470 
                                         f32 %472 = OpFNegate %471 
                                         f32 %474 = OpFMul %472 %473 
                                  Input f32* %475 = OpAccessChain %193 %190 
                                         f32 %476 = OpLoad %475 
                                         f32 %477 = OpFAdd %474 %476 
                                Private f32* %478 = OpAccessChain %134 %117 
                                                      OpStore %478 %477 
                                       f32_2 %479 = OpLoad %134 
                                       f32_2 %482 = OpFMul %479 %481 
                                       f32_3 %483 = OpLoad %9 
                                       f32_3 %484 = OpVectorShuffle %483 %482 3 4 2 
                                                      OpStore %9 %484 
                                       f32_3 %486 = OpLoad %9 
                                       f32_2 %487 = OpVectorShuffle %486 %486 0 1 
                              Uniform f32_4* %489 = OpAccessChain %25 %488 
                                       f32_4 %490 = OpLoad %489 
                                       f32_2 %491 = OpVectorShuffle %490 %490 0 1 
                                       f32_2 %492 = OpFMul %487 %491 
                              Uniform f32_4* %493 = OpAccessChain %25 %488 
                                       f32_4 %494 = OpLoad %493 
                                       f32_2 %495 = OpVectorShuffle %494 %494 2 3 
                                       f32_2 %496 = OpFAdd %492 %495 
                                       f32_4 %497 = OpLoad vs_TEXCOORD5 
                                       f32_4 %498 = OpVectorShuffle %497 %496 4 5 2 3 
                                                      OpStore vs_TEXCOORD5 %498 
                                       f32_3 %499 = OpLoad %9 
                                       f32_2 %500 = OpVectorShuffle %499 %499 0 1 
                              Uniform f32_4* %502 = OpAccessChain %25 %501 
                                       f32_4 %503 = OpLoad %502 
                                       f32_2 %504 = OpVectorShuffle %503 %503 0 1 
                                       f32_2 %505 = OpFMul %500 %504 
                              Uniform f32_4* %506 = OpAccessChain %25 %501 
                                       f32_4 %507 = OpLoad %506 
                                       f32_2 %508 = OpVectorShuffle %507 %507 2 3 
                                       f32_2 %509 = OpFAdd %505 %508 
                                       f32_4 %510 = OpLoad vs_TEXCOORD5 
                                       f32_4 %511 = OpVectorShuffle %510 %509 0 1 4 5 
                                                      OpStore vs_TEXCOORD5 %511 
                                 Output f32* %512 = OpAccessChain %121 %48 %117 
                                         f32 %513 = OpLoad %512 
                                         f32 %514 = OpFNegate %513 
                                 Output f32* %515 = OpAccessChain %121 %48 %117 
                                                      OpStore %515 %514 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 301
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %22 %35 %128 %149 %285 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpDecorate %9 RelaxedPrecision 
                                                      OpDecorate %12 RelaxedPrecision 
                                                      OpDecorate %12 DescriptorSet 12 
                                                      OpDecorate %12 Binding 12 
                                                      OpDecorate %13 RelaxedPrecision 
                                                      OpDecorate %16 RelaxedPrecision 
                                                      OpDecorate %16 DescriptorSet 16 
                                                      OpDecorate %16 Binding 16 
                                                      OpDecorate %17 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD0 Location 22 
                                                      OpDecorate %27 RelaxedPrecision 
                                                      OpDecorate %33 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD1 Location 35 
                                                      OpDecorate %45 RelaxedPrecision 
                                                      OpDecorate %46 RelaxedPrecision 
                                                      OpMemberDecorate %69 0 Offset 69 
                                                      OpMemberDecorate %69 1 Offset 69 
                                                      OpMemberDecorate %69 2 Offset 69 
                                                      OpMemberDecorate %69 3 RelaxedPrecision 
                                                      OpMemberDecorate %69 3 Offset 69 
                                                      OpMemberDecorate %69 4 Offset 69 
                                                      OpMemberDecorate %69 5 Offset 69 
                                                      OpMemberDecorate %69 6 Offset 69 
                                                      OpMemberDecorate %69 7 RelaxedPrecision 
                                                      OpMemberDecorate %69 7 Offset 69 
                                                      OpMemberDecorate %69 8 Offset 69 
                                                      OpMemberDecorate %69 9 Offset 69 
                                                      OpDecorate %69 Block 
                                                      OpDecorate %71 DescriptorSet 71 
                                                      OpDecorate %71 Binding 71 
                                                      OpDecorate %85 RelaxedPrecision 
                                                      OpDecorate %89 RelaxedPrecision 
                                                      OpDecorate %93 RelaxedPrecision 
                                                      OpDecorate %94 RelaxedPrecision 
                                                      OpDecorate %95 RelaxedPrecision 
                                                      OpDecorate %101 RelaxedPrecision 
                                                      OpDecorate %103 RelaxedPrecision 
                                                      OpDecorate %104 RelaxedPrecision 
                                                      OpDecorate %110 RelaxedPrecision 
                                                      OpDecorate %111 RelaxedPrecision 
                                                      OpDecorate %113 RelaxedPrecision 
                                                      OpDecorate %114 RelaxedPrecision 
                                                      OpDecorate %115 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD5 Location 128 
                                                      OpDecorate %134 RelaxedPrecision 
                                                      OpDecorate %134 DescriptorSet 134 
                                                      OpDecorate %134 Binding 134 
                                                      OpDecorate %135 RelaxedPrecision 
                                                      OpDecorate %136 RelaxedPrecision 
                                                      OpDecorate %136 DescriptorSet 136 
                                                      OpDecorate %136 Binding 136 
                                                      OpDecorate %137 RelaxedPrecision 
                                                      OpDecorate %143 RelaxedPrecision 
                                                      OpDecorate %146 RelaxedPrecision 
                                                      OpDecorate %147 RelaxedPrecision 
                                                      OpDecorate %148 RelaxedPrecision 
                                                      OpDecorate %149 RelaxedPrecision 
                                                      OpDecorate %149 Location 149 
                                                      OpDecorate %150 RelaxedPrecision 
                                                      OpDecorate %151 RelaxedPrecision 
                                                      OpDecorate %154 RelaxedPrecision 
                                                      OpDecorate %155 RelaxedPrecision 
                                                      OpDecorate %156 RelaxedPrecision 
                                                      OpDecorate %174 RelaxedPrecision 
                                                      OpDecorate %175 RelaxedPrecision 
                                                      OpDecorate %175 DescriptorSet 175 
                                                      OpDecorate %175 Binding 175 
                                                      OpDecorate %176 RelaxedPrecision 
                                                      OpDecorate %177 RelaxedPrecision 
                                                      OpDecorate %177 DescriptorSet 177 
                                                      OpDecorate %177 Binding 177 
                                                      OpDecorate %178 RelaxedPrecision 
                                                      OpDecorate %183 RelaxedPrecision 
                                                      OpDecorate %184 RelaxedPrecision 
                                                      OpDecorate %185 RelaxedPrecision 
                                                      OpDecorate %186 RelaxedPrecision 
                                                      OpDecorate %187 RelaxedPrecision 
                                                      OpDecorate %190 RelaxedPrecision 
                                                      OpDecorate %192 RelaxedPrecision 
                                                      OpDecorate %193 RelaxedPrecision 
                                                      OpDecorate %200 RelaxedPrecision 
                                                      OpDecorate %206 RelaxedPrecision 
                                                      OpDecorate %207 RelaxedPrecision 
                                                      OpDecorate %208 RelaxedPrecision 
                                                      OpDecorate %213 RelaxedPrecision 
                                                      OpDecorate %215 RelaxedPrecision 
                                                      OpDecorate %216 RelaxedPrecision 
                                                      OpDecorate %221 RelaxedPrecision 
                                                      OpDecorate %222 RelaxedPrecision 
                                                      OpDecorate %223 RelaxedPrecision 
                                                      OpDecorate %224 RelaxedPrecision 
                                                      OpDecorate %226 RelaxedPrecision 
                                                      OpDecorate %228 RelaxedPrecision 
                                                      OpDecorate %229 RelaxedPrecision 
                                                      OpDecorate %231 RelaxedPrecision 
                                                      OpDecorate %232 RelaxedPrecision 
                                                      OpDecorate %238 RelaxedPrecision 
                                                      OpDecorate %239 RelaxedPrecision 
                                                      OpDecorate %263 RelaxedPrecision 
                                                      OpDecorate %265 RelaxedPrecision 
                                                      OpDecorate %266 RelaxedPrecision 
                                                      OpDecorate %267 RelaxedPrecision 
                                                      OpDecorate %268 RelaxedPrecision 
                                                      OpDecorate %269 RelaxedPrecision 
                                                      OpDecorate %270 RelaxedPrecision 
                                                      OpDecorate %271 RelaxedPrecision 
                                                      OpDecorate %272 RelaxedPrecision 
                                                      OpDecorate %274 RelaxedPrecision 
                                                      OpDecorate %275 RelaxedPrecision 
                                                      OpDecorate %276 RelaxedPrecision 
                                                      OpDecorate %278 RelaxedPrecision 
                                                      OpDecorate %279 RelaxedPrecision 
                                                      OpDecorate %280 RelaxedPrecision 
                                                      OpDecorate %281 RelaxedPrecision 
                                                      OpDecorate %282 RelaxedPrecision 
                                                      OpDecorate %283 RelaxedPrecision 
                                                      OpDecorate %285 RelaxedPrecision 
                                                      OpDecorate %285 Location 285 
                                                      OpDecorate %286 RelaxedPrecision 
                                                      OpDecorate %287 RelaxedPrecision 
                                                      OpDecorate %288 RelaxedPrecision 
                                                      OpDecorate %289 RelaxedPrecision 
                                                      OpDecorate %291 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypePointer UniformConstant %10 
         UniformConstant read_only Texture2D* %12 = OpVariable UniformConstant 
                                              %14 = OpTypeSampler 
                                              %15 = OpTypePointer UniformConstant %14 
                     UniformConstant sampler* %16 = OpVariable UniformConstant 
                                              %18 = OpTypeSampledImage %10 
                                              %20 = OpTypeVector %6 2 
                                              %21 = OpTypePointer Input %20 
                        Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                              %25 = OpTypeInt 32 0 
                                          u32 %26 = OpConstant 3 
                                          u32 %28 = OpConstant 0 
                                              %29 = OpTypePointer Private %6 
                                 Private f32* %31 = OpVariable Private 
                                              %34 = OpTypePointer Input %7 
                        Input f32_4* vs_TEXCOORD1 = OpVariable Input 
                                              %36 = OpTypePointer Input %6 
                                              %41 = OpTypeVector %6 3 
                                              %42 = OpTypePointer Private %41 
                               Private f32_3* %43 = OpVariable Private 
                                          u32 %47 = OpConstant 2 
                                              %52 = OpTypeBool 
                                              %53 = OpTypePointer Private %52 
                                Private bool* %54 = OpVariable Private 
                                          f32 %56 = OpConstant 3.674022E-40 
                                              %59 = OpTypeInt 32 1 
                                          i32 %60 = OpConstant 0 
                                          i32 %61 = OpConstant 1 
                                          i32 %63 = OpConstant -1 
                                              %69 = OpTypeStruct %7 %6 %6 %7 %6 %6 %6 %7 %6 %6 
                                              %70 = OpTypePointer Uniform %69 
Uniform struct {f32_4; f32; f32; f32_4; f32; f32; f32; f32_4; f32; f32;}* %71 = OpVariable Uniform 
                                          i32 %72 = OpConstant 8 
                                              %73 = OpTypePointer Uniform %6 
                                          i32 %76 = OpConstant 9 
                                          u32 %81 = OpConstant 1 
                                 Private f32* %85 = OpVariable Private 
                                          f32 %87 = OpConstant 3.674022E-40 
                                 Private f32* %89 = OpVariable Private 
                                          f32 %91 = OpConstant 3.674022E-40 
                                 Private f32* %95 = OpVariable Private 
                                         i32 %116 = OpConstant 5 
                                         i32 %119 = OpConstant 6 
                                             %123 = OpTypePointer Uniform %7 
                        Input f32_4* vs_TEXCOORD5 = OpVariable Input 
        UniformConstant read_only Texture2D* %134 = OpVariable UniformConstant 
                    UniformConstant sampler* %136 = OpVariable UniformConstant 
                              Private f32_4* %142 = OpVariable Private 
                                         i32 %144 = OpConstant 7 
                              Private f32_4* %148 = OpVariable Private 
                                Input f32_4* %149 = OpVariable Input 
                                         i32 %152 = OpConstant 3 
                                         i32 %161 = OpConstant 2 
                              Private f32_4* %174 = OpVariable Private 
        UniformConstant read_only Texture2D* %175 = OpVariable UniformConstant 
                    UniformConstant sampler* %177 = OpVariable UniformConstant 
                                Private f32* %188 = OpVariable Private 
                              Private f32_4* %200 = OpVariable Private 
                                         i32 %243 = OpConstant 4 
                                         f32 %277 = OpConstant 3.674022E-40 
                              Private f32_4* %279 = OpVariable Private 
                                             %284 = OpTypePointer Output %7 
                               Output f32_4* %285 = OpVariable Output 
                               Private bool* %290 = OpVariable Private 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                          read_only Texture2D %13 = OpLoad %12 
                                      sampler %17 = OpLoad %16 
                   read_only Texture2DSampled %19 = OpSampledImage %13 %17 
                                        f32_2 %23 = OpLoad vs_TEXCOORD0 
                                        f32_4 %24 = OpImageSampleImplicitLod %19 %23 
                                          f32 %27 = OpCompositeExtract %24 3 
                                 Private f32* %30 = OpAccessChain %9 %28 
                                                      OpStore %30 %27 
                                 Private f32* %32 = OpAccessChain %9 %28 
                                          f32 %33 = OpLoad %32 
                                   Input f32* %37 = OpAccessChain vs_TEXCOORD1 %28 
                                          f32 %38 = OpLoad %37 
                                          f32 %39 = OpFNegate %38 
                                          f32 %40 = OpFAdd %33 %39 
                                                      OpStore %31 %40 
                                 Private f32* %44 = OpAccessChain %9 %28 
                                          f32 %45 = OpLoad %44 
                                          f32 %46 = OpFNegate %45 
                                   Input f32* %48 = OpAccessChain vs_TEXCOORD1 %47 
                                          f32 %49 = OpLoad %48 
                                          f32 %50 = OpFAdd %46 %49 
                                 Private f32* %51 = OpAccessChain %43 %28 
                                                      OpStore %51 %50 
                                          f32 %55 = OpLoad %31 
                                         bool %57 = OpFOrdLessThan %55 %56 
                                                      OpStore %54 %57 
                                         bool %58 = OpLoad %54 
                                          i32 %62 = OpSelect %58 %61 %60 
                                          i32 %64 = OpIMul %62 %63 
                                         bool %65 = OpINotEqual %64 %60 
                                                      OpSelectionMerge %67 None 
                                                      OpBranchConditional %65 %66 %67 
                                              %66 = OpLabel 
                                                      OpKill
                                              %67 = OpLabel 
                                 Uniform f32* %74 = OpAccessChain %71 %72 
                                          f32 %75 = OpLoad %74 
                                 Uniform f32* %77 = OpAccessChain %71 %76 
                                          f32 %78 = OpLoad %77 
                                          f32 %79 = OpFMul %75 %78 
                                                      OpStore %31 %79 
                                          f32 %80 = OpLoad %31 
                                   Input f32* %82 = OpAccessChain vs_TEXCOORD1 %81 
                                          f32 %83 = OpLoad %82 
                                          f32 %84 = OpFMul %80 %83 
                                                      OpStore %31 %84 
                                          f32 %86 = OpLoad %31 
                                          f32 %88 = OpExtInst %1 37 %86 %87 
                                                      OpStore %85 %88 
                                          f32 %90 = OpLoad %31 
                                          f32 %92 = OpFMul %90 %91 
                                                      OpStore %89 %92 
                                          f32 %93 = OpLoad %85 
                                          f32 %94 = OpExtInst %1 31 %93 
                                                      OpStore %85 %94 
                                 Private f32* %96 = OpAccessChain %43 %28 
                                          f32 %97 = OpLoad %96 
                                   Input f32* %98 = OpAccessChain vs_TEXCOORD1 %81 
                                          f32 %99 = OpLoad %98 
                                         f32 %100 = OpFMul %97 %99 
                                         f32 %101 = OpLoad %89 
                                         f32 %102 = OpFAdd %100 %101 
                                                      OpStore %95 %102 
                                         f32 %103 = OpLoad %95 
                                         f32 %104 = OpExtInst %1 43 %103 %56 %87 
                                                      OpStore %95 %104 
                                Private f32* %105 = OpAccessChain %43 %28 
                                         f32 %106 = OpLoad %105 
                                  Input f32* %107 = OpAccessChain vs_TEXCOORD1 %81 
                                         f32 %108 = OpLoad %107 
                                         f32 %109 = OpFMul %106 %108 
                                         f32 %110 = OpLoad %89 
                                         f32 %111 = OpFNegate %110 
                                         f32 %112 = OpFAdd %109 %111 
                                                      OpStore %89 %112 
                                         f32 %113 = OpLoad %85 
                                         f32 %114 = OpLoad %95 
                                         f32 %115 = OpFMul %113 %114 
                                                      OpStore %85 %115 
                                Uniform f32* %117 = OpAccessChain %71 %116 
                                         f32 %118 = OpLoad %117 
                                Uniform f32* %120 = OpAccessChain %71 %119 
                                         f32 %121 = OpLoad %120 
                                       f32_2 %122 = OpCompositeConstruct %118 %121 
                              Uniform f32_4* %124 = OpAccessChain %71 %60 
                                       f32_4 %125 = OpLoad %124 
                                       f32_2 %126 = OpVectorShuffle %125 %125 1 1 
                                       f32_2 %127 = OpFMul %122 %126 
                                       f32_4 %129 = OpLoad vs_TEXCOORD5 
                                       f32_2 %130 = OpVectorShuffle %129 %129 2 3 
                                       f32_2 %131 = OpFAdd %127 %130 
                                       f32_3 %132 = OpLoad %43 
                                       f32_3 %133 = OpVectorShuffle %132 %131 3 4 2 
                                                      OpStore %43 %133 
                         read_only Texture2D %135 = OpLoad %134 
                                     sampler %137 = OpLoad %136 
                  read_only Texture2DSampled %138 = OpSampledImage %135 %137 
                                       f32_3 %139 = OpLoad %43 
                                       f32_2 %140 = OpVectorShuffle %139 %139 0 1 
                                       f32_4 %141 = OpImageSampleImplicitLod %138 %140 
                                                      OpStore %9 %141 
                                       f32_4 %143 = OpLoad %9 
                              Uniform f32_4* %145 = OpAccessChain %71 %144 
                                       f32_4 %146 = OpLoad %145 
                                       f32_4 %147 = OpFMul %143 %146 
                                                      OpStore %142 %147 
                                       f32_4 %150 = OpLoad %149 
                                       f32_3 %151 = OpVectorShuffle %150 %150 0 1 2 
                              Uniform f32_4* %153 = OpAccessChain %71 %152 
                                       f32_4 %154 = OpLoad %153 
                                       f32_3 %155 = OpVectorShuffle %154 %154 0 1 2 
                                       f32_3 %156 = OpFMul %151 %155 
                                       f32_4 %157 = OpLoad %148 
                                       f32_4 %158 = OpVectorShuffle %157 %156 4 5 6 3 
                                                      OpStore %148 %158 
                                Uniform f32* %159 = OpAccessChain %71 %61 
                                         f32 %160 = OpLoad %159 
                                Uniform f32* %162 = OpAccessChain %71 %161 
                                         f32 %163 = OpLoad %162 
                                       f32_2 %164 = OpCompositeConstruct %160 %163 
                              Uniform f32_4* %165 = OpAccessChain %71 %60 
                                       f32_4 %166 = OpLoad %165 
                                       f32_2 %167 = OpVectorShuffle %166 %166 1 1 
                                       f32_2 %168 = OpFMul %164 %167 
                                       f32_4 %169 = OpLoad vs_TEXCOORD5 
                                       f32_2 %170 = OpVectorShuffle %169 %169 0 1 
                                       f32_2 %171 = OpFAdd %168 %170 
                                       f32_3 %172 = OpLoad %43 
                                       f32_3 %173 = OpVectorShuffle %172 %171 3 4 2 
                                                      OpStore %43 %173 
                         read_only Texture2D %176 = OpLoad %175 
                                     sampler %178 = OpLoad %177 
                  read_only Texture2DSampled %179 = OpSampledImage %176 %178 
                                       f32_3 %180 = OpLoad %43 
                                       f32_2 %181 = OpVectorShuffle %180 %180 0 1 
                                       f32_4 %182 = OpImageSampleImplicitLod %179 %181 
                                                      OpStore %174 %182 
                                       f32_4 %183 = OpLoad %148 
                                       f32_3 %184 = OpVectorShuffle %183 %183 0 1 2 
                                       f32_4 %185 = OpLoad %174 
                                       f32_3 %186 = OpVectorShuffle %185 %185 0 1 2 
                                       f32_3 %187 = OpFMul %184 %186 
                                                      OpStore %43 %187 
                                Private f32* %189 = OpAccessChain %174 %26 
                                         f32 %190 = OpLoad %189 
                                Uniform f32* %191 = OpAccessChain %71 %152 %26 
                                         f32 %192 = OpLoad %191 
                                         f32 %193 = OpFMul %190 %192 
                                                      OpStore %188 %193 
                                       f32_3 %194 = OpLoad %43 
                                         f32 %195 = OpLoad %188 
                                       f32_3 %196 = OpCompositeConstruct %195 %195 %195 
                                       f32_3 %197 = OpFMul %194 %196 
                                       f32_4 %198 = OpLoad %148 
                                       f32_4 %199 = OpVectorShuffle %198 %197 4 5 6 3 
                                                      OpStore %148 %199 
                                       f32_4 %201 = OpLoad %142 
                                       f32_3 %202 = OpVectorShuffle %201 %201 0 1 2 
                                       f32_4 %203 = OpLoad %142 
                                       f32_3 %204 = OpVectorShuffle %203 %203 3 3 3 
                                       f32_3 %205 = OpFMul %202 %204 
                                       f32_4 %206 = OpLoad %148 
                                       f32_3 %207 = OpVectorShuffle %206 %206 0 1 2 
                                       f32_3 %208 = OpFNegate %207 
                                       f32_3 %209 = OpFAdd %205 %208 
                                       f32_4 %210 = OpLoad %200 
                                       f32_4 %211 = OpVectorShuffle %210 %209 4 5 6 3 
                                                      OpStore %200 %211 
                                Uniform f32* %212 = OpAccessChain %71 %144 %26 
                                         f32 %213 = OpLoad %212 
                                Private f32* %214 = OpAccessChain %9 %26 
                                         f32 %215 = OpLoad %214 
                                         f32 %216 = OpFMul %213 %215 
                                         f32 %217 = OpLoad %188 
                                         f32 %218 = OpFNegate %217 
                                         f32 %219 = OpFAdd %216 %218 
                                Private f32* %220 = OpAccessChain %200 %26 
                                                      OpStore %220 %219 
                                         f32 %221 = OpLoad %85 
                                       f32_4 %222 = OpCompositeConstruct %221 %221 %221 %221 
                                       f32_4 %223 = OpLoad %200 
                                       f32_4 %224 = OpFMul %222 %223 
                                                      OpStore %200 %224 
                                Uniform f32* %225 = OpAccessChain %71 %152 %26 
                                         f32 %226 = OpLoad %225 
                                Private f32* %227 = OpAccessChain %174 %26 
                                         f32 %228 = OpLoad %227 
                                         f32 %229 = OpFMul %226 %228 
                                Private f32* %230 = OpAccessChain %200 %26 
                                         f32 %231 = OpLoad %230 
                                         f32 %232 = OpFAdd %229 %231 
                                Private f32* %233 = OpAccessChain %148 %26 
                                                      OpStore %233 %232 
                                       f32_3 %234 = OpLoad %43 
                                         f32 %235 = OpLoad %188 
                                       f32_3 %236 = OpCompositeConstruct %235 %235 %235 
                                       f32_3 %237 = OpFMul %234 %236 
                                       f32_4 %238 = OpLoad %200 
                                       f32_3 %239 = OpVectorShuffle %238 %238 0 1 2 
                                       f32_3 %240 = OpFAdd %237 %239 
                                       f32_4 %241 = OpLoad %148 
                                       f32_4 %242 = OpVectorShuffle %241 %240 4 5 6 3 
                                                      OpStore %148 %242 
                                Uniform f32* %244 = OpAccessChain %71 %243 
                                         f32 %245 = OpLoad %244 
                                Uniform f32* %246 = OpAccessChain %71 %76 
                                         f32 %247 = OpLoad %246 
                                         f32 %248 = OpFMul %245 %247 
                                Private f32* %249 = OpAccessChain %43 %28 
                                                      OpStore %249 %248 
                                Private f32* %250 = OpAccessChain %43 %28 
                                         f32 %251 = OpLoad %250 
                                  Input f32* %252 = OpAccessChain vs_TEXCOORD1 %81 
                                         f32 %253 = OpLoad %252 
                                         f32 %254 = OpFMul %251 %253 
                                                      OpStore %31 %254 
                                Private f32* %255 = OpAccessChain %43 %28 
                                         f32 %256 = OpLoad %255 
                                  Input f32* %257 = OpAccessChain vs_TEXCOORD1 %81 
                                         f32 %258 = OpLoad %257 
                                         f32 %259 = OpFMul %256 %258 
                                         f32 %260 = OpFAdd %259 %87 
                                                      OpStore %85 %260 
                                         f32 %261 = OpLoad %31 
                                         f32 %262 = OpFMul %261 %91 
                                         f32 %263 = OpLoad %89 
                                         f32 %264 = OpFAdd %262 %263 
                                                      OpStore %89 %264 
                                         f32 %265 = OpLoad %89 
                                         f32 %266 = OpLoad %85 
                                         f32 %267 = OpFDiv %265 %266 
                                                      OpStore %85 %267 
                                         f32 %268 = OpLoad %85 
                                         f32 %269 = OpExtInst %1 43 %268 %56 %87 
                                                      OpStore %85 %269 
                                         f32 %270 = OpLoad %85 
                                         f32 %271 = OpFNegate %270 
                                         f32 %272 = OpFAdd %271 %87 
                                                      OpStore %85 %272 
                                Private f32* %273 = OpAccessChain %148 %26 
                                         f32 %274 = OpLoad %273 
                                         f32 %275 = OpLoad %85 
                                         f32 %276 = OpFMul %274 %275 
                                         f32 %278 = OpFAdd %276 %277 
                                                      OpStore %89 %278 
                                         f32 %280 = OpLoad %85 
                                       f32_4 %281 = OpCompositeConstruct %280 %280 %280 %280 
                                       f32_4 %282 = OpLoad %148 
                                       f32_4 %283 = OpFMul %281 %282 
                                                      OpStore %279 %283 
                                       f32_4 %286 = OpLoad %279 
                                       f32_4 %287 = OpLoad %149 
                                       f32_4 %288 = OpVectorShuffle %287 %287 3 3 3 3 
                                       f32_4 %289 = OpFMul %286 %288 
                                                      OpStore %285 %289 
                                         f32 %291 = OpLoad %89 
                                        bool %292 = OpFOrdLessThan %291 %56 
                                                      OpStore %290 %292 
                                        bool %293 = OpLoad %290 
                                         i32 %294 = OpSelect %293 %61 %60 
                                         i32 %295 = OpIMul %294 %63 
                                        bool %296 = OpINotEqual %295 %60 
                                                      OpSelectionMerge %298 None 
                                                      OpBranchConditional %296 %297 %298 
                                             %297 = OpLabel 
                                                      OpKill
                                             %298 = OpLabel 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "vulkan hw_tier01 " {
Keywords { "UNITY_UI_ALPHACLIP" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 517
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %12 %121 %125 %126 %129 %131 %183 %193 %236 %358 %452 %485 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpDecorate %12 Location 12 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpDecorate %19 ArrayStride 19 
                                                      OpDecorate %20 ArrayStride 20 
                                                      OpDecorate %21 ArrayStride 21 
                                                      OpDecorate %22 ArrayStride 22 
                                                      OpMemberDecorate %23 0 Offset 23 
                                                      OpMemberDecorate %23 1 Offset 23 
                                                      OpMemberDecorate %23 2 Offset 23 
                                                      OpMemberDecorate %23 3 Offset 23 
                                                      OpMemberDecorate %23 4 Offset 23 
                                                      OpMemberDecorate %23 5 Offset 23 
                                                      OpMemberDecorate %23 6 Offset 23 
                                                      OpMemberDecorate %23 7 Offset 23 
                                                      OpMemberDecorate %23 8 Offset 23 
                                                      OpMemberDecorate %23 9 Offset 23 
                                                      OpMemberDecorate %23 10 Offset 23 
                                                      OpMemberDecorate %23 11 Offset 23 
                                                      OpMemberDecorate %23 12 Offset 23 
                                                      OpMemberDecorate %23 13 Offset 23 
                                                      OpMemberDecorate %23 14 Offset 23 
                                                      OpMemberDecorate %23 15 Offset 23 
                                                      OpMemberDecorate %23 16 Offset 23 
                                                      OpMemberDecorate %23 17 Offset 23 
                                                      OpMemberDecorate %23 18 Offset 23 
                                                      OpMemberDecorate %23 19 Offset 23 
                                                      OpMemberDecorate %23 20 Offset 23 
                                                      OpMemberDecorate %23 21 Offset 23 
                                                      OpMemberDecorate %23 22 Offset 23 
                                                      OpMemberDecorate %23 23 Offset 23 
                                                      OpMemberDecorate %23 24 Offset 23 
                                                      OpDecorate %23 Block 
                                                      OpDecorate %25 DescriptorSet 25 
                                                      OpDecorate %25 Binding 25 
                                                      OpMemberDecorate %119 0 BuiltIn 119 
                                                      OpMemberDecorate %119 1 BuiltIn 119 
                                                      OpMemberDecorate %119 2 BuiltIn 119 
                                                      OpDecorate %119 Block 
                                                      OpDecorate %125 RelaxedPrecision 
                                                      OpDecorate %125 Location 125 
                                                      OpDecorate %126 RelaxedPrecision 
                                                      OpDecorate %126 Location 126 
                                                      OpDecorate %127 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD0 Location 129 
                                                      OpDecorate %131 Location 131 
                                                      OpDecorate vs_TEXCOORD2 Location 183 
                                                      OpDecorate %193 Location 193 
                                                      OpDecorate %236 Location 236 
                                                      OpDecorate vs_TEXCOORD1 Location 358 
                                                      OpDecorate vs_TEXCOORD3 Location 452 
                                                      OpDecorate vs_TEXCOORD5 Location 485 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 3 
                                               %8 = OpTypePointer Private %7 
                                Private f32_3* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 4 
                                              %11 = OpTypePointer Input %10 
                                 Input f32_4* %12 = OpVariable Input 
                                              %13 = OpTypeVector %6 2 
                                              %16 = OpTypeInt 32 0 
                                          u32 %17 = OpConstant 4 
                                              %18 = OpTypeArray %10 %17 
                                              %19 = OpTypeArray %10 %17 
                                              %20 = OpTypeArray %10 %17 
                                              %21 = OpTypeArray %10 %17 
                                              %22 = OpTypeArray %10 %17 
                                              %23 = OpTypeStruct %7 %10 %18 %19 %20 %21 %6 %6 %6 %22 %6 %6 %6 %6 %6 %10 %6 %6 %6 %6 %6 %6 %6 %10 %10 
                                              %24 = OpTypePointer Uniform %23 
Uniform struct {f32_3; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4[4]; f32; f32; f32; f32_4[4]; f32; f32; f32; f32; f32; f32_4; f32; f32; f32; f32; f32; f32; f32; f32_4; f32_4;}* %25 = OpVariable Uniform 
                                              %26 = OpTypeInt 32 1 
                                          i32 %27 = OpConstant 13 
                                              %28 = OpTypePointer Uniform %6 
                                          i32 %31 = OpConstant 14 
                                              %38 = OpTypePointer Private %10 
                               Private f32_4* %39 = OpVariable Private 
                                          i32 %42 = OpConstant 2 
                                          i32 %43 = OpConstant 1 
                                              %44 = OpTypePointer Uniform %10 
                                          i32 %48 = OpConstant 0 
                               Private f32_4* %63 = OpVariable Private 
                                          i32 %65 = OpConstant 3 
                                              %83 = OpTypePointer Uniform %7 
                               Private f32_4* %89 = OpVariable Private 
                                          i32 %92 = OpConstant 5 
                                         u32 %117 = OpConstant 1 
                                             %118 = OpTypeArray %6 %117 
                                             %119 = OpTypeStruct %10 %6 %118 
                                             %120 = OpTypePointer Output %119 
        Output struct {f32_4; f32; f32[1];}* %121 = OpVariable Output 
                                             %123 = OpTypePointer Output %10 
                               Output f32_4* %125 = OpVariable Output 
                                Input f32_4* %126 = OpVariable Input 
                                             %128 = OpTypePointer Output %13 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                             %130 = OpTypePointer Input %13 
                                Input f32_2* %131 = OpVariable Input 
                                             %133 = OpTypePointer Private %13 
                              Private f32_2* %134 = OpVariable Private 
                                         i32 %138 = OpConstant 4 
                                         i32 %154 = OpConstant 19 
                                         i32 %157 = OpConstant 20 
                                             %166 = OpTypePointer Private %6 
                                Private f32* %167 = OpVariable Private 
                                         i32 %171 = OpConstant 16 
                                         i32 %174 = OpConstant 17 
                                         f32 %178 = OpConstant 3.674022E-40 
                                       f32_2 %179 = OpConstantComposite %178 %178 
                       Output f32_4* vs_TEXCOORD2 = OpVariable Output 
                                         u32 %190 = OpConstant 0 
                                Private f32* %192 = OpVariable Private 
                                Input f32_2* %193 = OpVariable Input 
                                             %194 = OpTypePointer Input %6 
                                         i32 %198 = OpConstant 18 
                                         i32 %202 = OpConstant 22 
                                         f32 %205 = OpConstant 3.674022E-40 
                                         i32 %214 = OpConstant 21 
                                             %235 = OpTypePointer Input %7 
                                Input f32_3* %236 = OpVariable Input 
                                         u32 %254 = OpConstant 2 
                              Private f32_3* %263 = OpVariable Private 
                                             %296 = OpTypeBool 
                                             %297 = OpTypePointer Private %296 
                               Private bool* %298 = OpVariable Private 
                                         u32 %299 = OpConstant 3 
                                         f32 %302 = OpConstant 3.674022E-40 
                                             %305 = OpTypePointer Function %6 
                               Private bool* %315 = OpVariable Private 
                                         i32 %322 = OpConstant 10 
                                         i32 %326 = OpConstant 11 
                                         i32 %341 = OpConstant 6 
                                         i32 %348 = OpConstant 12 
                                         f32 %355 = OpConstant 3.674022E-40 
                       Output f32_4* vs_TEXCOORD1 = OpVariable Output 
                                         i32 %366 = OpConstant 8 
                                         i32 %374 = OpConstant 7 
                                             %394 = OpTypePointer Output %6 
                                         i32 %407 = OpConstant 15 
                                         f32 %410 = OpConstant 3.674022E-40 
                                       f32_4 %411 = OpConstantComposite %410 %410 %410 %410 
                                         f32 %414 = OpConstant 3.674022E-40 
                                       f32_4 %415 = OpConstantComposite %414 %414 %414 %414 
                                         f32 %419 = OpConstant 3.674022E-40 
                                       f32_2 %420 = OpConstantComposite %419 %419 
                                         i32 %438 = OpConstant 9 
                                             %451 = OpTypePointer Output %7 
                       Output f32_3* vs_TEXCOORD3 = OpVariable Output 
                                         f32 %463 = OpConstant 3.674022E-40 
                                         f32 %473 = OpConstant 3.674022E-40 
                                         f32 %480 = OpConstant 3.674022E-40 
                                       f32_2 %481 = OpConstantComposite %480 %480 
                       Output f32_4* vs_TEXCOORD5 = OpVariable Output 
                                         i32 %488 = OpConstant 23 
                                         i32 %501 = OpConstant 24 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                               Function f32* %306 = OpVariable Function 
                                        f32_4 %14 = OpLoad %12 
                                        f32_2 %15 = OpVectorShuffle %14 %14 0 1 
                                 Uniform f32* %29 = OpAccessChain %25 %27 
                                          f32 %30 = OpLoad %29 
                                 Uniform f32* %32 = OpAccessChain %25 %31 
                                          f32 %33 = OpLoad %32 
                                        f32_2 %34 = OpCompositeConstruct %30 %33 
                                        f32_2 %35 = OpFAdd %15 %34 
                                        f32_3 %36 = OpLoad %9 
                                        f32_3 %37 = OpVectorShuffle %36 %35 3 4 2 
                                                      OpStore %9 %37 
                                        f32_3 %40 = OpLoad %9 
                                        f32_4 %41 = OpVectorShuffle %40 %40 1 1 1 1 
                               Uniform f32_4* %45 = OpAccessChain %25 %42 %43 
                                        f32_4 %46 = OpLoad %45 
                                        f32_4 %47 = OpFMul %41 %46 
                                                      OpStore %39 %47 
                               Uniform f32_4* %49 = OpAccessChain %25 %42 %48 
                                        f32_4 %50 = OpLoad %49 
                                        f32_3 %51 = OpLoad %9 
                                        f32_4 %52 = OpVectorShuffle %51 %51 0 0 0 0 
                                        f32_4 %53 = OpFMul %50 %52 
                                        f32_4 %54 = OpLoad %39 
                                        f32_4 %55 = OpFAdd %53 %54 
                                                      OpStore %39 %55 
                               Uniform f32_4* %56 = OpAccessChain %25 %42 %42 
                                        f32_4 %57 = OpLoad %56 
                                        f32_4 %58 = OpLoad %12 
                                        f32_4 %59 = OpVectorShuffle %58 %58 2 2 2 2 
                                        f32_4 %60 = OpFMul %57 %59 
                                        f32_4 %61 = OpLoad %39 
                                        f32_4 %62 = OpFAdd %60 %61 
                                                      OpStore %39 %62 
                                        f32_4 %64 = OpLoad %39 
                               Uniform f32_4* %66 = OpAccessChain %25 %42 %65 
                                        f32_4 %67 = OpLoad %66 
                                        f32_4 %68 = OpFAdd %64 %67 
                                                      OpStore %63 %68 
                               Uniform f32_4* %69 = OpAccessChain %25 %42 %65 
                                        f32_4 %70 = OpLoad %69 
                                        f32_3 %71 = OpVectorShuffle %70 %70 0 1 2 
                                        f32_4 %72 = OpLoad %12 
                                        f32_3 %73 = OpVectorShuffle %72 %72 3 3 3 
                                        f32_3 %74 = OpFMul %71 %73 
                                        f32_4 %75 = OpLoad %39 
                                        f32_3 %76 = OpVectorShuffle %75 %75 0 1 2 
                                        f32_3 %77 = OpFAdd %74 %76 
                                        f32_4 %78 = OpLoad %39 
                                        f32_4 %79 = OpVectorShuffle %78 %77 4 5 6 3 
                                                      OpStore %39 %79 
                                        f32_4 %80 = OpLoad %39 
                                        f32_3 %81 = OpVectorShuffle %80 %80 0 1 2 
                                        f32_3 %82 = OpFNegate %81 
                               Uniform f32_3* %84 = OpAccessChain %25 %48 
                                        f32_3 %85 = OpLoad %84 
                                        f32_3 %86 = OpFAdd %82 %85 
                                        f32_4 %87 = OpLoad %39 
                                        f32_4 %88 = OpVectorShuffle %87 %86 4 5 6 3 
                                                      OpStore %39 %88 
                                        f32_4 %90 = OpLoad %63 
                                        f32_4 %91 = OpVectorShuffle %90 %90 1 1 1 1 
                               Uniform f32_4* %93 = OpAccessChain %25 %92 %43 
                                        f32_4 %94 = OpLoad %93 
                                        f32_4 %95 = OpFMul %91 %94 
                                                      OpStore %89 %95 
                               Uniform f32_4* %96 = OpAccessChain %25 %92 %48 
                                        f32_4 %97 = OpLoad %96 
                                        f32_4 %98 = OpLoad %63 
                                        f32_4 %99 = OpVectorShuffle %98 %98 0 0 0 0 
                                       f32_4 %100 = OpFMul %97 %99 
                                       f32_4 %101 = OpLoad %89 
                                       f32_4 %102 = OpFAdd %100 %101 
                                                      OpStore %89 %102 
                              Uniform f32_4* %103 = OpAccessChain %25 %92 %42 
                                       f32_4 %104 = OpLoad %103 
                                       f32_4 %105 = OpLoad %63 
                                       f32_4 %106 = OpVectorShuffle %105 %105 2 2 2 2 
                                       f32_4 %107 = OpFMul %104 %106 
                                       f32_4 %108 = OpLoad %89 
                                       f32_4 %109 = OpFAdd %107 %108 
                                                      OpStore %89 %109 
                              Uniform f32_4* %110 = OpAccessChain %25 %92 %65 
                                       f32_4 %111 = OpLoad %110 
                                       f32_4 %112 = OpLoad %63 
                                       f32_4 %113 = OpVectorShuffle %112 %112 3 3 3 3 
                                       f32_4 %114 = OpFMul %111 %113 
                                       f32_4 %115 = OpLoad %89 
                                       f32_4 %116 = OpFAdd %114 %115 
                                                      OpStore %63 %116 
                                       f32_4 %122 = OpLoad %63 
                               Output f32_4* %124 = OpAccessChain %121 %48 
                                                      OpStore %124 %122 
                                       f32_4 %127 = OpLoad %126 
                                                      OpStore %125 %127 
                                       f32_2 %132 = OpLoad %131 
                                                      OpStore vs_TEXCOORD0 %132 
                              Uniform f32_4* %135 = OpAccessChain %25 %43 
                                       f32_4 %136 = OpLoad %135 
                                       f32_2 %137 = OpVectorShuffle %136 %136 1 1 
                              Uniform f32_4* %139 = OpAccessChain %25 %138 %43 
                                       f32_4 %140 = OpLoad %139 
                                       f32_2 %141 = OpVectorShuffle %140 %140 0 1 
                                       f32_2 %142 = OpFMul %137 %141 
                                                      OpStore %134 %142 
                              Uniform f32_4* %143 = OpAccessChain %25 %138 %48 
                                       f32_4 %144 = OpLoad %143 
                                       f32_2 %145 = OpVectorShuffle %144 %144 0 1 
                              Uniform f32_4* %146 = OpAccessChain %25 %43 
                                       f32_4 %147 = OpLoad %146 
                                       f32_2 %148 = OpVectorShuffle %147 %147 0 0 
                                       f32_2 %149 = OpFMul %145 %148 
                                       f32_2 %150 = OpLoad %134 
                                       f32_2 %151 = OpFAdd %149 %150 
                                                      OpStore %134 %151 
                                       f32_2 %152 = OpLoad %134 
                                       f32_2 %153 = OpExtInst %1 4 %152 
                                Uniform f32* %155 = OpAccessChain %25 %154 
                                         f32 %156 = OpLoad %155 
                                Uniform f32* %158 = OpAccessChain %25 %157 
                                         f32 %159 = OpLoad %158 
                                       f32_2 %160 = OpCompositeConstruct %156 %159 
                                       f32_2 %161 = OpFMul %153 %160 
                                                      OpStore %134 %161 
                                       f32_4 %162 = OpLoad %63 
                                       f32_2 %163 = OpVectorShuffle %162 %162 3 3 
                                       f32_2 %164 = OpLoad %134 
                                       f32_2 %165 = OpFDiv %163 %164 
                                                      OpStore %134 %165 
                                       f32_2 %168 = OpLoad %134 
                                       f32_2 %169 = OpLoad %134 
                                         f32 %170 = OpDot %168 %169 
                                                      OpStore %167 %170 
                                Uniform f32* %172 = OpAccessChain %25 %171 
                                         f32 %173 = OpLoad %172 
                                Uniform f32* %175 = OpAccessChain %25 %174 
                                         f32 %176 = OpLoad %175 
                                       f32_2 %177 = OpCompositeConstruct %173 %176 
                                       f32_2 %180 = OpFMul %177 %179 
                                       f32_2 %181 = OpLoad %134 
                                       f32_2 %182 = OpFAdd %180 %181 
                                                      OpStore %134 %182 
                                       f32_2 %184 = OpLoad %134 
                                       f32_2 %185 = OpFDiv %179 %184 
                                       f32_4 %186 = OpLoad vs_TEXCOORD2 
                                       f32_4 %187 = OpVectorShuffle %186 %185 0 1 4 5 
                                                      OpStore vs_TEXCOORD2 %187 
                                         f32 %188 = OpLoad %167 
                                         f32 %189 = OpExtInst %1 32 %188 
                                Private f32* %191 = OpAccessChain %134 %190 
                                                      OpStore %191 %189 
                                  Input f32* %195 = OpAccessChain %193 %117 
                                         f32 %196 = OpLoad %195 
                                         f32 %197 = OpExtInst %1 4 %196 
                                Uniform f32* %199 = OpAccessChain %25 %198 
                                         f32 %200 = OpLoad %199 
                                         f32 %201 = OpFMul %197 %200 
                                                      OpStore %192 %201 
                                Uniform f32* %203 = OpAccessChain %25 %202 
                                         f32 %204 = OpLoad %203 
                                         f32 %206 = OpFAdd %204 %205 
                                                      OpStore %167 %206 
                                         f32 %207 = OpLoad %192 
                                         f32 %208 = OpLoad %167 
                                         f32 %209 = OpFMul %207 %208 
                                                      OpStore %192 %209 
                                         f32 %210 = OpLoad %192 
                                Private f32* %211 = OpAccessChain %134 %190 
                                         f32 %212 = OpLoad %211 
                                         f32 %213 = OpFMul %210 %212 
                                                      OpStore %167 %213 
                                Uniform f32* %215 = OpAccessChain %25 %214 
                                         f32 %216 = OpLoad %215 
                                         f32 %217 = OpFNegate %216 
                                         f32 %218 = OpFAdd %217 %205 
                                Private f32* %219 = OpAccessChain %63 %190 
                                                      OpStore %219 %218 
                                         f32 %220 = OpLoad %167 
                                         f32 %221 = OpExtInst %1 4 %220 
                                Private f32* %222 = OpAccessChain %63 %190 
                                         f32 %223 = OpLoad %222 
                                         f32 %224 = OpFMul %221 %223 
                                Private f32* %225 = OpAccessChain %63 %190 
                                                      OpStore %225 %224 
                                Private f32* %226 = OpAccessChain %134 %190 
                                         f32 %227 = OpLoad %226 
                                         f32 %228 = OpLoad %192 
                                         f32 %229 = OpFMul %227 %228 
                                Private f32* %230 = OpAccessChain %63 %190 
                                         f32 %231 = OpLoad %230 
                                         f32 %232 = OpFNegate %231 
                                         f32 %233 = OpFAdd %229 %232 
                                Private f32* %234 = OpAccessChain %134 %190 
                                                      OpStore %234 %233 
                                       f32_3 %237 = OpLoad %236 
                              Uniform f32_4* %238 = OpAccessChain %25 %65 %48 
                                       f32_4 %239 = OpLoad %238 
                                       f32_3 %240 = OpVectorShuffle %239 %239 0 1 2 
                                         f32 %241 = OpDot %237 %240 
                                Private f32* %242 = OpAccessChain %89 %190 
                                                      OpStore %242 %241 
                                       f32_3 %243 = OpLoad %236 
                              Uniform f32_4* %244 = OpAccessChain %25 %65 %43 
                                       f32_4 %245 = OpLoad %244 
                                       f32_3 %246 = OpVectorShuffle %245 %245 0 1 2 
                                         f32 %247 = OpDot %243 %246 
                                Private f32* %248 = OpAccessChain %89 %117 
                                                      OpStore %248 %247 
                                       f32_3 %249 = OpLoad %236 
                              Uniform f32_4* %250 = OpAccessChain %25 %65 %42 
                                       f32_4 %251 = OpLoad %250 
                                       f32_3 %252 = OpVectorShuffle %251 %251 0 1 2 
                                         f32 %253 = OpDot %249 %252 
                                Private f32* %255 = OpAccessChain %89 %254 
                                                      OpStore %255 %253 
                                       f32_4 %256 = OpLoad %89 
                                       f32_3 %257 = OpVectorShuffle %256 %256 0 1 2 
                                       f32_4 %258 = OpLoad %89 
                                       f32_3 %259 = OpVectorShuffle %258 %258 0 1 2 
                                         f32 %260 = OpDot %257 %259 
                                                      OpStore %192 %260 
                                         f32 %261 = OpLoad %192 
                                         f32 %262 = OpExtInst %1 32 %261 
                                                      OpStore %192 %262 
                                         f32 %264 = OpLoad %192 
                                       f32_3 %265 = OpCompositeConstruct %264 %264 %264 
                                       f32_4 %266 = OpLoad %89 
                                       f32_3 %267 = OpVectorShuffle %266 %266 0 1 2 
                                       f32_3 %268 = OpFMul %265 %267 
                                                      OpStore %263 %268 
                                       f32_4 %269 = OpLoad %39 
                                       f32_3 %270 = OpVectorShuffle %269 %269 0 1 2 
                                       f32_4 %271 = OpLoad %39 
                                       f32_3 %272 = OpVectorShuffle %271 %271 0 1 2 
                                         f32 %273 = OpDot %270 %272 
                                                      OpStore %192 %273 
                                         f32 %274 = OpLoad %192 
                                         f32 %275 = OpExtInst %1 32 %274 
                                                      OpStore %192 %275 
                                         f32 %276 = OpLoad %192 
                                       f32_3 %277 = OpCompositeConstruct %276 %276 %276 
                                       f32_4 %278 = OpLoad %39 
                                       f32_3 %279 = OpVectorShuffle %278 %278 0 1 2 
                                       f32_3 %280 = OpFMul %277 %279 
                                       f32_4 %281 = OpLoad %89 
                                       f32_4 %282 = OpVectorShuffle %281 %280 4 5 6 3 
                                                      OpStore %89 %282 
                                       f32_3 %283 = OpLoad %263 
                                       f32_4 %284 = OpLoad %89 
                                       f32_3 %285 = OpVectorShuffle %284 %284 0 1 2 
                                         f32 %286 = OpDot %283 %285 
                                                      OpStore %192 %286 
                                         f32 %287 = OpLoad %192 
                                         f32 %288 = OpExtInst %1 4 %287 
                                Private f32* %289 = OpAccessChain %134 %190 
                                         f32 %290 = OpLoad %289 
                                         f32 %291 = OpFMul %288 %290 
                                Private f32* %292 = OpAccessChain %63 %190 
                                         f32 %293 = OpLoad %292 
                                         f32 %294 = OpFAdd %291 %293 
                                Private f32* %295 = OpAccessChain %134 %190 
                                                      OpStore %295 %294 
                                Uniform f32* %300 = OpAccessChain %25 %138 %65 %299 
                                         f32 %301 = OpLoad %300 
                                        bool %303 = OpFOrdEqual %301 %302 
                                                      OpStore %298 %303 
                                        bool %304 = OpLoad %298 
                                                      OpSelectionMerge %308 None 
                                                      OpBranchConditional %304 %307 %311 
                                             %307 = OpLabel 
                                Private f32* %309 = OpAccessChain %134 %190 
                                         f32 %310 = OpLoad %309 
                                                      OpStore %306 %310 
                                                      OpBranch %308 
                                             %311 = OpLabel 
                                         f32 %312 = OpLoad %167 
                                                      OpStore %306 %312 
                                                      OpBranch %308 
                                             %308 = OpLabel 
                                         f32 %313 = OpLoad %306 
                                Private f32* %314 = OpAccessChain %263 %190 
                                                      OpStore %314 %313 
                                  Input f32* %316 = OpAccessChain %193 %117 
                                         f32 %317 = OpLoad %316 
                                        bool %318 = OpFOrdGreaterThanEqual %302 %317 
                                                      OpStore %315 %318 
                                        bool %319 = OpLoad %315 
                                         f32 %320 = OpSelect %319 %205 %302 
                                Private f32* %321 = OpAccessChain %134 %190 
                                                      OpStore %321 %320 
                                Uniform f32* %323 = OpAccessChain %25 %322 
                                         f32 %324 = OpLoad %323 
                                         f32 %325 = OpFNegate %324 
                                Uniform f32* %327 = OpAccessChain %25 %326 
                                         f32 %328 = OpLoad %327 
                                         f32 %329 = OpFAdd %325 %328 
                                                      OpStore %192 %329 
                                Private f32* %330 = OpAccessChain %134 %190 
                                         f32 %331 = OpLoad %330 
                                         f32 %332 = OpLoad %192 
                                         f32 %333 = OpFMul %331 %332 
                                Uniform f32* %334 = OpAccessChain %25 %322 
                                         f32 %335 = OpLoad %334 
                                         f32 %336 = OpFAdd %333 %335 
                                Private f32* %337 = OpAccessChain %134 %190 
                                                      OpStore %337 %336 
                                Private f32* %338 = OpAccessChain %134 %190 
                                         f32 %339 = OpLoad %338 
                                         f32 %340 = OpFMul %339 %178 
                                Uniform f32* %342 = OpAccessChain %25 %341 
                                         f32 %343 = OpLoad %342 
                                         f32 %344 = OpFAdd %340 %343 
                                Private f32* %345 = OpAccessChain %134 %190 
                                                      OpStore %345 %344 
                                Private f32* %346 = OpAccessChain %134 %190 
                                         f32 %347 = OpLoad %346 
                                Uniform f32* %349 = OpAccessChain %25 %348 
                                         f32 %350 = OpLoad %349 
                                         f32 %351 = OpFMul %347 %350 
                                Private f32* %352 = OpAccessChain %134 %190 
                                                      OpStore %352 %351 
                                Private f32* %353 = OpAccessChain %134 %190 
                                         f32 %354 = OpLoad %353 
                                         f32 %356 = OpFMul %354 %355 
                                Private f32* %357 = OpAccessChain %263 %254 
                                                      OpStore %357 %356 
                                       f32_3 %359 = OpLoad %263 
                                       f32_2 %360 = OpVectorShuffle %359 %359 0 2 
                                       f32_4 %361 = OpLoad vs_TEXCOORD1 
                                       f32_4 %362 = OpVectorShuffle %361 %360 0 4 2 5 
                                                      OpStore vs_TEXCOORD1 %362 
                                Private f32* %363 = OpAccessChain %263 %190 
                                         f32 %364 = OpLoad %363 
                                         f32 %365 = OpFDiv %355 %364 
                                                      OpStore %192 %365 
                                Uniform f32* %367 = OpAccessChain %25 %366 
                                         f32 %368 = OpLoad %367 
                                         f32 %369 = OpFNegate %368 
                                Uniform f32* %370 = OpAccessChain %25 %348 
                                         f32 %371 = OpLoad %370 
                                         f32 %372 = OpFMul %369 %371 
                                         f32 %373 = OpFAdd %372 %205 
                                                      OpStore %167 %373 
                                Uniform f32* %375 = OpAccessChain %25 %374 
                                         f32 %376 = OpLoad %375 
                                         f32 %377 = OpFNegate %376 
                                Uniform f32* %378 = OpAccessChain %25 %348 
                                         f32 %379 = OpLoad %378 
                                         f32 %380 = OpFMul %377 %379 
                                         f32 %381 = OpLoad %167 
                                         f32 %382 = OpFAdd %380 %381 
                                                      OpStore %167 %382 
                                         f32 %383 = OpLoad %167 
                                         f32 %384 = OpFMul %383 %355 
                                         f32 %385 = OpLoad %192 
                                         f32 %386 = OpFNegate %385 
                                         f32 %387 = OpFAdd %384 %386 
                                                      OpStore %167 %387 
                                Private f32* %388 = OpAccessChain %134 %190 
                                         f32 %389 = OpLoad %388 
                                         f32 %390 = OpFNegate %389 
                                         f32 %391 = OpFMul %390 %355 
                                         f32 %392 = OpLoad %167 
                                         f32 %393 = OpFAdd %391 %392 
                                 Output f32* %395 = OpAccessChain vs_TEXCOORD1 %190 
                                                      OpStore %395 %393 
                                Private f32* %396 = OpAccessChain %134 %190 
                                         f32 %397 = OpLoad %396 
                                         f32 %398 = OpFNegate %397 
                                         f32 %399 = OpFMul %398 %355 
                                         f32 %400 = OpFAdd %399 %355 
                                Private f32* %401 = OpAccessChain %134 %190 
                                                      OpStore %401 %400 
                                         f32 %402 = OpLoad %192 
                                Private f32* %403 = OpAccessChain %134 %190 
                                         f32 %404 = OpLoad %403 
                                         f32 %405 = OpFAdd %402 %404 
                                 Output f32* %406 = OpAccessChain vs_TEXCOORD1 %254 
                                                      OpStore %406 %405 
                              Uniform f32_4* %408 = OpAccessChain %25 %407 
                                       f32_4 %409 = OpLoad %408 
                                       f32_4 %412 = OpExtInst %1 40 %409 %411 
                                                      OpStore %63 %412 
                                       f32_4 %413 = OpLoad %63 
                                       f32_4 %416 = OpExtInst %1 37 %413 %415 
                                                      OpStore %63 %416 
                                       f32_3 %417 = OpLoad %9 
                                       f32_2 %418 = OpVectorShuffle %417 %417 0 1 
                                       f32_2 %421 = OpFMul %418 %420 
                                       f32_4 %422 = OpLoad %63 
                                       f32_2 %423 = OpVectorShuffle %422 %422 0 1 
                                       f32_2 %424 = OpFNegate %423 
                                       f32_2 %425 = OpFAdd %421 %424 
                                       f32_3 %426 = OpLoad %9 
                                       f32_3 %427 = OpVectorShuffle %426 %425 3 4 2 
                                                      OpStore %9 %427 
                                       f32_4 %428 = OpLoad %63 
                                       f32_2 %429 = OpVectorShuffle %428 %428 2 3 
                                       f32_2 %430 = OpFNegate %429 
                                       f32_3 %431 = OpLoad %9 
                                       f32_2 %432 = OpVectorShuffle %431 %431 0 1 
                                       f32_2 %433 = OpFAdd %430 %432 
                                       f32_4 %434 = OpLoad vs_TEXCOORD2 
                                       f32_4 %435 = OpVectorShuffle %434 %433 4 5 2 3 
                                                      OpStore vs_TEXCOORD2 %435 
                                       f32_4 %436 = OpLoad %39 
                                       f32_3 %437 = OpVectorShuffle %436 %436 1 1 1 
                              Uniform f32_4* %439 = OpAccessChain %25 %438 %43 
                                       f32_4 %440 = OpLoad %439 
                                       f32_3 %441 = OpVectorShuffle %440 %440 0 1 2 
                                       f32_3 %442 = OpFMul %437 %441 
                                                      OpStore %9 %442 
                              Uniform f32_4* %443 = OpAccessChain %25 %438 %48 
                                       f32_4 %444 = OpLoad %443 
                                       f32_3 %445 = OpVectorShuffle %444 %444 0 1 2 
                                       f32_4 %446 = OpLoad %39 
                                       f32_3 %447 = OpVectorShuffle %446 %446 0 0 0 
                                       f32_3 %448 = OpFMul %445 %447 
                                       f32_3 %449 = OpLoad %9 
                                       f32_3 %450 = OpFAdd %448 %449 
                                                      OpStore %9 %450 
                              Uniform f32_4* %453 = OpAccessChain %25 %438 %42 
                                       f32_4 %454 = OpLoad %453 
                                       f32_3 %455 = OpVectorShuffle %454 %454 0 1 2 
                                       f32_4 %456 = OpLoad %39 
                                       f32_3 %457 = OpVectorShuffle %456 %456 2 2 2 
                                       f32_3 %458 = OpFMul %455 %457 
                                       f32_3 %459 = OpLoad %9 
                                       f32_3 %460 = OpFAdd %458 %459 
                                                      OpStore vs_TEXCOORD3 %460 
                                  Input f32* %461 = OpAccessChain %193 %190 
                                         f32 %462 = OpLoad %461 
                                         f32 %464 = OpFMul %462 %463 
                                Private f32* %465 = OpAccessChain %9 %190 
                                                      OpStore %465 %464 
                                Private f32* %466 = OpAccessChain %9 %190 
                                         f32 %467 = OpLoad %466 
                                         f32 %468 = OpExtInst %1 8 %467 
                                Private f32* %469 = OpAccessChain %134 %190 
                                                      OpStore %469 %468 
                                Private f32* %470 = OpAccessChain %134 %190 
                                         f32 %471 = OpLoad %470 
                                         f32 %472 = OpFNegate %471 
                                         f32 %474 = OpFMul %472 %473 
                                  Input f32* %475 = OpAccessChain %193 %190 
                                         f32 %476 = OpLoad %475 
                                         f32 %477 = OpFAdd %474 %476 
                                Private f32* %478 = OpAccessChain %134 %117 
                                                      OpStore %478 %477 
                                       f32_2 %479 = OpLoad %134 
                                       f32_2 %482 = OpFMul %479 %481 
                                       f32_3 %483 = OpLoad %9 
                                       f32_3 %484 = OpVectorShuffle %483 %482 3 4 2 
                                                      OpStore %9 %484 
                                       f32_3 %486 = OpLoad %9 
                                       f32_2 %487 = OpVectorShuffle %486 %486 0 1 
                              Uniform f32_4* %489 = OpAccessChain %25 %488 
                                       f32_4 %490 = OpLoad %489 
                                       f32_2 %491 = OpVectorShuffle %490 %490 0 1 
                                       f32_2 %492 = OpFMul %487 %491 
                              Uniform f32_4* %493 = OpAccessChain %25 %488 
                                       f32_4 %494 = OpLoad %493 
                                       f32_2 %495 = OpVectorShuffle %494 %494 2 3 
                                       f32_2 %496 = OpFAdd %492 %495 
                                       f32_4 %497 = OpLoad vs_TEXCOORD5 
                                       f32_4 %498 = OpVectorShuffle %497 %496 4 5 2 3 
                                                      OpStore vs_TEXCOORD5 %498 
                                       f32_3 %499 = OpLoad %9 
                                       f32_2 %500 = OpVectorShuffle %499 %499 0 1 
                              Uniform f32_4* %502 = OpAccessChain %25 %501 
                                       f32_4 %503 = OpLoad %502 
                                       f32_2 %504 = OpVectorShuffle %503 %503 0 1 
                                       f32_2 %505 = OpFMul %500 %504 
                              Uniform f32_4* %506 = OpAccessChain %25 %501 
                                       f32_4 %507 = OpLoad %506 
                                       f32_2 %508 = OpVectorShuffle %507 %507 2 3 
                                       f32_2 %509 = OpFAdd %505 %508 
                                       f32_4 %510 = OpLoad vs_TEXCOORD5 
                                       f32_4 %511 = OpVectorShuffle %510 %509 0 1 4 5 
                                                      OpStore vs_TEXCOORD5 %511 
                                 Output f32* %512 = OpAccessChain %121 %48 %117 
                                         f32 %513 = OpLoad %512 
                                         f32 %514 = OpFNegate %513 
                                 Output f32* %515 = OpAccessChain %121 %48 %117 
                                                      OpStore %515 %514 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 301
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %22 %35 %128 %149 %285 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpDecorate %9 RelaxedPrecision 
                                                      OpDecorate %12 RelaxedPrecision 
                                                      OpDecorate %12 DescriptorSet 12 
                                                      OpDecorate %12 Binding 12 
                                                      OpDecorate %13 RelaxedPrecision 
                                                      OpDecorate %16 RelaxedPrecision 
                                                      OpDecorate %16 DescriptorSet 16 
                                                      OpDecorate %16 Binding 16 
                                                      OpDecorate %17 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD0 Location 22 
                                                      OpDecorate %27 RelaxedPrecision 
                                                      OpDecorate %33 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD1 Location 35 
                                                      OpDecorate %45 RelaxedPrecision 
                                                      OpDecorate %46 RelaxedPrecision 
                                                      OpMemberDecorate %69 0 Offset 69 
                                                      OpMemberDecorate %69 1 Offset 69 
                                                      OpMemberDecorate %69 2 Offset 69 
                                                      OpMemberDecorate %69 3 RelaxedPrecision 
                                                      OpMemberDecorate %69 3 Offset 69 
                                                      OpMemberDecorate %69 4 Offset 69 
                                                      OpMemberDecorate %69 5 Offset 69 
                                                      OpMemberDecorate %69 6 Offset 69 
                                                      OpMemberDecorate %69 7 RelaxedPrecision 
                                                      OpMemberDecorate %69 7 Offset 69 
                                                      OpMemberDecorate %69 8 Offset 69 
                                                      OpMemberDecorate %69 9 Offset 69 
                                                      OpDecorate %69 Block 
                                                      OpDecorate %71 DescriptorSet 71 
                                                      OpDecorate %71 Binding 71 
                                                      OpDecorate %85 RelaxedPrecision 
                                                      OpDecorate %89 RelaxedPrecision 
                                                      OpDecorate %93 RelaxedPrecision 
                                                      OpDecorate %94 RelaxedPrecision 
                                                      OpDecorate %95 RelaxedPrecision 
                                                      OpDecorate %101 RelaxedPrecision 
                                                      OpDecorate %103 RelaxedPrecision 
                                                      OpDecorate %104 RelaxedPrecision 
                                                      OpDecorate %110 RelaxedPrecision 
                                                      OpDecorate %111 RelaxedPrecision 
                                                      OpDecorate %113 RelaxedPrecision 
                                                      OpDecorate %114 RelaxedPrecision 
                                                      OpDecorate %115 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD5 Location 128 
                                                      OpDecorate %134 RelaxedPrecision 
                                                      OpDecorate %134 DescriptorSet 134 
                                                      OpDecorate %134 Binding 134 
                                                      OpDecorate %135 RelaxedPrecision 
                                                      OpDecorate %136 RelaxedPrecision 
                                                      OpDecorate %136 DescriptorSet 136 
                                                      OpDecorate %136 Binding 136 
                                                      OpDecorate %137 RelaxedPrecision 
                                                      OpDecorate %143 RelaxedPrecision 
                                                      OpDecorate %146 RelaxedPrecision 
                                                      OpDecorate %147 RelaxedPrecision 
                                                      OpDecorate %148 RelaxedPrecision 
                                                      OpDecorate %149 RelaxedPrecision 
                                                      OpDecorate %149 Location 149 
                                                      OpDecorate %150 RelaxedPrecision 
                                                      OpDecorate %151 RelaxedPrecision 
                                                      OpDecorate %154 RelaxedPrecision 
                                                      OpDecorate %155 RelaxedPrecision 
                                                      OpDecorate %156 RelaxedPrecision 
                                                      OpDecorate %174 RelaxedPrecision 
                                                      OpDecorate %175 RelaxedPrecision 
                                                      OpDecorate %175 DescriptorSet 175 
                                                      OpDecorate %175 Binding 175 
                                                      OpDecorate %176 RelaxedPrecision 
                                                      OpDecorate %177 RelaxedPrecision 
                                                      OpDecorate %177 DescriptorSet 177 
                                                      OpDecorate %177 Binding 177 
                                                      OpDecorate %178 RelaxedPrecision 
                                                      OpDecorate %183 RelaxedPrecision 
                                                      OpDecorate %184 RelaxedPrecision 
                                                      OpDecorate %185 RelaxedPrecision 
                                                      OpDecorate %186 RelaxedPrecision 
                                                      OpDecorate %187 RelaxedPrecision 
                                                      OpDecorate %190 RelaxedPrecision 
                                                      OpDecorate %192 RelaxedPrecision 
                                                      OpDecorate %193 RelaxedPrecision 
                                                      OpDecorate %200 RelaxedPrecision 
                                                      OpDecorate %206 RelaxedPrecision 
                                                      OpDecorate %207 RelaxedPrecision 
                                                      OpDecorate %208 RelaxedPrecision 
                                                      OpDecorate %213 RelaxedPrecision 
                                                      OpDecorate %215 RelaxedPrecision 
                                                      OpDecorate %216 RelaxedPrecision 
                                                      OpDecorate %221 RelaxedPrecision 
                                                      OpDecorate %222 RelaxedPrecision 
                                                      OpDecorate %223 RelaxedPrecision 
                                                      OpDecorate %224 RelaxedPrecision 
                                                      OpDecorate %226 RelaxedPrecision 
                                                      OpDecorate %228 RelaxedPrecision 
                                                      OpDecorate %229 RelaxedPrecision 
                                                      OpDecorate %231 RelaxedPrecision 
                                                      OpDecorate %232 RelaxedPrecision 
                                                      OpDecorate %238 RelaxedPrecision 
                                                      OpDecorate %239 RelaxedPrecision 
                                                      OpDecorate %263 RelaxedPrecision 
                                                      OpDecorate %265 RelaxedPrecision 
                                                      OpDecorate %266 RelaxedPrecision 
                                                      OpDecorate %267 RelaxedPrecision 
                                                      OpDecorate %268 RelaxedPrecision 
                                                      OpDecorate %269 RelaxedPrecision 
                                                      OpDecorate %270 RelaxedPrecision 
                                                      OpDecorate %271 RelaxedPrecision 
                                                      OpDecorate %272 RelaxedPrecision 
                                                      OpDecorate %274 RelaxedPrecision 
                                                      OpDecorate %275 RelaxedPrecision 
                                                      OpDecorate %276 RelaxedPrecision 
                                                      OpDecorate %278 RelaxedPrecision 
                                                      OpDecorate %279 RelaxedPrecision 
                                                      OpDecorate %280 RelaxedPrecision 
                                                      OpDecorate %281 RelaxedPrecision 
                                                      OpDecorate %282 RelaxedPrecision 
                                                      OpDecorate %283 RelaxedPrecision 
                                                      OpDecorate %285 RelaxedPrecision 
                                                      OpDecorate %285 Location 285 
                                                      OpDecorate %286 RelaxedPrecision 
                                                      OpDecorate %287 RelaxedPrecision 
                                                      OpDecorate %288 RelaxedPrecision 
                                                      OpDecorate %289 RelaxedPrecision 
                                                      OpDecorate %291 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypePointer UniformConstant %10 
         UniformConstant read_only Texture2D* %12 = OpVariable UniformConstant 
                                              %14 = OpTypeSampler 
                                              %15 = OpTypePointer UniformConstant %14 
                     UniformConstant sampler* %16 = OpVariable UniformConstant 
                                              %18 = OpTypeSampledImage %10 
                                              %20 = OpTypeVector %6 2 
                                              %21 = OpTypePointer Input %20 
                        Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                              %25 = OpTypeInt 32 0 
                                          u32 %26 = OpConstant 3 
                                          u32 %28 = OpConstant 0 
                                              %29 = OpTypePointer Private %6 
                                 Private f32* %31 = OpVariable Private 
                                              %34 = OpTypePointer Input %7 
                        Input f32_4* vs_TEXCOORD1 = OpVariable Input 
                                              %36 = OpTypePointer Input %6 
                                              %41 = OpTypeVector %6 3 
                                              %42 = OpTypePointer Private %41 
                               Private f32_3* %43 = OpVariable Private 
                                          u32 %47 = OpConstant 2 
                                              %52 = OpTypeBool 
                                              %53 = OpTypePointer Private %52 
                                Private bool* %54 = OpVariable Private 
                                          f32 %56 = OpConstant 3.674022E-40 
                                              %59 = OpTypeInt 32 1 
                                          i32 %60 = OpConstant 0 
                                          i32 %61 = OpConstant 1 
                                          i32 %63 = OpConstant -1 
                                              %69 = OpTypeStruct %7 %6 %6 %7 %6 %6 %6 %7 %6 %6 
                                              %70 = OpTypePointer Uniform %69 
Uniform struct {f32_4; f32; f32; f32_4; f32; f32; f32; f32_4; f32; f32;}* %71 = OpVariable Uniform 
                                          i32 %72 = OpConstant 8 
                                              %73 = OpTypePointer Uniform %6 
                                          i32 %76 = OpConstant 9 
                                          u32 %81 = OpConstant 1 
                                 Private f32* %85 = OpVariable Private 
                                          f32 %87 = OpConstant 3.674022E-40 
                                 Private f32* %89 = OpVariable Private 
                                          f32 %91 = OpConstant 3.674022E-40 
                                 Private f32* %95 = OpVariable Private 
                                         i32 %116 = OpConstant 5 
                                         i32 %119 = OpConstant 6 
                                             %123 = OpTypePointer Uniform %7 
                        Input f32_4* vs_TEXCOORD5 = OpVariable Input 
        UniformConstant read_only Texture2D* %134 = OpVariable UniformConstant 
                    UniformConstant sampler* %136 = OpVariable UniformConstant 
                              Private f32_4* %142 = OpVariable Private 
                                         i32 %144 = OpConstant 7 
                              Private f32_4* %148 = OpVariable Private 
                                Input f32_4* %149 = OpVariable Input 
                                         i32 %152 = OpConstant 3 
                                         i32 %161 = OpConstant 2 
                              Private f32_4* %174 = OpVariable Private 
        UniformConstant read_only Texture2D* %175 = OpVariable UniformConstant 
                    UniformConstant sampler* %177 = OpVariable UniformConstant 
                                Private f32* %188 = OpVariable Private 
                              Private f32_4* %200 = OpVariable Private 
                                         i32 %243 = OpConstant 4 
                                         f32 %277 = OpConstant 3.674022E-40 
                              Private f32_4* %279 = OpVariable Private 
                                             %284 = OpTypePointer Output %7 
                               Output f32_4* %285 = OpVariable Output 
                               Private bool* %290 = OpVariable Private 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                          read_only Texture2D %13 = OpLoad %12 
                                      sampler %17 = OpLoad %16 
                   read_only Texture2DSampled %19 = OpSampledImage %13 %17 
                                        f32_2 %23 = OpLoad vs_TEXCOORD0 
                                        f32_4 %24 = OpImageSampleImplicitLod %19 %23 
                                          f32 %27 = OpCompositeExtract %24 3 
                                 Private f32* %30 = OpAccessChain %9 %28 
                                                      OpStore %30 %27 
                                 Private f32* %32 = OpAccessChain %9 %28 
                                          f32 %33 = OpLoad %32 
                                   Input f32* %37 = OpAccessChain vs_TEXCOORD1 %28 
                                          f32 %38 = OpLoad %37 
                                          f32 %39 = OpFNegate %38 
                                          f32 %40 = OpFAdd %33 %39 
                                                      OpStore %31 %40 
                                 Private f32* %44 = OpAccessChain %9 %28 
                                          f32 %45 = OpLoad %44 
                                          f32 %46 = OpFNegate %45 
                                   Input f32* %48 = OpAccessChain vs_TEXCOORD1 %47 
                                          f32 %49 = OpLoad %48 
                                          f32 %50 = OpFAdd %46 %49 
                                 Private f32* %51 = OpAccessChain %43 %28 
                                                      OpStore %51 %50 
                                          f32 %55 = OpLoad %31 
                                         bool %57 = OpFOrdLessThan %55 %56 
                                                      OpStore %54 %57 
                                         bool %58 = OpLoad %54 
                                          i32 %62 = OpSelect %58 %61 %60 
                                          i32 %64 = OpIMul %62 %63 
                                         bool %65 = OpINotEqual %64 %60 
                                                      OpSelectionMerge %67 None 
                                                      OpBranchConditional %65 %66 %67 
                                              %66 = OpLabel 
                                                      OpKill
                                              %67 = OpLabel 
                                 Uniform f32* %74 = OpAccessChain %71 %72 
                                          f32 %75 = OpLoad %74 
                                 Uniform f32* %77 = OpAccessChain %71 %76 
                                          f32 %78 = OpLoad %77 
                                          f32 %79 = OpFMul %75 %78 
                                                      OpStore %31 %79 
                                          f32 %80 = OpLoad %31 
                                   Input f32* %82 = OpAccessChain vs_TEXCOORD1 %81 
                                          f32 %83 = OpLoad %82 
                                          f32 %84 = OpFMul %80 %83 
                                                      OpStore %31 %84 
                                          f32 %86 = OpLoad %31 
                                          f32 %88 = OpExtInst %1 37 %86 %87 
                                                      OpStore %85 %88 
                                          f32 %90 = OpLoad %31 
                                          f32 %92 = OpFMul %90 %91 
                                                      OpStore %89 %92 
                                          f32 %93 = OpLoad %85 
                                          f32 %94 = OpExtInst %1 31 %93 
                                                      OpStore %85 %94 
                                 Private f32* %96 = OpAccessChain %43 %28 
                                          f32 %97 = OpLoad %96 
                                   Input f32* %98 = OpAccessChain vs_TEXCOORD1 %81 
                                          f32 %99 = OpLoad %98 
                                         f32 %100 = OpFMul %97 %99 
                                         f32 %101 = OpLoad %89 
                                         f32 %102 = OpFAdd %100 %101 
                                                      OpStore %95 %102 
                                         f32 %103 = OpLoad %95 
                                         f32 %104 = OpExtInst %1 43 %103 %56 %87 
                                                      OpStore %95 %104 
                                Private f32* %105 = OpAccessChain %43 %28 
                                         f32 %106 = OpLoad %105 
                                  Input f32* %107 = OpAccessChain vs_TEXCOORD1 %81 
                                         f32 %108 = OpLoad %107 
                                         f32 %109 = OpFMul %106 %108 
                                         f32 %110 = OpLoad %89 
                                         f32 %111 = OpFNegate %110 
                                         f32 %112 = OpFAdd %109 %111 
                                                      OpStore %89 %112 
                                         f32 %113 = OpLoad %85 
                                         f32 %114 = OpLoad %95 
                                         f32 %115 = OpFMul %113 %114 
                                                      OpStore %85 %115 
                                Uniform f32* %117 = OpAccessChain %71 %116 
                                         f32 %118 = OpLoad %117 
                                Uniform f32* %120 = OpAccessChain %71 %119 
                                         f32 %121 = OpLoad %120 
                                       f32_2 %122 = OpCompositeConstruct %118 %121 
                              Uniform f32_4* %124 = OpAccessChain %71 %60 
                                       f32_4 %125 = OpLoad %124 
                                       f32_2 %126 = OpVectorShuffle %125 %125 1 1 
                                       f32_2 %127 = OpFMul %122 %126 
                                       f32_4 %129 = OpLoad vs_TEXCOORD5 
                                       f32_2 %130 = OpVectorShuffle %129 %129 2 3 
                                       f32_2 %131 = OpFAdd %127 %130 
                                       f32_3 %132 = OpLoad %43 
                                       f32_3 %133 = OpVectorShuffle %132 %131 3 4 2 
                                                      OpStore %43 %133 
                         read_only Texture2D %135 = OpLoad %134 
                                     sampler %137 = OpLoad %136 
                  read_only Texture2DSampled %138 = OpSampledImage %135 %137 
                                       f32_3 %139 = OpLoad %43 
                                       f32_2 %140 = OpVectorShuffle %139 %139 0 1 
                                       f32_4 %141 = OpImageSampleImplicitLod %138 %140 
                                                      OpStore %9 %141 
                                       f32_4 %143 = OpLoad %9 
                              Uniform f32_4* %145 = OpAccessChain %71 %144 
                                       f32_4 %146 = OpLoad %145 
                                       f32_4 %147 = OpFMul %143 %146 
                                                      OpStore %142 %147 
                                       f32_4 %150 = OpLoad %149 
                                       f32_3 %151 = OpVectorShuffle %150 %150 0 1 2 
                              Uniform f32_4* %153 = OpAccessChain %71 %152 
                                       f32_4 %154 = OpLoad %153 
                                       f32_3 %155 = OpVectorShuffle %154 %154 0 1 2 
                                       f32_3 %156 = OpFMul %151 %155 
                                       f32_4 %157 = OpLoad %148 
                                       f32_4 %158 = OpVectorShuffle %157 %156 4 5 6 3 
                                                      OpStore %148 %158 
                                Uniform f32* %159 = OpAccessChain %71 %61 
                                         f32 %160 = OpLoad %159 
                                Uniform f32* %162 = OpAccessChain %71 %161 
                                         f32 %163 = OpLoad %162 
                                       f32_2 %164 = OpCompositeConstruct %160 %163 
                              Uniform f32_4* %165 = OpAccessChain %71 %60 
                                       f32_4 %166 = OpLoad %165 
                                       f32_2 %167 = OpVectorShuffle %166 %166 1 1 
                                       f32_2 %168 = OpFMul %164 %167 
                                       f32_4 %169 = OpLoad vs_TEXCOORD5 
                                       f32_2 %170 = OpVectorShuffle %169 %169 0 1 
                                       f32_2 %171 = OpFAdd %168 %170 
                                       f32_3 %172 = OpLoad %43 
                                       f32_3 %173 = OpVectorShuffle %172 %171 3 4 2 
                                                      OpStore %43 %173 
                         read_only Texture2D %176 = OpLoad %175 
                                     sampler %178 = OpLoad %177 
                  read_only Texture2DSampled %179 = OpSampledImage %176 %178 
                                       f32_3 %180 = OpLoad %43 
                                       f32_2 %181 = OpVectorShuffle %180 %180 0 1 
                                       f32_4 %182 = OpImageSampleImplicitLod %179 %181 
                                                      OpStore %174 %182 
                                       f32_4 %183 = OpLoad %148 
                                       f32_3 %184 = OpVectorShuffle %183 %183 0 1 2 
                                       f32_4 %185 = OpLoad %174 
                                       f32_3 %186 = OpVectorShuffle %185 %185 0 1 2 
                                       f32_3 %187 = OpFMul %184 %186 
                                                      OpStore %43 %187 
                                Private f32* %189 = OpAccessChain %174 %26 
                                         f32 %190 = OpLoad %189 
                                Uniform f32* %191 = OpAccessChain %71 %152 %26 
                                         f32 %192 = OpLoad %191 
                                         f32 %193 = OpFMul %190 %192 
                                                      OpStore %188 %193 
                                       f32_3 %194 = OpLoad %43 
                                         f32 %195 = OpLoad %188 
                                       f32_3 %196 = OpCompositeConstruct %195 %195 %195 
                                       f32_3 %197 = OpFMul %194 %196 
                                       f32_4 %198 = OpLoad %148 
                                       f32_4 %199 = OpVectorShuffle %198 %197 4 5 6 3 
                                                      OpStore %148 %199 
                                       f32_4 %201 = OpLoad %142 
                                       f32_3 %202 = OpVectorShuffle %201 %201 0 1 2 
                                       f32_4 %203 = OpLoad %142 
                                       f32_3 %204 = OpVectorShuffle %203 %203 3 3 3 
                                       f32_3 %205 = OpFMul %202 %204 
                                       f32_4 %206 = OpLoad %148 
                                       f32_3 %207 = OpVectorShuffle %206 %206 0 1 2 
                                       f32_3 %208 = OpFNegate %207 
                                       f32_3 %209 = OpFAdd %205 %208 
                                       f32_4 %210 = OpLoad %200 
                                       f32_4 %211 = OpVectorShuffle %210 %209 4 5 6 3 
                                                      OpStore %200 %211 
                                Uniform f32* %212 = OpAccessChain %71 %144 %26 
                                         f32 %213 = OpLoad %212 
                                Private f32* %214 = OpAccessChain %9 %26 
                                         f32 %215 = OpLoad %214 
                                         f32 %216 = OpFMul %213 %215 
                                         f32 %217 = OpLoad %188 
                                         f32 %218 = OpFNegate %217 
                                         f32 %219 = OpFAdd %216 %218 
                                Private f32* %220 = OpAccessChain %200 %26 
                                                      OpStore %220 %219 
                                         f32 %221 = OpLoad %85 
                                       f32_4 %222 = OpCompositeConstruct %221 %221 %221 %221 
                                       f32_4 %223 = OpLoad %200 
                                       f32_4 %224 = OpFMul %222 %223 
                                                      OpStore %200 %224 
                                Uniform f32* %225 = OpAccessChain %71 %152 %26 
                                         f32 %226 = OpLoad %225 
                                Private f32* %227 = OpAccessChain %174 %26 
                                         f32 %228 = OpLoad %227 
                                         f32 %229 = OpFMul %226 %228 
                                Private f32* %230 = OpAccessChain %200 %26 
                                         f32 %231 = OpLoad %230 
                                         f32 %232 = OpFAdd %229 %231 
                                Private f32* %233 = OpAccessChain %148 %26 
                                                      OpStore %233 %232 
                                       f32_3 %234 = OpLoad %43 
                                         f32 %235 = OpLoad %188 
                                       f32_3 %236 = OpCompositeConstruct %235 %235 %235 
                                       f32_3 %237 = OpFMul %234 %236 
                                       f32_4 %238 = OpLoad %200 
                                       f32_3 %239 = OpVectorShuffle %238 %238 0 1 2 
                                       f32_3 %240 = OpFAdd %237 %239 
                                       f32_4 %241 = OpLoad %148 
                                       f32_4 %242 = OpVectorShuffle %241 %240 4 5 6 3 
                                                      OpStore %148 %242 
                                Uniform f32* %244 = OpAccessChain %71 %243 
                                         f32 %245 = OpLoad %244 
                                Uniform f32* %246 = OpAccessChain %71 %76 
                                         f32 %247 = OpLoad %246 
                                         f32 %248 = OpFMul %245 %247 
                                Private f32* %249 = OpAccessChain %43 %28 
                                                      OpStore %249 %248 
                                Private f32* %250 = OpAccessChain %43 %28 
                                         f32 %251 = OpLoad %250 
                                  Input f32* %252 = OpAccessChain vs_TEXCOORD1 %81 
                                         f32 %253 = OpLoad %252 
                                         f32 %254 = OpFMul %251 %253 
                                                      OpStore %31 %254 
                                Private f32* %255 = OpAccessChain %43 %28 
                                         f32 %256 = OpLoad %255 
                                  Input f32* %257 = OpAccessChain vs_TEXCOORD1 %81 
                                         f32 %258 = OpLoad %257 
                                         f32 %259 = OpFMul %256 %258 
                                         f32 %260 = OpFAdd %259 %87 
                                                      OpStore %85 %260 
                                         f32 %261 = OpLoad %31 
                                         f32 %262 = OpFMul %261 %91 
                                         f32 %263 = OpLoad %89 
                                         f32 %264 = OpFAdd %262 %263 
                                                      OpStore %89 %264 
                                         f32 %265 = OpLoad %89 
                                         f32 %266 = OpLoad %85 
                                         f32 %267 = OpFDiv %265 %266 
                                                      OpStore %85 %267 
                                         f32 %268 = OpLoad %85 
                                         f32 %269 = OpExtInst %1 43 %268 %56 %87 
                                                      OpStore %85 %269 
                                         f32 %270 = OpLoad %85 
                                         f32 %271 = OpFNegate %270 
                                         f32 %272 = OpFAdd %271 %87 
                                                      OpStore %85 %272 
                                Private f32* %273 = OpAccessChain %148 %26 
                                         f32 %274 = OpLoad %273 
                                         f32 %275 = OpLoad %85 
                                         f32 %276 = OpFMul %274 %275 
                                         f32 %278 = OpFAdd %276 %277 
                                                      OpStore %89 %278 
                                         f32 %280 = OpLoad %85 
                                       f32_4 %281 = OpCompositeConstruct %280 %280 %280 %280 
                                       f32_4 %282 = OpLoad %148 
                                       f32_4 %283 = OpFMul %281 %282 
                                                      OpStore %279 %283 
                                       f32_4 %286 = OpLoad %279 
                                       f32_4 %287 = OpLoad %149 
                                       f32_4 %288 = OpVectorShuffle %287 %287 3 3 3 3 
                                       f32_4 %289 = OpFMul %286 %288 
                                                      OpStore %285 %289 
                                         f32 %291 = OpLoad %89 
                                        bool %292 = OpFOrdLessThan %291 %56 
                                                      OpStore %290 %292 
                                        bool %293 = OpLoad %290 
                                         i32 %294 = OpSelect %293 %61 %60 
                                         i32 %295 = OpIMul %294 %63 
                                        bool %296 = OpINotEqual %295 %60 
                                                      OpSelectionMerge %298 None 
                                                      OpBranchConditional %296 %297 %298 
                                             %297 = OpLabel 
                                                      OpKill
                                             %298 = OpLabel 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "vulkan hw_tier02 " {
Keywords { "UNITY_UI_ALPHACLIP" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 517
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %12 %121 %125 %126 %129 %131 %183 %193 %236 %358 %452 %485 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpDecorate %12 Location 12 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpDecorate %19 ArrayStride 19 
                                                      OpDecorate %20 ArrayStride 20 
                                                      OpDecorate %21 ArrayStride 21 
                                                      OpDecorate %22 ArrayStride 22 
                                                      OpMemberDecorate %23 0 Offset 23 
                                                      OpMemberDecorate %23 1 Offset 23 
                                                      OpMemberDecorate %23 2 Offset 23 
                                                      OpMemberDecorate %23 3 Offset 23 
                                                      OpMemberDecorate %23 4 Offset 23 
                                                      OpMemberDecorate %23 5 Offset 23 
                                                      OpMemberDecorate %23 6 Offset 23 
                                                      OpMemberDecorate %23 7 Offset 23 
                                                      OpMemberDecorate %23 8 Offset 23 
                                                      OpMemberDecorate %23 9 Offset 23 
                                                      OpMemberDecorate %23 10 Offset 23 
                                                      OpMemberDecorate %23 11 Offset 23 
                                                      OpMemberDecorate %23 12 Offset 23 
                                                      OpMemberDecorate %23 13 Offset 23 
                                                      OpMemberDecorate %23 14 Offset 23 
                                                      OpMemberDecorate %23 15 Offset 23 
                                                      OpMemberDecorate %23 16 Offset 23 
                                                      OpMemberDecorate %23 17 Offset 23 
                                                      OpMemberDecorate %23 18 Offset 23 
                                                      OpMemberDecorate %23 19 Offset 23 
                                                      OpMemberDecorate %23 20 Offset 23 
                                                      OpMemberDecorate %23 21 Offset 23 
                                                      OpMemberDecorate %23 22 Offset 23 
                                                      OpMemberDecorate %23 23 Offset 23 
                                                      OpMemberDecorate %23 24 Offset 23 
                                                      OpDecorate %23 Block 
                                                      OpDecorate %25 DescriptorSet 25 
                                                      OpDecorate %25 Binding 25 
                                                      OpMemberDecorate %119 0 BuiltIn 119 
                                                      OpMemberDecorate %119 1 BuiltIn 119 
                                                      OpMemberDecorate %119 2 BuiltIn 119 
                                                      OpDecorate %119 Block 
                                                      OpDecorate %125 RelaxedPrecision 
                                                      OpDecorate %125 Location 125 
                                                      OpDecorate %126 RelaxedPrecision 
                                                      OpDecorate %126 Location 126 
                                                      OpDecorate %127 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD0 Location 129 
                                                      OpDecorate %131 Location 131 
                                                      OpDecorate vs_TEXCOORD2 Location 183 
                                                      OpDecorate %193 Location 193 
                                                      OpDecorate %236 Location 236 
                                                      OpDecorate vs_TEXCOORD1 Location 358 
                                                      OpDecorate vs_TEXCOORD3 Location 452 
                                                      OpDecorate vs_TEXCOORD5 Location 485 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 3 
                                               %8 = OpTypePointer Private %7 
                                Private f32_3* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 4 
                                              %11 = OpTypePointer Input %10 
                                 Input f32_4* %12 = OpVariable Input 
                                              %13 = OpTypeVector %6 2 
                                              %16 = OpTypeInt 32 0 
                                          u32 %17 = OpConstant 4 
                                              %18 = OpTypeArray %10 %17 
                                              %19 = OpTypeArray %10 %17 
                                              %20 = OpTypeArray %10 %17 
                                              %21 = OpTypeArray %10 %17 
                                              %22 = OpTypeArray %10 %17 
                                              %23 = OpTypeStruct %7 %10 %18 %19 %20 %21 %6 %6 %6 %22 %6 %6 %6 %6 %6 %10 %6 %6 %6 %6 %6 %6 %6 %10 %10 
                                              %24 = OpTypePointer Uniform %23 
Uniform struct {f32_3; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4[4]; f32; f32; f32; f32_4[4]; f32; f32; f32; f32; f32; f32_4; f32; f32; f32; f32; f32; f32; f32; f32_4; f32_4;}* %25 = OpVariable Uniform 
                                              %26 = OpTypeInt 32 1 
                                          i32 %27 = OpConstant 13 
                                              %28 = OpTypePointer Uniform %6 
                                          i32 %31 = OpConstant 14 
                                              %38 = OpTypePointer Private %10 
                               Private f32_4* %39 = OpVariable Private 
                                          i32 %42 = OpConstant 2 
                                          i32 %43 = OpConstant 1 
                                              %44 = OpTypePointer Uniform %10 
                                          i32 %48 = OpConstant 0 
                               Private f32_4* %63 = OpVariable Private 
                                          i32 %65 = OpConstant 3 
                                              %83 = OpTypePointer Uniform %7 
                               Private f32_4* %89 = OpVariable Private 
                                          i32 %92 = OpConstant 5 
                                         u32 %117 = OpConstant 1 
                                             %118 = OpTypeArray %6 %117 
                                             %119 = OpTypeStruct %10 %6 %118 
                                             %120 = OpTypePointer Output %119 
        Output struct {f32_4; f32; f32[1];}* %121 = OpVariable Output 
                                             %123 = OpTypePointer Output %10 
                               Output f32_4* %125 = OpVariable Output 
                                Input f32_4* %126 = OpVariable Input 
                                             %128 = OpTypePointer Output %13 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                             %130 = OpTypePointer Input %13 
                                Input f32_2* %131 = OpVariable Input 
                                             %133 = OpTypePointer Private %13 
                              Private f32_2* %134 = OpVariable Private 
                                         i32 %138 = OpConstant 4 
                                         i32 %154 = OpConstant 19 
                                         i32 %157 = OpConstant 20 
                                             %166 = OpTypePointer Private %6 
                                Private f32* %167 = OpVariable Private 
                                         i32 %171 = OpConstant 16 
                                         i32 %174 = OpConstant 17 
                                         f32 %178 = OpConstant 3.674022E-40 
                                       f32_2 %179 = OpConstantComposite %178 %178 
                       Output f32_4* vs_TEXCOORD2 = OpVariable Output 
                                         u32 %190 = OpConstant 0 
                                Private f32* %192 = OpVariable Private 
                                Input f32_2* %193 = OpVariable Input 
                                             %194 = OpTypePointer Input %6 
                                         i32 %198 = OpConstant 18 
                                         i32 %202 = OpConstant 22 
                                         f32 %205 = OpConstant 3.674022E-40 
                                         i32 %214 = OpConstant 21 
                                             %235 = OpTypePointer Input %7 
                                Input f32_3* %236 = OpVariable Input 
                                         u32 %254 = OpConstant 2 
                              Private f32_3* %263 = OpVariable Private 
                                             %296 = OpTypeBool 
                                             %297 = OpTypePointer Private %296 
                               Private bool* %298 = OpVariable Private 
                                         u32 %299 = OpConstant 3 
                                         f32 %302 = OpConstant 3.674022E-40 
                                             %305 = OpTypePointer Function %6 
                               Private bool* %315 = OpVariable Private 
                                         i32 %322 = OpConstant 10 
                                         i32 %326 = OpConstant 11 
                                         i32 %341 = OpConstant 6 
                                         i32 %348 = OpConstant 12 
                                         f32 %355 = OpConstant 3.674022E-40 
                       Output f32_4* vs_TEXCOORD1 = OpVariable Output 
                                         i32 %366 = OpConstant 8 
                                         i32 %374 = OpConstant 7 
                                             %394 = OpTypePointer Output %6 
                                         i32 %407 = OpConstant 15 
                                         f32 %410 = OpConstant 3.674022E-40 
                                       f32_4 %411 = OpConstantComposite %410 %410 %410 %410 
                                         f32 %414 = OpConstant 3.674022E-40 
                                       f32_4 %415 = OpConstantComposite %414 %414 %414 %414 
                                         f32 %419 = OpConstant 3.674022E-40 
                                       f32_2 %420 = OpConstantComposite %419 %419 
                                         i32 %438 = OpConstant 9 
                                             %451 = OpTypePointer Output %7 
                       Output f32_3* vs_TEXCOORD3 = OpVariable Output 
                                         f32 %463 = OpConstant 3.674022E-40 
                                         f32 %473 = OpConstant 3.674022E-40 
                                         f32 %480 = OpConstant 3.674022E-40 
                                       f32_2 %481 = OpConstantComposite %480 %480 
                       Output f32_4* vs_TEXCOORD5 = OpVariable Output 
                                         i32 %488 = OpConstant 23 
                                         i32 %501 = OpConstant 24 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                               Function f32* %306 = OpVariable Function 
                                        f32_4 %14 = OpLoad %12 
                                        f32_2 %15 = OpVectorShuffle %14 %14 0 1 
                                 Uniform f32* %29 = OpAccessChain %25 %27 
                                          f32 %30 = OpLoad %29 
                                 Uniform f32* %32 = OpAccessChain %25 %31 
                                          f32 %33 = OpLoad %32 
                                        f32_2 %34 = OpCompositeConstruct %30 %33 
                                        f32_2 %35 = OpFAdd %15 %34 
                                        f32_3 %36 = OpLoad %9 
                                        f32_3 %37 = OpVectorShuffle %36 %35 3 4 2 
                                                      OpStore %9 %37 
                                        f32_3 %40 = OpLoad %9 
                                        f32_4 %41 = OpVectorShuffle %40 %40 1 1 1 1 
                               Uniform f32_4* %45 = OpAccessChain %25 %42 %43 
                                        f32_4 %46 = OpLoad %45 
                                        f32_4 %47 = OpFMul %41 %46 
                                                      OpStore %39 %47 
                               Uniform f32_4* %49 = OpAccessChain %25 %42 %48 
                                        f32_4 %50 = OpLoad %49 
                                        f32_3 %51 = OpLoad %9 
                                        f32_4 %52 = OpVectorShuffle %51 %51 0 0 0 0 
                                        f32_4 %53 = OpFMul %50 %52 
                                        f32_4 %54 = OpLoad %39 
                                        f32_4 %55 = OpFAdd %53 %54 
                                                      OpStore %39 %55 
                               Uniform f32_4* %56 = OpAccessChain %25 %42 %42 
                                        f32_4 %57 = OpLoad %56 
                                        f32_4 %58 = OpLoad %12 
                                        f32_4 %59 = OpVectorShuffle %58 %58 2 2 2 2 
                                        f32_4 %60 = OpFMul %57 %59 
                                        f32_4 %61 = OpLoad %39 
                                        f32_4 %62 = OpFAdd %60 %61 
                                                      OpStore %39 %62 
                                        f32_4 %64 = OpLoad %39 
                               Uniform f32_4* %66 = OpAccessChain %25 %42 %65 
                                        f32_4 %67 = OpLoad %66 
                                        f32_4 %68 = OpFAdd %64 %67 
                                                      OpStore %63 %68 
                               Uniform f32_4* %69 = OpAccessChain %25 %42 %65 
                                        f32_4 %70 = OpLoad %69 
                                        f32_3 %71 = OpVectorShuffle %70 %70 0 1 2 
                                        f32_4 %72 = OpLoad %12 
                                        f32_3 %73 = OpVectorShuffle %72 %72 3 3 3 
                                        f32_3 %74 = OpFMul %71 %73 
                                        f32_4 %75 = OpLoad %39 
                                        f32_3 %76 = OpVectorShuffle %75 %75 0 1 2 
                                        f32_3 %77 = OpFAdd %74 %76 
                                        f32_4 %78 = OpLoad %39 
                                        f32_4 %79 = OpVectorShuffle %78 %77 4 5 6 3 
                                                      OpStore %39 %79 
                                        f32_4 %80 = OpLoad %39 
                                        f32_3 %81 = OpVectorShuffle %80 %80 0 1 2 
                                        f32_3 %82 = OpFNegate %81 
                               Uniform f32_3* %84 = OpAccessChain %25 %48 
                                        f32_3 %85 = OpLoad %84 
                                        f32_3 %86 = OpFAdd %82 %85 
                                        f32_4 %87 = OpLoad %39 
                                        f32_4 %88 = OpVectorShuffle %87 %86 4 5 6 3 
                                                      OpStore %39 %88 
                                        f32_4 %90 = OpLoad %63 
                                        f32_4 %91 = OpVectorShuffle %90 %90 1 1 1 1 
                               Uniform f32_4* %93 = OpAccessChain %25 %92 %43 
                                        f32_4 %94 = OpLoad %93 
                                        f32_4 %95 = OpFMul %91 %94 
                                                      OpStore %89 %95 
                               Uniform f32_4* %96 = OpAccessChain %25 %92 %48 
                                        f32_4 %97 = OpLoad %96 
                                        f32_4 %98 = OpLoad %63 
                                        f32_4 %99 = OpVectorShuffle %98 %98 0 0 0 0 
                                       f32_4 %100 = OpFMul %97 %99 
                                       f32_4 %101 = OpLoad %89 
                                       f32_4 %102 = OpFAdd %100 %101 
                                                      OpStore %89 %102 
                              Uniform f32_4* %103 = OpAccessChain %25 %92 %42 
                                       f32_4 %104 = OpLoad %103 
                                       f32_4 %105 = OpLoad %63 
                                       f32_4 %106 = OpVectorShuffle %105 %105 2 2 2 2 
                                       f32_4 %107 = OpFMul %104 %106 
                                       f32_4 %108 = OpLoad %89 
                                       f32_4 %109 = OpFAdd %107 %108 
                                                      OpStore %89 %109 
                              Uniform f32_4* %110 = OpAccessChain %25 %92 %65 
                                       f32_4 %111 = OpLoad %110 
                                       f32_4 %112 = OpLoad %63 
                                       f32_4 %113 = OpVectorShuffle %112 %112 3 3 3 3 
                                       f32_4 %114 = OpFMul %111 %113 
                                       f32_4 %115 = OpLoad %89 
                                       f32_4 %116 = OpFAdd %114 %115 
                                                      OpStore %63 %116 
                                       f32_4 %122 = OpLoad %63 
                               Output f32_4* %124 = OpAccessChain %121 %48 
                                                      OpStore %124 %122 
                                       f32_4 %127 = OpLoad %126 
                                                      OpStore %125 %127 
                                       f32_2 %132 = OpLoad %131 
                                                      OpStore vs_TEXCOORD0 %132 
                              Uniform f32_4* %135 = OpAccessChain %25 %43 
                                       f32_4 %136 = OpLoad %135 
                                       f32_2 %137 = OpVectorShuffle %136 %136 1 1 
                              Uniform f32_4* %139 = OpAccessChain %25 %138 %43 
                                       f32_4 %140 = OpLoad %139 
                                       f32_2 %141 = OpVectorShuffle %140 %140 0 1 
                                       f32_2 %142 = OpFMul %137 %141 
                                                      OpStore %134 %142 
                              Uniform f32_4* %143 = OpAccessChain %25 %138 %48 
                                       f32_4 %144 = OpLoad %143 
                                       f32_2 %145 = OpVectorShuffle %144 %144 0 1 
                              Uniform f32_4* %146 = OpAccessChain %25 %43 
                                       f32_4 %147 = OpLoad %146 
                                       f32_2 %148 = OpVectorShuffle %147 %147 0 0 
                                       f32_2 %149 = OpFMul %145 %148 
                                       f32_2 %150 = OpLoad %134 
                                       f32_2 %151 = OpFAdd %149 %150 
                                                      OpStore %134 %151 
                                       f32_2 %152 = OpLoad %134 
                                       f32_2 %153 = OpExtInst %1 4 %152 
                                Uniform f32* %155 = OpAccessChain %25 %154 
                                         f32 %156 = OpLoad %155 
                                Uniform f32* %158 = OpAccessChain %25 %157 
                                         f32 %159 = OpLoad %158 
                                       f32_2 %160 = OpCompositeConstruct %156 %159 
                                       f32_2 %161 = OpFMul %153 %160 
                                                      OpStore %134 %161 
                                       f32_4 %162 = OpLoad %63 
                                       f32_2 %163 = OpVectorShuffle %162 %162 3 3 
                                       f32_2 %164 = OpLoad %134 
                                       f32_2 %165 = OpFDiv %163 %164 
                                                      OpStore %134 %165 
                                       f32_2 %168 = OpLoad %134 
                                       f32_2 %169 = OpLoad %134 
                                         f32 %170 = OpDot %168 %169 
                                                      OpStore %167 %170 
                                Uniform f32* %172 = OpAccessChain %25 %171 
                                         f32 %173 = OpLoad %172 
                                Uniform f32* %175 = OpAccessChain %25 %174 
                                         f32 %176 = OpLoad %175 
                                       f32_2 %177 = OpCompositeConstruct %173 %176 
                                       f32_2 %180 = OpFMul %177 %179 
                                       f32_2 %181 = OpLoad %134 
                                       f32_2 %182 = OpFAdd %180 %181 
                                                      OpStore %134 %182 
                                       f32_2 %184 = OpLoad %134 
                                       f32_2 %185 = OpFDiv %179 %184 
                                       f32_4 %186 = OpLoad vs_TEXCOORD2 
                                       f32_4 %187 = OpVectorShuffle %186 %185 0 1 4 5 
                                                      OpStore vs_TEXCOORD2 %187 
                                         f32 %188 = OpLoad %167 
                                         f32 %189 = OpExtInst %1 32 %188 
                                Private f32* %191 = OpAccessChain %134 %190 
                                                      OpStore %191 %189 
                                  Input f32* %195 = OpAccessChain %193 %117 
                                         f32 %196 = OpLoad %195 
                                         f32 %197 = OpExtInst %1 4 %196 
                                Uniform f32* %199 = OpAccessChain %25 %198 
                                         f32 %200 = OpLoad %199 
                                         f32 %201 = OpFMul %197 %200 
                                                      OpStore %192 %201 
                                Uniform f32* %203 = OpAccessChain %25 %202 
                                         f32 %204 = OpLoad %203 
                                         f32 %206 = OpFAdd %204 %205 
                                                      OpStore %167 %206 
                                         f32 %207 = OpLoad %192 
                                         f32 %208 = OpLoad %167 
                                         f32 %209 = OpFMul %207 %208 
                                                      OpStore %192 %209 
                                         f32 %210 = OpLoad %192 
                                Private f32* %211 = OpAccessChain %134 %190 
                                         f32 %212 = OpLoad %211 
                                         f32 %213 = OpFMul %210 %212 
                                                      OpStore %167 %213 
                                Uniform f32* %215 = OpAccessChain %25 %214 
                                         f32 %216 = OpLoad %215 
                                         f32 %217 = OpFNegate %216 
                                         f32 %218 = OpFAdd %217 %205 
                                Private f32* %219 = OpAccessChain %63 %190 
                                                      OpStore %219 %218 
                                         f32 %220 = OpLoad %167 
                                         f32 %221 = OpExtInst %1 4 %220 
                                Private f32* %222 = OpAccessChain %63 %190 
                                         f32 %223 = OpLoad %222 
                                         f32 %224 = OpFMul %221 %223 
                                Private f32* %225 = OpAccessChain %63 %190 
                                                      OpStore %225 %224 
                                Private f32* %226 = OpAccessChain %134 %190 
                                         f32 %227 = OpLoad %226 
                                         f32 %228 = OpLoad %192 
                                         f32 %229 = OpFMul %227 %228 
                                Private f32* %230 = OpAccessChain %63 %190 
                                         f32 %231 = OpLoad %230 
                                         f32 %232 = OpFNegate %231 
                                         f32 %233 = OpFAdd %229 %232 
                                Private f32* %234 = OpAccessChain %134 %190 
                                                      OpStore %234 %233 
                                       f32_3 %237 = OpLoad %236 
                              Uniform f32_4* %238 = OpAccessChain %25 %65 %48 
                                       f32_4 %239 = OpLoad %238 
                                       f32_3 %240 = OpVectorShuffle %239 %239 0 1 2 
                                         f32 %241 = OpDot %237 %240 
                                Private f32* %242 = OpAccessChain %89 %190 
                                                      OpStore %242 %241 
                                       f32_3 %243 = OpLoad %236 
                              Uniform f32_4* %244 = OpAccessChain %25 %65 %43 
                                       f32_4 %245 = OpLoad %244 
                                       f32_3 %246 = OpVectorShuffle %245 %245 0 1 2 
                                         f32 %247 = OpDot %243 %246 
                                Private f32* %248 = OpAccessChain %89 %117 
                                                      OpStore %248 %247 
                                       f32_3 %249 = OpLoad %236 
                              Uniform f32_4* %250 = OpAccessChain %25 %65 %42 
                                       f32_4 %251 = OpLoad %250 
                                       f32_3 %252 = OpVectorShuffle %251 %251 0 1 2 
                                         f32 %253 = OpDot %249 %252 
                                Private f32* %255 = OpAccessChain %89 %254 
                                                      OpStore %255 %253 
                                       f32_4 %256 = OpLoad %89 
                                       f32_3 %257 = OpVectorShuffle %256 %256 0 1 2 
                                       f32_4 %258 = OpLoad %89 
                                       f32_3 %259 = OpVectorShuffle %258 %258 0 1 2 
                                         f32 %260 = OpDot %257 %259 
                                                      OpStore %192 %260 
                                         f32 %261 = OpLoad %192 
                                         f32 %262 = OpExtInst %1 32 %261 
                                                      OpStore %192 %262 
                                         f32 %264 = OpLoad %192 
                                       f32_3 %265 = OpCompositeConstruct %264 %264 %264 
                                       f32_4 %266 = OpLoad %89 
                                       f32_3 %267 = OpVectorShuffle %266 %266 0 1 2 
                                       f32_3 %268 = OpFMul %265 %267 
                                                      OpStore %263 %268 
                                       f32_4 %269 = OpLoad %39 
                                       f32_3 %270 = OpVectorShuffle %269 %269 0 1 2 
                                       f32_4 %271 = OpLoad %39 
                                       f32_3 %272 = OpVectorShuffle %271 %271 0 1 2 
                                         f32 %273 = OpDot %270 %272 
                                                      OpStore %192 %273 
                                         f32 %274 = OpLoad %192 
                                         f32 %275 = OpExtInst %1 32 %274 
                                                      OpStore %192 %275 
                                         f32 %276 = OpLoad %192 
                                       f32_3 %277 = OpCompositeConstruct %276 %276 %276 
                                       f32_4 %278 = OpLoad %39 
                                       f32_3 %279 = OpVectorShuffle %278 %278 0 1 2 
                                       f32_3 %280 = OpFMul %277 %279 
                                       f32_4 %281 = OpLoad %89 
                                       f32_4 %282 = OpVectorShuffle %281 %280 4 5 6 3 
                                                      OpStore %89 %282 
                                       f32_3 %283 = OpLoad %263 
                                       f32_4 %284 = OpLoad %89 
                                       f32_3 %285 = OpVectorShuffle %284 %284 0 1 2 
                                         f32 %286 = OpDot %283 %285 
                                                      OpStore %192 %286 
                                         f32 %287 = OpLoad %192 
                                         f32 %288 = OpExtInst %1 4 %287 
                                Private f32* %289 = OpAccessChain %134 %190 
                                         f32 %290 = OpLoad %289 
                                         f32 %291 = OpFMul %288 %290 
                                Private f32* %292 = OpAccessChain %63 %190 
                                         f32 %293 = OpLoad %292 
                                         f32 %294 = OpFAdd %291 %293 
                                Private f32* %295 = OpAccessChain %134 %190 
                                                      OpStore %295 %294 
                                Uniform f32* %300 = OpAccessChain %25 %138 %65 %299 
                                         f32 %301 = OpLoad %300 
                                        bool %303 = OpFOrdEqual %301 %302 
                                                      OpStore %298 %303 
                                        bool %304 = OpLoad %298 
                                                      OpSelectionMerge %308 None 
                                                      OpBranchConditional %304 %307 %311 
                                             %307 = OpLabel 
                                Private f32* %309 = OpAccessChain %134 %190 
                                         f32 %310 = OpLoad %309 
                                                      OpStore %306 %310 
                                                      OpBranch %308 
                                             %311 = OpLabel 
                                         f32 %312 = OpLoad %167 
                                                      OpStore %306 %312 
                                                      OpBranch %308 
                                             %308 = OpLabel 
                                         f32 %313 = OpLoad %306 
                                Private f32* %314 = OpAccessChain %263 %190 
                                                      OpStore %314 %313 
                                  Input f32* %316 = OpAccessChain %193 %117 
                                         f32 %317 = OpLoad %316 
                                        bool %318 = OpFOrdGreaterThanEqual %302 %317 
                                                      OpStore %315 %318 
                                        bool %319 = OpLoad %315 
                                         f32 %320 = OpSelect %319 %205 %302 
                                Private f32* %321 = OpAccessChain %134 %190 
                                                      OpStore %321 %320 
                                Uniform f32* %323 = OpAccessChain %25 %322 
                                         f32 %324 = OpLoad %323 
                                         f32 %325 = OpFNegate %324 
                                Uniform f32* %327 = OpAccessChain %25 %326 
                                         f32 %328 = OpLoad %327 
                                         f32 %329 = OpFAdd %325 %328 
                                                      OpStore %192 %329 
                                Private f32* %330 = OpAccessChain %134 %190 
                                         f32 %331 = OpLoad %330 
                                         f32 %332 = OpLoad %192 
                                         f32 %333 = OpFMul %331 %332 
                                Uniform f32* %334 = OpAccessChain %25 %322 
                                         f32 %335 = OpLoad %334 
                                         f32 %336 = OpFAdd %333 %335 
                                Private f32* %337 = OpAccessChain %134 %190 
                                                      OpStore %337 %336 
                                Private f32* %338 = OpAccessChain %134 %190 
                                         f32 %339 = OpLoad %338 
                                         f32 %340 = OpFMul %339 %178 
                                Uniform f32* %342 = OpAccessChain %25 %341 
                                         f32 %343 = OpLoad %342 
                                         f32 %344 = OpFAdd %340 %343 
                                Private f32* %345 = OpAccessChain %134 %190 
                                                      OpStore %345 %344 
                                Private f32* %346 = OpAccessChain %134 %190 
                                         f32 %347 = OpLoad %346 
                                Uniform f32* %349 = OpAccessChain %25 %348 
                                         f32 %350 = OpLoad %349 
                                         f32 %351 = OpFMul %347 %350 
                                Private f32* %352 = OpAccessChain %134 %190 
                                                      OpStore %352 %351 
                                Private f32* %353 = OpAccessChain %134 %190 
                                         f32 %354 = OpLoad %353 
                                         f32 %356 = OpFMul %354 %355 
                                Private f32* %357 = OpAccessChain %263 %254 
                                                      OpStore %357 %356 
                                       f32_3 %359 = OpLoad %263 
                                       f32_2 %360 = OpVectorShuffle %359 %359 0 2 
                                       f32_4 %361 = OpLoad vs_TEXCOORD1 
                                       f32_4 %362 = OpVectorShuffle %361 %360 0 4 2 5 
                                                      OpStore vs_TEXCOORD1 %362 
                                Private f32* %363 = OpAccessChain %263 %190 
                                         f32 %364 = OpLoad %363 
                                         f32 %365 = OpFDiv %355 %364 
                                                      OpStore %192 %365 
                                Uniform f32* %367 = OpAccessChain %25 %366 
                                         f32 %368 = OpLoad %367 
                                         f32 %369 = OpFNegate %368 
                                Uniform f32* %370 = OpAccessChain %25 %348 
                                         f32 %371 = OpLoad %370 
                                         f32 %372 = OpFMul %369 %371 
                                         f32 %373 = OpFAdd %372 %205 
                                                      OpStore %167 %373 
                                Uniform f32* %375 = OpAccessChain %25 %374 
                                         f32 %376 = OpLoad %375 
                                         f32 %377 = OpFNegate %376 
                                Uniform f32* %378 = OpAccessChain %25 %348 
                                         f32 %379 = OpLoad %378 
                                         f32 %380 = OpFMul %377 %379 
                                         f32 %381 = OpLoad %167 
                                         f32 %382 = OpFAdd %380 %381 
                                                      OpStore %167 %382 
                                         f32 %383 = OpLoad %167 
                                         f32 %384 = OpFMul %383 %355 
                                         f32 %385 = OpLoad %192 
                                         f32 %386 = OpFNegate %385 
                                         f32 %387 = OpFAdd %384 %386 
                                                      OpStore %167 %387 
                                Private f32* %388 = OpAccessChain %134 %190 
                                         f32 %389 = OpLoad %388 
                                         f32 %390 = OpFNegate %389 
                                         f32 %391 = OpFMul %390 %355 
                                         f32 %392 = OpLoad %167 
                                         f32 %393 = OpFAdd %391 %392 
                                 Output f32* %395 = OpAccessChain vs_TEXCOORD1 %190 
                                                      OpStore %395 %393 
                                Private f32* %396 = OpAccessChain %134 %190 
                                         f32 %397 = OpLoad %396 
                                         f32 %398 = OpFNegate %397 
                                         f32 %399 = OpFMul %398 %355 
                                         f32 %400 = OpFAdd %399 %355 
                                Private f32* %401 = OpAccessChain %134 %190 
                                                      OpStore %401 %400 
                                         f32 %402 = OpLoad %192 
                                Private f32* %403 = OpAccessChain %134 %190 
                                         f32 %404 = OpLoad %403 
                                         f32 %405 = OpFAdd %402 %404 
                                 Output f32* %406 = OpAccessChain vs_TEXCOORD1 %254 
                                                      OpStore %406 %405 
                              Uniform f32_4* %408 = OpAccessChain %25 %407 
                                       f32_4 %409 = OpLoad %408 
                                       f32_4 %412 = OpExtInst %1 40 %409 %411 
                                                      OpStore %63 %412 
                                       f32_4 %413 = OpLoad %63 
                                       f32_4 %416 = OpExtInst %1 37 %413 %415 
                                                      OpStore %63 %416 
                                       f32_3 %417 = OpLoad %9 
                                       f32_2 %418 = OpVectorShuffle %417 %417 0 1 
                                       f32_2 %421 = OpFMul %418 %420 
                                       f32_4 %422 = OpLoad %63 
                                       f32_2 %423 = OpVectorShuffle %422 %422 0 1 
                                       f32_2 %424 = OpFNegate %423 
                                       f32_2 %425 = OpFAdd %421 %424 
                                       f32_3 %426 = OpLoad %9 
                                       f32_3 %427 = OpVectorShuffle %426 %425 3 4 2 
                                                      OpStore %9 %427 
                                       f32_4 %428 = OpLoad %63 
                                       f32_2 %429 = OpVectorShuffle %428 %428 2 3 
                                       f32_2 %430 = OpFNegate %429 
                                       f32_3 %431 = OpLoad %9 
                                       f32_2 %432 = OpVectorShuffle %431 %431 0 1 
                                       f32_2 %433 = OpFAdd %430 %432 
                                       f32_4 %434 = OpLoad vs_TEXCOORD2 
                                       f32_4 %435 = OpVectorShuffle %434 %433 4 5 2 3 
                                                      OpStore vs_TEXCOORD2 %435 
                                       f32_4 %436 = OpLoad %39 
                                       f32_3 %437 = OpVectorShuffle %436 %436 1 1 1 
                              Uniform f32_4* %439 = OpAccessChain %25 %438 %43 
                                       f32_4 %440 = OpLoad %439 
                                       f32_3 %441 = OpVectorShuffle %440 %440 0 1 2 
                                       f32_3 %442 = OpFMul %437 %441 
                                                      OpStore %9 %442 
                              Uniform f32_4* %443 = OpAccessChain %25 %438 %48 
                                       f32_4 %444 = OpLoad %443 
                                       f32_3 %445 = OpVectorShuffle %444 %444 0 1 2 
                                       f32_4 %446 = OpLoad %39 
                                       f32_3 %447 = OpVectorShuffle %446 %446 0 0 0 
                                       f32_3 %448 = OpFMul %445 %447 
                                       f32_3 %449 = OpLoad %9 
                                       f32_3 %450 = OpFAdd %448 %449 
                                                      OpStore %9 %450 
                              Uniform f32_4* %453 = OpAccessChain %25 %438 %42 
                                       f32_4 %454 = OpLoad %453 
                                       f32_3 %455 = OpVectorShuffle %454 %454 0 1 2 
                                       f32_4 %456 = OpLoad %39 
                                       f32_3 %457 = OpVectorShuffle %456 %456 2 2 2 
                                       f32_3 %458 = OpFMul %455 %457 
                                       f32_3 %459 = OpLoad %9 
                                       f32_3 %460 = OpFAdd %458 %459 
                                                      OpStore vs_TEXCOORD3 %460 
                                  Input f32* %461 = OpAccessChain %193 %190 
                                         f32 %462 = OpLoad %461 
                                         f32 %464 = OpFMul %462 %463 
                                Private f32* %465 = OpAccessChain %9 %190 
                                                      OpStore %465 %464 
                                Private f32* %466 = OpAccessChain %9 %190 
                                         f32 %467 = OpLoad %466 
                                         f32 %468 = OpExtInst %1 8 %467 
                                Private f32* %469 = OpAccessChain %134 %190 
                                                      OpStore %469 %468 
                                Private f32* %470 = OpAccessChain %134 %190 
                                         f32 %471 = OpLoad %470 
                                         f32 %472 = OpFNegate %471 
                                         f32 %474 = OpFMul %472 %473 
                                  Input f32* %475 = OpAccessChain %193 %190 
                                         f32 %476 = OpLoad %475 
                                         f32 %477 = OpFAdd %474 %476 
                                Private f32* %478 = OpAccessChain %134 %117 
                                                      OpStore %478 %477 
                                       f32_2 %479 = OpLoad %134 
                                       f32_2 %482 = OpFMul %479 %481 
                                       f32_3 %483 = OpLoad %9 
                                       f32_3 %484 = OpVectorShuffle %483 %482 3 4 2 
                                                      OpStore %9 %484 
                                       f32_3 %486 = OpLoad %9 
                                       f32_2 %487 = OpVectorShuffle %486 %486 0 1 
                              Uniform f32_4* %489 = OpAccessChain %25 %488 
                                       f32_4 %490 = OpLoad %489 
                                       f32_2 %491 = OpVectorShuffle %490 %490 0 1 
                                       f32_2 %492 = OpFMul %487 %491 
                              Uniform f32_4* %493 = OpAccessChain %25 %488 
                                       f32_4 %494 = OpLoad %493 
                                       f32_2 %495 = OpVectorShuffle %494 %494 2 3 
                                       f32_2 %496 = OpFAdd %492 %495 
                                       f32_4 %497 = OpLoad vs_TEXCOORD5 
                                       f32_4 %498 = OpVectorShuffle %497 %496 4 5 2 3 
                                                      OpStore vs_TEXCOORD5 %498 
                                       f32_3 %499 = OpLoad %9 
                                       f32_2 %500 = OpVectorShuffle %499 %499 0 1 
                              Uniform f32_4* %502 = OpAccessChain %25 %501 
                                       f32_4 %503 = OpLoad %502 
                                       f32_2 %504 = OpVectorShuffle %503 %503 0 1 
                                       f32_2 %505 = OpFMul %500 %504 
                              Uniform f32_4* %506 = OpAccessChain %25 %501 
                                       f32_4 %507 = OpLoad %506 
                                       f32_2 %508 = OpVectorShuffle %507 %507 2 3 
                                       f32_2 %509 = OpFAdd %505 %508 
                                       f32_4 %510 = OpLoad vs_TEXCOORD5 
                                       f32_4 %511 = OpVectorShuffle %510 %509 0 1 4 5 
                                                      OpStore vs_TEXCOORD5 %511 
                                 Output f32* %512 = OpAccessChain %121 %48 %117 
                                         f32 %513 = OpLoad %512 
                                         f32 %514 = OpFNegate %513 
                                 Output f32* %515 = OpAccessChain %121 %48 %117 
                                                      OpStore %515 %514 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 301
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %22 %35 %128 %149 %285 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpDecorate %9 RelaxedPrecision 
                                                      OpDecorate %12 RelaxedPrecision 
                                                      OpDecorate %12 DescriptorSet 12 
                                                      OpDecorate %12 Binding 12 
                                                      OpDecorate %13 RelaxedPrecision 
                                                      OpDecorate %16 RelaxedPrecision 
                                                      OpDecorate %16 DescriptorSet 16 
                                                      OpDecorate %16 Binding 16 
                                                      OpDecorate %17 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD0 Location 22 
                                                      OpDecorate %27 RelaxedPrecision 
                                                      OpDecorate %33 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD1 Location 35 
                                                      OpDecorate %45 RelaxedPrecision 
                                                      OpDecorate %46 RelaxedPrecision 
                                                      OpMemberDecorate %69 0 Offset 69 
                                                      OpMemberDecorate %69 1 Offset 69 
                                                      OpMemberDecorate %69 2 Offset 69 
                                                      OpMemberDecorate %69 3 RelaxedPrecision 
                                                      OpMemberDecorate %69 3 Offset 69 
                                                      OpMemberDecorate %69 4 Offset 69 
                                                      OpMemberDecorate %69 5 Offset 69 
                                                      OpMemberDecorate %69 6 Offset 69 
                                                      OpMemberDecorate %69 7 RelaxedPrecision 
                                                      OpMemberDecorate %69 7 Offset 69 
                                                      OpMemberDecorate %69 8 Offset 69 
                                                      OpMemberDecorate %69 9 Offset 69 
                                                      OpDecorate %69 Block 
                                                      OpDecorate %71 DescriptorSet 71 
                                                      OpDecorate %71 Binding 71 
                                                      OpDecorate %85 RelaxedPrecision 
                                                      OpDecorate %89 RelaxedPrecision 
                                                      OpDecorate %93 RelaxedPrecision 
                                                      OpDecorate %94 RelaxedPrecision 
                                                      OpDecorate %95 RelaxedPrecision 
                                                      OpDecorate %101 RelaxedPrecision 
                                                      OpDecorate %103 RelaxedPrecision 
                                                      OpDecorate %104 RelaxedPrecision 
                                                      OpDecorate %110 RelaxedPrecision 
                                                      OpDecorate %111 RelaxedPrecision 
                                                      OpDecorate %113 RelaxedPrecision 
                                                      OpDecorate %114 RelaxedPrecision 
                                                      OpDecorate %115 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD5 Location 128 
                                                      OpDecorate %134 RelaxedPrecision 
                                                      OpDecorate %134 DescriptorSet 134 
                                                      OpDecorate %134 Binding 134 
                                                      OpDecorate %135 RelaxedPrecision 
                                                      OpDecorate %136 RelaxedPrecision 
                                                      OpDecorate %136 DescriptorSet 136 
                                                      OpDecorate %136 Binding 136 
                                                      OpDecorate %137 RelaxedPrecision 
                                                      OpDecorate %143 RelaxedPrecision 
                                                      OpDecorate %146 RelaxedPrecision 
                                                      OpDecorate %147 RelaxedPrecision 
                                                      OpDecorate %148 RelaxedPrecision 
                                                      OpDecorate %149 RelaxedPrecision 
                                                      OpDecorate %149 Location 149 
                                                      OpDecorate %150 RelaxedPrecision 
                                                      OpDecorate %151 RelaxedPrecision 
                                                      OpDecorate %154 RelaxedPrecision 
                                                      OpDecorate %155 RelaxedPrecision 
                                                      OpDecorate %156 RelaxedPrecision 
                                                      OpDecorate %174 RelaxedPrecision 
                                                      OpDecorate %175 RelaxedPrecision 
                                                      OpDecorate %175 DescriptorSet 175 
                                                      OpDecorate %175 Binding 175 
                                                      OpDecorate %176 RelaxedPrecision 
                                                      OpDecorate %177 RelaxedPrecision 
                                                      OpDecorate %177 DescriptorSet 177 
                                                      OpDecorate %177 Binding 177 
                                                      OpDecorate %178 RelaxedPrecision 
                                                      OpDecorate %183 RelaxedPrecision 
                                                      OpDecorate %184 RelaxedPrecision 
                                                      OpDecorate %185 RelaxedPrecision 
                                                      OpDecorate %186 RelaxedPrecision 
                                                      OpDecorate %187 RelaxedPrecision 
                                                      OpDecorate %190 RelaxedPrecision 
                                                      OpDecorate %192 RelaxedPrecision 
                                                      OpDecorate %193 RelaxedPrecision 
                                                      OpDecorate %200 RelaxedPrecision 
                                                      OpDecorate %206 RelaxedPrecision 
                                                      OpDecorate %207 RelaxedPrecision 
                                                      OpDecorate %208 RelaxedPrecision 
                                                      OpDecorate %213 RelaxedPrecision 
                                                      OpDecorate %215 RelaxedPrecision 
                                                      OpDecorate %216 RelaxedPrecision 
                                                      OpDecorate %221 RelaxedPrecision 
                                                      OpDecorate %222 RelaxedPrecision 
                                                      OpDecorate %223 RelaxedPrecision 
                                                      OpDecorate %224 RelaxedPrecision 
                                                      OpDecorate %226 RelaxedPrecision 
                                                      OpDecorate %228 RelaxedPrecision 
                                                      OpDecorate %229 RelaxedPrecision 
                                                      OpDecorate %231 RelaxedPrecision 
                                                      OpDecorate %232 RelaxedPrecision 
                                                      OpDecorate %238 RelaxedPrecision 
                                                      OpDecorate %239 RelaxedPrecision 
                                                      OpDecorate %263 RelaxedPrecision 
                                                      OpDecorate %265 RelaxedPrecision 
                                                      OpDecorate %266 RelaxedPrecision 
                                                      OpDecorate %267 RelaxedPrecision 
                                                      OpDecorate %268 RelaxedPrecision 
                                                      OpDecorate %269 RelaxedPrecision 
                                                      OpDecorate %270 RelaxedPrecision 
                                                      OpDecorate %271 RelaxedPrecision 
                                                      OpDecorate %272 RelaxedPrecision 
                                                      OpDecorate %274 RelaxedPrecision 
                                                      OpDecorate %275 RelaxedPrecision 
                                                      OpDecorate %276 RelaxedPrecision 
                                                      OpDecorate %278 RelaxedPrecision 
                                                      OpDecorate %279 RelaxedPrecision 
                                                      OpDecorate %280 RelaxedPrecision 
                                                      OpDecorate %281 RelaxedPrecision 
                                                      OpDecorate %282 RelaxedPrecision 
                                                      OpDecorate %283 RelaxedPrecision 
                                                      OpDecorate %285 RelaxedPrecision 
                                                      OpDecorate %285 Location 285 
                                                      OpDecorate %286 RelaxedPrecision 
                                                      OpDecorate %287 RelaxedPrecision 
                                                      OpDecorate %288 RelaxedPrecision 
                                                      OpDecorate %289 RelaxedPrecision 
                                                      OpDecorate %291 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypePointer UniformConstant %10 
         UniformConstant read_only Texture2D* %12 = OpVariable UniformConstant 
                                              %14 = OpTypeSampler 
                                              %15 = OpTypePointer UniformConstant %14 
                     UniformConstant sampler* %16 = OpVariable UniformConstant 
                                              %18 = OpTypeSampledImage %10 
                                              %20 = OpTypeVector %6 2 
                                              %21 = OpTypePointer Input %20 
                        Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                              %25 = OpTypeInt 32 0 
                                          u32 %26 = OpConstant 3 
                                          u32 %28 = OpConstant 0 
                                              %29 = OpTypePointer Private %6 
                                 Private f32* %31 = OpVariable Private 
                                              %34 = OpTypePointer Input %7 
                        Input f32_4* vs_TEXCOORD1 = OpVariable Input 
                                              %36 = OpTypePointer Input %6 
                                              %41 = OpTypeVector %6 3 
                                              %42 = OpTypePointer Private %41 
                               Private f32_3* %43 = OpVariable Private 
                                          u32 %47 = OpConstant 2 
                                              %52 = OpTypeBool 
                                              %53 = OpTypePointer Private %52 
                                Private bool* %54 = OpVariable Private 
                                          f32 %56 = OpConstant 3.674022E-40 
                                              %59 = OpTypeInt 32 1 
                                          i32 %60 = OpConstant 0 
                                          i32 %61 = OpConstant 1 
                                          i32 %63 = OpConstant -1 
                                              %69 = OpTypeStruct %7 %6 %6 %7 %6 %6 %6 %7 %6 %6 
                                              %70 = OpTypePointer Uniform %69 
Uniform struct {f32_4; f32; f32; f32_4; f32; f32; f32; f32_4; f32; f32;}* %71 = OpVariable Uniform 
                                          i32 %72 = OpConstant 8 
                                              %73 = OpTypePointer Uniform %6 
                                          i32 %76 = OpConstant 9 
                                          u32 %81 = OpConstant 1 
                                 Private f32* %85 = OpVariable Private 
                                          f32 %87 = OpConstant 3.674022E-40 
                                 Private f32* %89 = OpVariable Private 
                                          f32 %91 = OpConstant 3.674022E-40 
                                 Private f32* %95 = OpVariable Private 
                                         i32 %116 = OpConstant 5 
                                         i32 %119 = OpConstant 6 
                                             %123 = OpTypePointer Uniform %7 
                        Input f32_4* vs_TEXCOORD5 = OpVariable Input 
        UniformConstant read_only Texture2D* %134 = OpVariable UniformConstant 
                    UniformConstant sampler* %136 = OpVariable UniformConstant 
                              Private f32_4* %142 = OpVariable Private 
                                         i32 %144 = OpConstant 7 
                              Private f32_4* %148 = OpVariable Private 
                                Input f32_4* %149 = OpVariable Input 
                                         i32 %152 = OpConstant 3 
                                         i32 %161 = OpConstant 2 
                              Private f32_4* %174 = OpVariable Private 
        UniformConstant read_only Texture2D* %175 = OpVariable UniformConstant 
                    UniformConstant sampler* %177 = OpVariable UniformConstant 
                                Private f32* %188 = OpVariable Private 
                              Private f32_4* %200 = OpVariable Private 
                                         i32 %243 = OpConstant 4 
                                         f32 %277 = OpConstant 3.674022E-40 
                              Private f32_4* %279 = OpVariable Private 
                                             %284 = OpTypePointer Output %7 
                               Output f32_4* %285 = OpVariable Output 
                               Private bool* %290 = OpVariable Private 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                          read_only Texture2D %13 = OpLoad %12 
                                      sampler %17 = OpLoad %16 
                   read_only Texture2DSampled %19 = OpSampledImage %13 %17 
                                        f32_2 %23 = OpLoad vs_TEXCOORD0 
                                        f32_4 %24 = OpImageSampleImplicitLod %19 %23 
                                          f32 %27 = OpCompositeExtract %24 3 
                                 Private f32* %30 = OpAccessChain %9 %28 
                                                      OpStore %30 %27 
                                 Private f32* %32 = OpAccessChain %9 %28 
                                          f32 %33 = OpLoad %32 
                                   Input f32* %37 = OpAccessChain vs_TEXCOORD1 %28 
                                          f32 %38 = OpLoad %37 
                                          f32 %39 = OpFNegate %38 
                                          f32 %40 = OpFAdd %33 %39 
                                                      OpStore %31 %40 
                                 Private f32* %44 = OpAccessChain %9 %28 
                                          f32 %45 = OpLoad %44 
                                          f32 %46 = OpFNegate %45 
                                   Input f32* %48 = OpAccessChain vs_TEXCOORD1 %47 
                                          f32 %49 = OpLoad %48 
                                          f32 %50 = OpFAdd %46 %49 
                                 Private f32* %51 = OpAccessChain %43 %28 
                                                      OpStore %51 %50 
                                          f32 %55 = OpLoad %31 
                                         bool %57 = OpFOrdLessThan %55 %56 
                                                      OpStore %54 %57 
                                         bool %58 = OpLoad %54 
                                          i32 %62 = OpSelect %58 %61 %60 
                                          i32 %64 = OpIMul %62 %63 
                                         bool %65 = OpINotEqual %64 %60 
                                                      OpSelectionMerge %67 None 
                                                      OpBranchConditional %65 %66 %67 
                                              %66 = OpLabel 
                                                      OpKill
                                              %67 = OpLabel 
                                 Uniform f32* %74 = OpAccessChain %71 %72 
                                          f32 %75 = OpLoad %74 
                                 Uniform f32* %77 = OpAccessChain %71 %76 
                                          f32 %78 = OpLoad %77 
                                          f32 %79 = OpFMul %75 %78 
                                                      OpStore %31 %79 
                                          f32 %80 = OpLoad %31 
                                   Input f32* %82 = OpAccessChain vs_TEXCOORD1 %81 
                                          f32 %83 = OpLoad %82 
                                          f32 %84 = OpFMul %80 %83 
                                                      OpStore %31 %84 
                                          f32 %86 = OpLoad %31 
                                          f32 %88 = OpExtInst %1 37 %86 %87 
                                                      OpStore %85 %88 
                                          f32 %90 = OpLoad %31 
                                          f32 %92 = OpFMul %90 %91 
                                                      OpStore %89 %92 
                                          f32 %93 = OpLoad %85 
                                          f32 %94 = OpExtInst %1 31 %93 
                                                      OpStore %85 %94 
                                 Private f32* %96 = OpAccessChain %43 %28 
                                          f32 %97 = OpLoad %96 
                                   Input f32* %98 = OpAccessChain vs_TEXCOORD1 %81 
                                          f32 %99 = OpLoad %98 
                                         f32 %100 = OpFMul %97 %99 
                                         f32 %101 = OpLoad %89 
                                         f32 %102 = OpFAdd %100 %101 
                                                      OpStore %95 %102 
                                         f32 %103 = OpLoad %95 
                                         f32 %104 = OpExtInst %1 43 %103 %56 %87 
                                                      OpStore %95 %104 
                                Private f32* %105 = OpAccessChain %43 %28 
                                         f32 %106 = OpLoad %105 
                                  Input f32* %107 = OpAccessChain vs_TEXCOORD1 %81 
                                         f32 %108 = OpLoad %107 
                                         f32 %109 = OpFMul %106 %108 
                                         f32 %110 = OpLoad %89 
                                         f32 %111 = OpFNegate %110 
                                         f32 %112 = OpFAdd %109 %111 
                                                      OpStore %89 %112 
                                         f32 %113 = OpLoad %85 
                                         f32 %114 = OpLoad %95 
                                         f32 %115 = OpFMul %113 %114 
                                                      OpStore %85 %115 
                                Uniform f32* %117 = OpAccessChain %71 %116 
                                         f32 %118 = OpLoad %117 
                                Uniform f32* %120 = OpAccessChain %71 %119 
                                         f32 %121 = OpLoad %120 
                                       f32_2 %122 = OpCompositeConstruct %118 %121 
                              Uniform f32_4* %124 = OpAccessChain %71 %60 
                                       f32_4 %125 = OpLoad %124 
                                       f32_2 %126 = OpVectorShuffle %125 %125 1 1 
                                       f32_2 %127 = OpFMul %122 %126 
                                       f32_4 %129 = OpLoad vs_TEXCOORD5 
                                       f32_2 %130 = OpVectorShuffle %129 %129 2 3 
                                       f32_2 %131 = OpFAdd %127 %130 
                                       f32_3 %132 = OpLoad %43 
                                       f32_3 %133 = OpVectorShuffle %132 %131 3 4 2 
                                                      OpStore %43 %133 
                         read_only Texture2D %135 = OpLoad %134 
                                     sampler %137 = OpLoad %136 
                  read_only Texture2DSampled %138 = OpSampledImage %135 %137 
                                       f32_3 %139 = OpLoad %43 
                                       f32_2 %140 = OpVectorShuffle %139 %139 0 1 
                                       f32_4 %141 = OpImageSampleImplicitLod %138 %140 
                                                      OpStore %9 %141 
                                       f32_4 %143 = OpLoad %9 
                              Uniform f32_4* %145 = OpAccessChain %71 %144 
                                       f32_4 %146 = OpLoad %145 
                                       f32_4 %147 = OpFMul %143 %146 
                                                      OpStore %142 %147 
                                       f32_4 %150 = OpLoad %149 
                                       f32_3 %151 = OpVectorShuffle %150 %150 0 1 2 
                              Uniform f32_4* %153 = OpAccessChain %71 %152 
                                       f32_4 %154 = OpLoad %153 
                                       f32_3 %155 = OpVectorShuffle %154 %154 0 1 2 
                                       f32_3 %156 = OpFMul %151 %155 
                                       f32_4 %157 = OpLoad %148 
                                       f32_4 %158 = OpVectorShuffle %157 %156 4 5 6 3 
                                                      OpStore %148 %158 
                                Uniform f32* %159 = OpAccessChain %71 %61 
                                         f32 %160 = OpLoad %159 
                                Uniform f32* %162 = OpAccessChain %71 %161 
                                         f32 %163 = OpLoad %162 
                                       f32_2 %164 = OpCompositeConstruct %160 %163 
                              Uniform f32_4* %165 = OpAccessChain %71 %60 
                                       f32_4 %166 = OpLoad %165 
                                       f32_2 %167 = OpVectorShuffle %166 %166 1 1 
                                       f32_2 %168 = OpFMul %164 %167 
                                       f32_4 %169 = OpLoad vs_TEXCOORD5 
                                       f32_2 %170 = OpVectorShuffle %169 %169 0 1 
                                       f32_2 %171 = OpFAdd %168 %170 
                                       f32_3 %172 = OpLoad %43 
                                       f32_3 %173 = OpVectorShuffle %172 %171 3 4 2 
                                                      OpStore %43 %173 
                         read_only Texture2D %176 = OpLoad %175 
                                     sampler %178 = OpLoad %177 
                  read_only Texture2DSampled %179 = OpSampledImage %176 %178 
                                       f32_3 %180 = OpLoad %43 
                                       f32_2 %181 = OpVectorShuffle %180 %180 0 1 
                                       f32_4 %182 = OpImageSampleImplicitLod %179 %181 
                                                      OpStore %174 %182 
                                       f32_4 %183 = OpLoad %148 
                                       f32_3 %184 = OpVectorShuffle %183 %183 0 1 2 
                                       f32_4 %185 = OpLoad %174 
                                       f32_3 %186 = OpVectorShuffle %185 %185 0 1 2 
                                       f32_3 %187 = OpFMul %184 %186 
                                                      OpStore %43 %187 
                                Private f32* %189 = OpAccessChain %174 %26 
                                         f32 %190 = OpLoad %189 
                                Uniform f32* %191 = OpAccessChain %71 %152 %26 
                                         f32 %192 = OpLoad %191 
                                         f32 %193 = OpFMul %190 %192 
                                                      OpStore %188 %193 
                                       f32_3 %194 = OpLoad %43 
                                         f32 %195 = OpLoad %188 
                                       f32_3 %196 = OpCompositeConstruct %195 %195 %195 
                                       f32_3 %197 = OpFMul %194 %196 
                                       f32_4 %198 = OpLoad %148 
                                       f32_4 %199 = OpVectorShuffle %198 %197 4 5 6 3 
                                                      OpStore %148 %199 
                                       f32_4 %201 = OpLoad %142 
                                       f32_3 %202 = OpVectorShuffle %201 %201 0 1 2 
                                       f32_4 %203 = OpLoad %142 
                                       f32_3 %204 = OpVectorShuffle %203 %203 3 3 3 
                                       f32_3 %205 = OpFMul %202 %204 
                                       f32_4 %206 = OpLoad %148 
                                       f32_3 %207 = OpVectorShuffle %206 %206 0 1 2 
                                       f32_3 %208 = OpFNegate %207 
                                       f32_3 %209 = OpFAdd %205 %208 
                                       f32_4 %210 = OpLoad %200 
                                       f32_4 %211 = OpVectorShuffle %210 %209 4 5 6 3 
                                                      OpStore %200 %211 
                                Uniform f32* %212 = OpAccessChain %71 %144 %26 
                                         f32 %213 = OpLoad %212 
                                Private f32* %214 = OpAccessChain %9 %26 
                                         f32 %215 = OpLoad %214 
                                         f32 %216 = OpFMul %213 %215 
                                         f32 %217 = OpLoad %188 
                                         f32 %218 = OpFNegate %217 
                                         f32 %219 = OpFAdd %216 %218 
                                Private f32* %220 = OpAccessChain %200 %26 
                                                      OpStore %220 %219 
                                         f32 %221 = OpLoad %85 
                                       f32_4 %222 = OpCompositeConstruct %221 %221 %221 %221 
                                       f32_4 %223 = OpLoad %200 
                                       f32_4 %224 = OpFMul %222 %223 
                                                      OpStore %200 %224 
                                Uniform f32* %225 = OpAccessChain %71 %152 %26 
                                         f32 %226 = OpLoad %225 
                                Private f32* %227 = OpAccessChain %174 %26 
                                         f32 %228 = OpLoad %227 
                                         f32 %229 = OpFMul %226 %228 
                                Private f32* %230 = OpAccessChain %200 %26 
                                         f32 %231 = OpLoad %230 
                                         f32 %232 = OpFAdd %229 %231 
                                Private f32* %233 = OpAccessChain %148 %26 
                                                      OpStore %233 %232 
                                       f32_3 %234 = OpLoad %43 
                                         f32 %235 = OpLoad %188 
                                       f32_3 %236 = OpCompositeConstruct %235 %235 %235 
                                       f32_3 %237 = OpFMul %234 %236 
                                       f32_4 %238 = OpLoad %200 
                                       f32_3 %239 = OpVectorShuffle %238 %238 0 1 2 
                                       f32_3 %240 = OpFAdd %237 %239 
                                       f32_4 %241 = OpLoad %148 
                                       f32_4 %242 = OpVectorShuffle %241 %240 4 5 6 3 
                                                      OpStore %148 %242 
                                Uniform f32* %244 = OpAccessChain %71 %243 
                                         f32 %245 = OpLoad %244 
                                Uniform f32* %246 = OpAccessChain %71 %76 
                                         f32 %247 = OpLoad %246 
                                         f32 %248 = OpFMul %245 %247 
                                Private f32* %249 = OpAccessChain %43 %28 
                                                      OpStore %249 %248 
                                Private f32* %250 = OpAccessChain %43 %28 
                                         f32 %251 = OpLoad %250 
                                  Input f32* %252 = OpAccessChain vs_TEXCOORD1 %81 
                                         f32 %253 = OpLoad %252 
                                         f32 %254 = OpFMul %251 %253 
                                                      OpStore %31 %254 
                                Private f32* %255 = OpAccessChain %43 %28 
                                         f32 %256 = OpLoad %255 
                                  Input f32* %257 = OpAccessChain vs_TEXCOORD1 %81 
                                         f32 %258 = OpLoad %257 
                                         f32 %259 = OpFMul %256 %258 
                                         f32 %260 = OpFAdd %259 %87 
                                                      OpStore %85 %260 
                                         f32 %261 = OpLoad %31 
                                         f32 %262 = OpFMul %261 %91 
                                         f32 %263 = OpLoad %89 
                                         f32 %264 = OpFAdd %262 %263 
                                                      OpStore %89 %264 
                                         f32 %265 = OpLoad %89 
                                         f32 %266 = OpLoad %85 
                                         f32 %267 = OpFDiv %265 %266 
                                                      OpStore %85 %267 
                                         f32 %268 = OpLoad %85 
                                         f32 %269 = OpExtInst %1 43 %268 %56 %87 
                                                      OpStore %85 %269 
                                         f32 %270 = OpLoad %85 
                                         f32 %271 = OpFNegate %270 
                                         f32 %272 = OpFAdd %271 %87 
                                                      OpStore %85 %272 
                                Private f32* %273 = OpAccessChain %148 %26 
                                         f32 %274 = OpLoad %273 
                                         f32 %275 = OpLoad %85 
                                         f32 %276 = OpFMul %274 %275 
                                         f32 %278 = OpFAdd %276 %277 
                                                      OpStore %89 %278 
                                         f32 %280 = OpLoad %85 
                                       f32_4 %281 = OpCompositeConstruct %280 %280 %280 %280 
                                       f32_4 %282 = OpLoad %148 
                                       f32_4 %283 = OpFMul %281 %282 
                                                      OpStore %279 %283 
                                       f32_4 %286 = OpLoad %279 
                                       f32_4 %287 = OpLoad %149 
                                       f32_4 %288 = OpVectorShuffle %287 %287 3 3 3 3 
                                       f32_4 %289 = OpFMul %286 %288 
                                                      OpStore %285 %289 
                                         f32 %291 = OpLoad %89 
                                        bool %292 = OpFOrdLessThan %291 %56 
                                                      OpStore %290 %292 
                                        bool %293 = OpLoad %290 
                                         i32 %294 = OpSelect %293 %61 %60 
                                         i32 %295 = OpIMul %294 %63 
                                        bool %296 = OpINotEqual %295 %60 
                                                      OpSelectionMerge %298 None 
                                                      OpBranchConditional %296 %297 %298 
                                             %297 = OpLabel 
                                                      OpKill
                                             %298 = OpLabel 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "UNITY_UI_CLIP_RECT" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _FaceDilate;
uniform 	float _OutlineSoftness;
uniform 	float _OutlineWidth;
uniform 	vec4 hlslcc_mtx4x4_EnvMatrix[4];
uniform 	float _WeightNormal;
uniform 	float _WeightBold;
uniform 	float _ScaleRatioA;
uniform 	float _VertexOffsetX;
uniform 	float _VertexOffsetY;
uniform 	vec4 _ClipRect;
uniform 	float _MaskSoftnessX;
uniform 	float _MaskSoftnessY;
uniform 	float _GradientScale;
uniform 	float _ScaleX;
uniform 	float _ScaleY;
uniform 	float _PerspectiveFilter;
uniform 	float _Sharpness;
uniform 	vec4 _FaceTex_ST;
uniform 	vec4 _OutlineTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
out mediump vec4 vs_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD5;
vec3 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec3 u_xlat6;
vec2 u_xlat8;
bool u_xlatb8;
float u_xlat12;
bool u_xlatb12;
float u_xlat13;
void main()
{
    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
    gl_Position = u_xlat2;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat8.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;
    u_xlat8.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat8.xy;
    u_xlat8.xy = abs(u_xlat8.xy) * vec2(_ScaleX, _ScaleY);
    u_xlat8.xy = u_xlat2.ww / u_xlat8.xy;
    u_xlat13 = dot(u_xlat8.xy, u_xlat8.xy);
    u_xlat8.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) * vec2(0.25, 0.25) + u_xlat8.xy;
    vs_TEXCOORD2.zw = vec2(0.25, 0.25) / u_xlat8.xy;
    u_xlat8.x = inversesqrt(u_xlat13);
    u_xlat12 = abs(in_TEXCOORD1.y) * _GradientScale;
    u_xlat13 = _Sharpness + 1.0;
    u_xlat12 = u_xlat12 * u_xlat13;
    u_xlat13 = u_xlat12 * u_xlat8.x;
    u_xlat2.x = (-_PerspectiveFilter) + 1.0;
    u_xlat2.x = abs(u_xlat13) * u_xlat2.x;
    u_xlat8.x = u_xlat8.x * u_xlat12 + (-u_xlat2.x);
    u_xlat3.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat3.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat3.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat6.xyz = vec3(u_xlat12) * u_xlat3.xyz;
    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat3.xyz = vec3(u_xlat12) * u_xlat1.xyz;
    u_xlat12 = dot(u_xlat6.xyz, u_xlat3.xyz);
    u_xlat8.x = abs(u_xlat12) * u_xlat8.x + u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(hlslcc_mtx4x4glstate_matrix_projection[3].w==0.0);
#else
    u_xlatb12 = hlslcc_mtx4x4glstate_matrix_projection[3].w==0.0;
#endif
    u_xlat6.x = (u_xlatb12) ? u_xlat8.x : u_xlat13;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.0>=in_TEXCOORD1.y);
#else
    u_xlatb8 = 0.0>=in_TEXCOORD1.y;
#endif
    u_xlat8.x = u_xlatb8 ? 1.0 : float(0.0);
    u_xlat12 = (-_WeightNormal) + _WeightBold;
    u_xlat8.x = u_xlat8.x * u_xlat12 + _WeightNormal;
    u_xlat8.x = u_xlat8.x * 0.25 + _FaceDilate;
    u_xlat8.x = u_xlat8.x * _ScaleRatioA;
    u_xlat6.z = u_xlat8.x * 0.5;
    vs_TEXCOORD1.yw = u_xlat6.xz;
    u_xlat12 = 0.5 / u_xlat6.x;
    u_xlat13 = (-_OutlineWidth) * _ScaleRatioA + 1.0;
    u_xlat13 = (-_OutlineSoftness) * _ScaleRatioA + u_xlat13;
    u_xlat13 = u_xlat13 * 0.5 + (-u_xlat12);
    vs_TEXCOORD1.x = (-u_xlat8.x) * 0.5 + u_xlat13;
    u_xlat8.x = (-u_xlat8.x) * 0.5 + 0.5;
    vs_TEXCOORD1.z = u_xlat12 + u_xlat8.x;
    u_xlat2 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));
    u_xlat2 = min(u_xlat2, vec4(2e+10, 2e+10, 2e+10, 2e+10));
    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + (-u_xlat2.xy);
    vs_TEXCOORD2.xy = (-u_xlat2.zw) + u_xlat0.xy;
    u_xlat0.xyz = u_xlat1.yyy * hlslcc_mtx4x4_EnvMatrix[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4_EnvMatrix[0].xyz * u_xlat1.xxx + u_xlat0.xyz;
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4_EnvMatrix[2].xyz * u_xlat1.zzz + u_xlat0.xyz;
    u_xlat0.x = in_TEXCOORD1.x * 0.000244140625;
    u_xlat8.x = floor(u_xlat0.x);
    u_xlat8.y = (-u_xlat8.x) * 4096.0 + in_TEXCOORD1.x;
    u_xlat0.xy = u_xlat8.xy * vec2(0.001953125, 0.001953125);
    vs_TEXCOORD5.xy = u_xlat0.xy * _FaceTex_ST.xy + _FaceTex_ST.zw;
    vs_TEXCOORD5.zw = u_xlat0.xy * _OutlineTex_ST.xy + _OutlineTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _Time;
uniform 	float _FaceUVSpeedX;
uniform 	float _FaceUVSpeedY;
uniform 	mediump vec4 _FaceColor;
uniform 	float _OutlineSoftness;
uniform 	float _OutlineUVSpeedX;
uniform 	float _OutlineUVSpeedY;
uniform 	mediump vec4 _OutlineColor;
uniform 	float _OutlineWidth;
uniform 	float _ScaleRatioA;
uniform 	vec4 _ClipRect;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _FaceTex;
UNITY_LOCATION(2) uniform mediump sampler2D _OutlineTex;
in mediump vec4 vs_COLOR0;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
mediump float u_xlat16_1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump vec4 u_xlat16_4;
float u_xlat5;
bool u_xlatb5;
mediump float u_xlat16_6;
float u_xlat9;
mediump float u_xlat16_11;
void main()
{
    u_xlat16_0.x = texture(_MainTex, vs_TEXCOORD0.xy).w;
    u_xlat5 = u_xlat16_0.x + (-vs_TEXCOORD1.x);
    u_xlat0.x = (-u_xlat16_0.x) + vs_TEXCOORD1.z;
#ifdef UNITY_ADRENO_ES3
    u_xlatb5 = !!(u_xlat5<0.0);
#else
    u_xlatb5 = u_xlat5<0.0;
#endif
    if(u_xlatb5){discard;}
    u_xlat5 = _OutlineWidth * _ScaleRatioA;
    u_xlat5 = u_xlat5 * vs_TEXCOORD1.y;
    u_xlat16_1 = min(u_xlat5, 1.0);
    u_xlat16_6 = u_xlat5 * 0.5;
    u_xlat16_1 = sqrt(u_xlat16_1);
    u_xlat16_11 = u_xlat0.x * vs_TEXCOORD1.y + u_xlat16_6;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_11 = min(max(u_xlat16_11, 0.0), 1.0);
#else
    u_xlat16_11 = clamp(u_xlat16_11, 0.0, 1.0);
#endif
    u_xlat16_6 = u_xlat0.x * vs_TEXCOORD1.y + (-u_xlat16_6);
    u_xlat16_1 = u_xlat16_1 * u_xlat16_11;
    u_xlat0.xy = vec2(_OutlineUVSpeedX, _OutlineUVSpeedY) * _Time.yy + vs_TEXCOORD5.zw;
    u_xlat16_0 = texture(_OutlineTex, u_xlat0.xy);
    u_xlat2 = u_xlat16_0 * _OutlineColor;
    u_xlat16_3.xyz = vs_COLOR0.xyz * _FaceColor.xyz;
    u_xlat0.xy = vec2(_FaceUVSpeedX, _FaceUVSpeedY) * _Time.yy + vs_TEXCOORD5.xy;
    u_xlat16_4 = texture(_FaceTex, u_xlat0.xy);
    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;
    u_xlat4.x = u_xlat16_4.w * _FaceColor.w;
    u_xlat16_3.xyz = u_xlat0.xyz * u_xlat4.xxx;
    u_xlat16_2.xyz = u_xlat2.xyz * u_xlat2.www + (-u_xlat16_3.xyz);
    u_xlat16_2.w = _OutlineColor.w * u_xlat16_0.w + (-u_xlat4.x);
    u_xlat16_2 = vec4(u_xlat16_1) * u_xlat16_2;
    u_xlat16_0.xyz = u_xlat0.xyz * u_xlat4.xxx + u_xlat16_2.xyz;
    u_xlat16_0.w = _FaceColor.w * u_xlat16_4.w + u_xlat16_2.w;
    u_xlat4.x = _OutlineSoftness * _ScaleRatioA;
    u_xlat9 = u_xlat4.x * vs_TEXCOORD1.y;
    u_xlat16_1 = u_xlat4.x * vs_TEXCOORD1.y + 1.0;
    u_xlat16_6 = u_xlat9 * 0.5 + u_xlat16_6;
    u_xlat16_1 = u_xlat16_6 / u_xlat16_1;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1 = min(max(u_xlat16_1, 0.0), 1.0);
#else
    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);
#endif
    u_xlat16_1 = (-u_xlat16_1) + 1.0;
    u_xlat16_0 = u_xlat16_0 * vec4(u_xlat16_1);
    u_xlat4.xy = (-_ClipRect.xy) + _ClipRect.zw;
    u_xlat4.xy = u_xlat4.xy + -abs(vs_TEXCOORD2.xy);
    u_xlat4.xy = u_xlat4.xy * vs_TEXCOORD2.zw;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.xy = min(max(u_xlat4.xy, 0.0), 1.0);
#else
    u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);
#endif
    u_xlat16_1 = u_xlat4.y * u_xlat4.x;
    u_xlat16_0 = u_xlat16_0 * vec4(u_xlat16_1);
    SV_Target0 = u_xlat16_0 * vs_COLOR0.wwww;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "UNITY_UI_CLIP_RECT" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _FaceDilate;
uniform 	float _OutlineSoftness;
uniform 	float _OutlineWidth;
uniform 	vec4 hlslcc_mtx4x4_EnvMatrix[4];
uniform 	float _WeightNormal;
uniform 	float _WeightBold;
uniform 	float _ScaleRatioA;
uniform 	float _VertexOffsetX;
uniform 	float _VertexOffsetY;
uniform 	vec4 _ClipRect;
uniform 	float _MaskSoftnessX;
uniform 	float _MaskSoftnessY;
uniform 	float _GradientScale;
uniform 	float _ScaleX;
uniform 	float _ScaleY;
uniform 	float _PerspectiveFilter;
uniform 	float _Sharpness;
uniform 	vec4 _FaceTex_ST;
uniform 	vec4 _OutlineTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
out mediump vec4 vs_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD5;
vec3 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec3 u_xlat6;
vec2 u_xlat8;
bool u_xlatb8;
float u_xlat12;
bool u_xlatb12;
float u_xlat13;
void main()
{
    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
    gl_Position = u_xlat2;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat8.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;
    u_xlat8.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat8.xy;
    u_xlat8.xy = abs(u_xlat8.xy) * vec2(_ScaleX, _ScaleY);
    u_xlat8.xy = u_xlat2.ww / u_xlat8.xy;
    u_xlat13 = dot(u_xlat8.xy, u_xlat8.xy);
    u_xlat8.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) * vec2(0.25, 0.25) + u_xlat8.xy;
    vs_TEXCOORD2.zw = vec2(0.25, 0.25) / u_xlat8.xy;
    u_xlat8.x = inversesqrt(u_xlat13);
    u_xlat12 = abs(in_TEXCOORD1.y) * _GradientScale;
    u_xlat13 = _Sharpness + 1.0;
    u_xlat12 = u_xlat12 * u_xlat13;
    u_xlat13 = u_xlat12 * u_xlat8.x;
    u_xlat2.x = (-_PerspectiveFilter) + 1.0;
    u_xlat2.x = abs(u_xlat13) * u_xlat2.x;
    u_xlat8.x = u_xlat8.x * u_xlat12 + (-u_xlat2.x);
    u_xlat3.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat3.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat3.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat6.xyz = vec3(u_xlat12) * u_xlat3.xyz;
    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat3.xyz = vec3(u_xlat12) * u_xlat1.xyz;
    u_xlat12 = dot(u_xlat6.xyz, u_xlat3.xyz);
    u_xlat8.x = abs(u_xlat12) * u_xlat8.x + u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(hlslcc_mtx4x4glstate_matrix_projection[3].w==0.0);
#else
    u_xlatb12 = hlslcc_mtx4x4glstate_matrix_projection[3].w==0.0;
#endif
    u_xlat6.x = (u_xlatb12) ? u_xlat8.x : u_xlat13;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.0>=in_TEXCOORD1.y);
#else
    u_xlatb8 = 0.0>=in_TEXCOORD1.y;
#endif
    u_xlat8.x = u_xlatb8 ? 1.0 : float(0.0);
    u_xlat12 = (-_WeightNormal) + _WeightBold;
    u_xlat8.x = u_xlat8.x * u_xlat12 + _WeightNormal;
    u_xlat8.x = u_xlat8.x * 0.25 + _FaceDilate;
    u_xlat8.x = u_xlat8.x * _ScaleRatioA;
    u_xlat6.z = u_xlat8.x * 0.5;
    vs_TEXCOORD1.yw = u_xlat6.xz;
    u_xlat12 = 0.5 / u_xlat6.x;
    u_xlat13 = (-_OutlineWidth) * _ScaleRatioA + 1.0;
    u_xlat13 = (-_OutlineSoftness) * _ScaleRatioA + u_xlat13;
    u_xlat13 = u_xlat13 * 0.5 + (-u_xlat12);
    vs_TEXCOORD1.x = (-u_xlat8.x) * 0.5 + u_xlat13;
    u_xlat8.x = (-u_xlat8.x) * 0.5 + 0.5;
    vs_TEXCOORD1.z = u_xlat12 + u_xlat8.x;
    u_xlat2 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));
    u_xlat2 = min(u_xlat2, vec4(2e+10, 2e+10, 2e+10, 2e+10));
    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + (-u_xlat2.xy);
    vs_TEXCOORD2.xy = (-u_xlat2.zw) + u_xlat0.xy;
    u_xlat0.xyz = u_xlat1.yyy * hlslcc_mtx4x4_EnvMatrix[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4_EnvMatrix[0].xyz * u_xlat1.xxx + u_xlat0.xyz;
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4_EnvMatrix[2].xyz * u_xlat1.zzz + u_xlat0.xyz;
    u_xlat0.x = in_TEXCOORD1.x * 0.000244140625;
    u_xlat8.x = floor(u_xlat0.x);
    u_xlat8.y = (-u_xlat8.x) * 4096.0 + in_TEXCOORD1.x;
    u_xlat0.xy = u_xlat8.xy * vec2(0.001953125, 0.001953125);
    vs_TEXCOORD5.xy = u_xlat0.xy * _FaceTex_ST.xy + _FaceTex_ST.zw;
    vs_TEXCOORD5.zw = u_xlat0.xy * _OutlineTex_ST.xy + _OutlineTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _Time;
uniform 	float _FaceUVSpeedX;
uniform 	float _FaceUVSpeedY;
uniform 	mediump vec4 _FaceColor;
uniform 	float _OutlineSoftness;
uniform 	float _OutlineUVSpeedX;
uniform 	float _OutlineUVSpeedY;
uniform 	mediump vec4 _OutlineColor;
uniform 	float _OutlineWidth;
uniform 	float _ScaleRatioA;
uniform 	vec4 _ClipRect;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _FaceTex;
UNITY_LOCATION(2) uniform mediump sampler2D _OutlineTex;
in mediump vec4 vs_COLOR0;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
mediump float u_xlat16_1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump vec4 u_xlat16_4;
float u_xlat5;
bool u_xlatb5;
mediump float u_xlat16_6;
float u_xlat9;
mediump float u_xlat16_11;
void main()
{
    u_xlat16_0.x = texture(_MainTex, vs_TEXCOORD0.xy).w;
    u_xlat5 = u_xlat16_0.x + (-vs_TEXCOORD1.x);
    u_xlat0.x = (-u_xlat16_0.x) + vs_TEXCOORD1.z;
#ifdef UNITY_ADRENO_ES3
    u_xlatb5 = !!(u_xlat5<0.0);
#else
    u_xlatb5 = u_xlat5<0.0;
#endif
    if(u_xlatb5){discard;}
    u_xlat5 = _OutlineWidth * _ScaleRatioA;
    u_xlat5 = u_xlat5 * vs_TEXCOORD1.y;
    u_xlat16_1 = min(u_xlat5, 1.0);
    u_xlat16_6 = u_xlat5 * 0.5;
    u_xlat16_1 = sqrt(u_xlat16_1);
    u_xlat16_11 = u_xlat0.x * vs_TEXCOORD1.y + u_xlat16_6;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_11 = min(max(u_xlat16_11, 0.0), 1.0);
#else
    u_xlat16_11 = clamp(u_xlat16_11, 0.0, 1.0);
#endif
    u_xlat16_6 = u_xlat0.x * vs_TEXCOORD1.y + (-u_xlat16_6);
    u_xlat16_1 = u_xlat16_1 * u_xlat16_11;
    u_xlat0.xy = vec2(_OutlineUVSpeedX, _OutlineUVSpeedY) * _Time.yy + vs_TEXCOORD5.zw;
    u_xlat16_0 = texture(_OutlineTex, u_xlat0.xy);
    u_xlat2 = u_xlat16_0 * _OutlineColor;
    u_xlat16_3.xyz = vs_COLOR0.xyz * _FaceColor.xyz;
    u_xlat0.xy = vec2(_FaceUVSpeedX, _FaceUVSpeedY) * _Time.yy + vs_TEXCOORD5.xy;
    u_xlat16_4 = texture(_FaceTex, u_xlat0.xy);
    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;
    u_xlat4.x = u_xlat16_4.w * _FaceColor.w;
    u_xlat16_3.xyz = u_xlat0.xyz * u_xlat4.xxx;
    u_xlat16_2.xyz = u_xlat2.xyz * u_xlat2.www + (-u_xlat16_3.xyz);
    u_xlat16_2.w = _OutlineColor.w * u_xlat16_0.w + (-u_xlat4.x);
    u_xlat16_2 = vec4(u_xlat16_1) * u_xlat16_2;
    u_xlat16_0.xyz = u_xlat0.xyz * u_xlat4.xxx + u_xlat16_2.xyz;
    u_xlat16_0.w = _FaceColor.w * u_xlat16_4.w + u_xlat16_2.w;
    u_xlat4.x = _OutlineSoftness * _ScaleRatioA;
    u_xlat9 = u_xlat4.x * vs_TEXCOORD1.y;
    u_xlat16_1 = u_xlat4.x * vs_TEXCOORD1.y + 1.0;
    u_xlat16_6 = u_xlat9 * 0.5 + u_xlat16_6;
    u_xlat16_1 = u_xlat16_6 / u_xlat16_1;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1 = min(max(u_xlat16_1, 0.0), 1.0);
#else
    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);
#endif
    u_xlat16_1 = (-u_xlat16_1) + 1.0;
    u_xlat16_0 = u_xlat16_0 * vec4(u_xlat16_1);
    u_xlat4.xy = (-_ClipRect.xy) + _ClipRect.zw;
    u_xlat4.xy = u_xlat4.xy + -abs(vs_TEXCOORD2.xy);
    u_xlat4.xy = u_xlat4.xy * vs_TEXCOORD2.zw;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.xy = min(max(u_xlat4.xy, 0.0), 1.0);
#else
    u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);
#endif
    u_xlat16_1 = u_xlat4.y * u_xlat4.x;
    u_xlat16_0 = u_xlat16_0 * vec4(u_xlat16_1);
    SV_Target0 = u_xlat16_0 * vs_COLOR0.wwww;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "UNITY_UI_CLIP_RECT" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _FaceDilate;
uniform 	float _OutlineSoftness;
uniform 	float _OutlineWidth;
uniform 	vec4 hlslcc_mtx4x4_EnvMatrix[4];
uniform 	float _WeightNormal;
uniform 	float _WeightBold;
uniform 	float _ScaleRatioA;
uniform 	float _VertexOffsetX;
uniform 	float _VertexOffsetY;
uniform 	vec4 _ClipRect;
uniform 	float _MaskSoftnessX;
uniform 	float _MaskSoftnessY;
uniform 	float _GradientScale;
uniform 	float _ScaleX;
uniform 	float _ScaleY;
uniform 	float _PerspectiveFilter;
uniform 	float _Sharpness;
uniform 	vec4 _FaceTex_ST;
uniform 	vec4 _OutlineTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
out mediump vec4 vs_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD5;
vec3 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec3 u_xlat6;
vec2 u_xlat8;
bool u_xlatb8;
float u_xlat12;
bool u_xlatb12;
float u_xlat13;
void main()
{
    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
    gl_Position = u_xlat2;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat8.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;
    u_xlat8.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat8.xy;
    u_xlat8.xy = abs(u_xlat8.xy) * vec2(_ScaleX, _ScaleY);
    u_xlat8.xy = u_xlat2.ww / u_xlat8.xy;
    u_xlat13 = dot(u_xlat8.xy, u_xlat8.xy);
    u_xlat8.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) * vec2(0.25, 0.25) + u_xlat8.xy;
    vs_TEXCOORD2.zw = vec2(0.25, 0.25) / u_xlat8.xy;
    u_xlat8.x = inversesqrt(u_xlat13);
    u_xlat12 = abs(in_TEXCOORD1.y) * _GradientScale;
    u_xlat13 = _Sharpness + 1.0;
    u_xlat12 = u_xlat12 * u_xlat13;
    u_xlat13 = u_xlat12 * u_xlat8.x;
    u_xlat2.x = (-_PerspectiveFilter) + 1.0;
    u_xlat2.x = abs(u_xlat13) * u_xlat2.x;
    u_xlat8.x = u_xlat8.x * u_xlat12 + (-u_xlat2.x);
    u_xlat3.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat3.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat3.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat6.xyz = vec3(u_xlat12) * u_xlat3.xyz;
    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat3.xyz = vec3(u_xlat12) * u_xlat1.xyz;
    u_xlat12 = dot(u_xlat6.xyz, u_xlat3.xyz);
    u_xlat8.x = abs(u_xlat12) * u_xlat8.x + u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(hlslcc_mtx4x4glstate_matrix_projection[3].w==0.0);
#else
    u_xlatb12 = hlslcc_mtx4x4glstate_matrix_projection[3].w==0.0;
#endif
    u_xlat6.x = (u_xlatb12) ? u_xlat8.x : u_xlat13;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.0>=in_TEXCOORD1.y);
#else
    u_xlatb8 = 0.0>=in_TEXCOORD1.y;
#endif
    u_xlat8.x = u_xlatb8 ? 1.0 : float(0.0);
    u_xlat12 = (-_WeightNormal) + _WeightBold;
    u_xlat8.x = u_xlat8.x * u_xlat12 + _WeightNormal;
    u_xlat8.x = u_xlat8.x * 0.25 + _FaceDilate;
    u_xlat8.x = u_xlat8.x * _ScaleRatioA;
    u_xlat6.z = u_xlat8.x * 0.5;
    vs_TEXCOORD1.yw = u_xlat6.xz;
    u_xlat12 = 0.5 / u_xlat6.x;
    u_xlat13 = (-_OutlineWidth) * _ScaleRatioA + 1.0;
    u_xlat13 = (-_OutlineSoftness) * _ScaleRatioA + u_xlat13;
    u_xlat13 = u_xlat13 * 0.5 + (-u_xlat12);
    vs_TEXCOORD1.x = (-u_xlat8.x) * 0.5 + u_xlat13;
    u_xlat8.x = (-u_xlat8.x) * 0.5 + 0.5;
    vs_TEXCOORD1.z = u_xlat12 + u_xlat8.x;
    u_xlat2 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));
    u_xlat2 = min(u_xlat2, vec4(2e+10, 2e+10, 2e+10, 2e+10));
    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + (-u_xlat2.xy);
    vs_TEXCOORD2.xy = (-u_xlat2.zw) + u_xlat0.xy;
    u_xlat0.xyz = u_xlat1.yyy * hlslcc_mtx4x4_EnvMatrix[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4_EnvMatrix[0].xyz * u_xlat1.xxx + u_xlat0.xyz;
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4_EnvMatrix[2].xyz * u_xlat1.zzz + u_xlat0.xyz;
    u_xlat0.x = in_TEXCOORD1.x * 0.000244140625;
    u_xlat8.x = floor(u_xlat0.x);
    u_xlat8.y = (-u_xlat8.x) * 4096.0 + in_TEXCOORD1.x;
    u_xlat0.xy = u_xlat8.xy * vec2(0.001953125, 0.001953125);
    vs_TEXCOORD5.xy = u_xlat0.xy * _FaceTex_ST.xy + _FaceTex_ST.zw;
    vs_TEXCOORD5.zw = u_xlat0.xy * _OutlineTex_ST.xy + _OutlineTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _Time;
uniform 	float _FaceUVSpeedX;
uniform 	float _FaceUVSpeedY;
uniform 	mediump vec4 _FaceColor;
uniform 	float _OutlineSoftness;
uniform 	float _OutlineUVSpeedX;
uniform 	float _OutlineUVSpeedY;
uniform 	mediump vec4 _OutlineColor;
uniform 	float _OutlineWidth;
uniform 	float _ScaleRatioA;
uniform 	vec4 _ClipRect;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _FaceTex;
UNITY_LOCATION(2) uniform mediump sampler2D _OutlineTex;
in mediump vec4 vs_COLOR0;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
mediump float u_xlat16_1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump vec4 u_xlat16_4;
float u_xlat5;
bool u_xlatb5;
mediump float u_xlat16_6;
float u_xlat9;
mediump float u_xlat16_11;
void main()
{
    u_xlat16_0.x = texture(_MainTex, vs_TEXCOORD0.xy).w;
    u_xlat5 = u_xlat16_0.x + (-vs_TEXCOORD1.x);
    u_xlat0.x = (-u_xlat16_0.x) + vs_TEXCOORD1.z;
#ifdef UNITY_ADRENO_ES3
    u_xlatb5 = !!(u_xlat5<0.0);
#else
    u_xlatb5 = u_xlat5<0.0;
#endif
    if(u_xlatb5){discard;}
    u_xlat5 = _OutlineWidth * _ScaleRatioA;
    u_xlat5 = u_xlat5 * vs_TEXCOORD1.y;
    u_xlat16_1 = min(u_xlat5, 1.0);
    u_xlat16_6 = u_xlat5 * 0.5;
    u_xlat16_1 = sqrt(u_xlat16_1);
    u_xlat16_11 = u_xlat0.x * vs_TEXCOORD1.y + u_xlat16_6;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_11 = min(max(u_xlat16_11, 0.0), 1.0);
#else
    u_xlat16_11 = clamp(u_xlat16_11, 0.0, 1.0);
#endif
    u_xlat16_6 = u_xlat0.x * vs_TEXCOORD1.y + (-u_xlat16_6);
    u_xlat16_1 = u_xlat16_1 * u_xlat16_11;
    u_xlat0.xy = vec2(_OutlineUVSpeedX, _OutlineUVSpeedY) * _Time.yy + vs_TEXCOORD5.zw;
    u_xlat16_0 = texture(_OutlineTex, u_xlat0.xy);
    u_xlat2 = u_xlat16_0 * _OutlineColor;
    u_xlat16_3.xyz = vs_COLOR0.xyz * _FaceColor.xyz;
    u_xlat0.xy = vec2(_FaceUVSpeedX, _FaceUVSpeedY) * _Time.yy + vs_TEXCOORD5.xy;
    u_xlat16_4 = texture(_FaceTex, u_xlat0.xy);
    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;
    u_xlat4.x = u_xlat16_4.w * _FaceColor.w;
    u_xlat16_3.xyz = u_xlat0.xyz * u_xlat4.xxx;
    u_xlat16_2.xyz = u_xlat2.xyz * u_xlat2.www + (-u_xlat16_3.xyz);
    u_xlat16_2.w = _OutlineColor.w * u_xlat16_0.w + (-u_xlat4.x);
    u_xlat16_2 = vec4(u_xlat16_1) * u_xlat16_2;
    u_xlat16_0.xyz = u_xlat0.xyz * u_xlat4.xxx + u_xlat16_2.xyz;
    u_xlat16_0.w = _FaceColor.w * u_xlat16_4.w + u_xlat16_2.w;
    u_xlat4.x = _OutlineSoftness * _ScaleRatioA;
    u_xlat9 = u_xlat4.x * vs_TEXCOORD1.y;
    u_xlat16_1 = u_xlat4.x * vs_TEXCOORD1.y + 1.0;
    u_xlat16_6 = u_xlat9 * 0.5 + u_xlat16_6;
    u_xlat16_1 = u_xlat16_6 / u_xlat16_1;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1 = min(max(u_xlat16_1, 0.0), 1.0);
#else
    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);
#endif
    u_xlat16_1 = (-u_xlat16_1) + 1.0;
    u_xlat16_0 = u_xlat16_0 * vec4(u_xlat16_1);
    u_xlat4.xy = (-_ClipRect.xy) + _ClipRect.zw;
    u_xlat4.xy = u_xlat4.xy + -abs(vs_TEXCOORD2.xy);
    u_xlat4.xy = u_xlat4.xy * vs_TEXCOORD2.zw;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.xy = min(max(u_xlat4.xy, 0.0), 1.0);
#else
    u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);
#endif
    u_xlat16_1 = u_xlat4.y * u_xlat4.x;
    u_xlat16_0 = u_xlat16_0 * vec4(u_xlat16_1);
    SV_Target0 = u_xlat16_0 * vs_COLOR0.wwww;
    return;
}

#endif
"
}
SubProgram "vulkan hw_tier00 " {
Keywords { "UNITY_UI_CLIP_RECT" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 517
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %12 %121 %125 %126 %129 %131 %183 %193 %236 %358 %452 %485 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpDecorate %12 Location 12 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpDecorate %19 ArrayStride 19 
                                                      OpDecorate %20 ArrayStride 20 
                                                      OpDecorate %21 ArrayStride 21 
                                                      OpDecorate %22 ArrayStride 22 
                                                      OpMemberDecorate %23 0 Offset 23 
                                                      OpMemberDecorate %23 1 Offset 23 
                                                      OpMemberDecorate %23 2 Offset 23 
                                                      OpMemberDecorate %23 3 Offset 23 
                                                      OpMemberDecorate %23 4 Offset 23 
                                                      OpMemberDecorate %23 5 Offset 23 
                                                      OpMemberDecorate %23 6 Offset 23 
                                                      OpMemberDecorate %23 7 Offset 23 
                                                      OpMemberDecorate %23 8 Offset 23 
                                                      OpMemberDecorate %23 9 Offset 23 
                                                      OpMemberDecorate %23 10 Offset 23 
                                                      OpMemberDecorate %23 11 Offset 23 
                                                      OpMemberDecorate %23 12 Offset 23 
                                                      OpMemberDecorate %23 13 Offset 23 
                                                      OpMemberDecorate %23 14 Offset 23 
                                                      OpMemberDecorate %23 15 Offset 23 
                                                      OpMemberDecorate %23 16 Offset 23 
                                                      OpMemberDecorate %23 17 Offset 23 
                                                      OpMemberDecorate %23 18 Offset 23 
                                                      OpMemberDecorate %23 19 Offset 23 
                                                      OpMemberDecorate %23 20 Offset 23 
                                                      OpMemberDecorate %23 21 Offset 23 
                                                      OpMemberDecorate %23 22 Offset 23 
                                                      OpMemberDecorate %23 23 Offset 23 
                                                      OpMemberDecorate %23 24 Offset 23 
                                                      OpDecorate %23 Block 
                                                      OpDecorate %25 DescriptorSet 25 
                                                      OpDecorate %25 Binding 25 
                                                      OpMemberDecorate %119 0 BuiltIn 119 
                                                      OpMemberDecorate %119 1 BuiltIn 119 
                                                      OpMemberDecorate %119 2 BuiltIn 119 
                                                      OpDecorate %119 Block 
                                                      OpDecorate %125 RelaxedPrecision 
                                                      OpDecorate %125 Location 125 
                                                      OpDecorate %126 RelaxedPrecision 
                                                      OpDecorate %126 Location 126 
                                                      OpDecorate %127 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD0 Location 129 
                                                      OpDecorate %131 Location 131 
                                                      OpDecorate vs_TEXCOORD2 Location 183 
                                                      OpDecorate %193 Location 193 
                                                      OpDecorate %236 Location 236 
                                                      OpDecorate vs_TEXCOORD1 Location 358 
                                                      OpDecorate vs_TEXCOORD3 Location 452 
                                                      OpDecorate vs_TEXCOORD5 Location 485 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 3 
                                               %8 = OpTypePointer Private %7 
                                Private f32_3* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 4 
                                              %11 = OpTypePointer Input %10 
                                 Input f32_4* %12 = OpVariable Input 
                                              %13 = OpTypeVector %6 2 
                                              %16 = OpTypeInt 32 0 
                                          u32 %17 = OpConstant 4 
                                              %18 = OpTypeArray %10 %17 
                                              %19 = OpTypeArray %10 %17 
                                              %20 = OpTypeArray %10 %17 
                                              %21 = OpTypeArray %10 %17 
                                              %22 = OpTypeArray %10 %17 
                                              %23 = OpTypeStruct %7 %10 %18 %19 %20 %21 %6 %6 %6 %22 %6 %6 %6 %6 %6 %10 %6 %6 %6 %6 %6 %6 %6 %10 %10 
                                              %24 = OpTypePointer Uniform %23 
Uniform struct {f32_3; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4[4]; f32; f32; f32; f32_4[4]; f32; f32; f32; f32; f32; f32_4; f32; f32; f32; f32; f32; f32; f32; f32_4; f32_4;}* %25 = OpVariable Uniform 
                                              %26 = OpTypeInt 32 1 
                                          i32 %27 = OpConstant 13 
                                              %28 = OpTypePointer Uniform %6 
                                          i32 %31 = OpConstant 14 
                                              %38 = OpTypePointer Private %10 
                               Private f32_4* %39 = OpVariable Private 
                                          i32 %42 = OpConstant 2 
                                          i32 %43 = OpConstant 1 
                                              %44 = OpTypePointer Uniform %10 
                                          i32 %48 = OpConstant 0 
                               Private f32_4* %63 = OpVariable Private 
                                          i32 %65 = OpConstant 3 
                                              %83 = OpTypePointer Uniform %7 
                               Private f32_4* %89 = OpVariable Private 
                                          i32 %92 = OpConstant 5 
                                         u32 %117 = OpConstant 1 
                                             %118 = OpTypeArray %6 %117 
                                             %119 = OpTypeStruct %10 %6 %118 
                                             %120 = OpTypePointer Output %119 
        Output struct {f32_4; f32; f32[1];}* %121 = OpVariable Output 
                                             %123 = OpTypePointer Output %10 
                               Output f32_4* %125 = OpVariable Output 
                                Input f32_4* %126 = OpVariable Input 
                                             %128 = OpTypePointer Output %13 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                             %130 = OpTypePointer Input %13 
                                Input f32_2* %131 = OpVariable Input 
                                             %133 = OpTypePointer Private %13 
                              Private f32_2* %134 = OpVariable Private 
                                         i32 %138 = OpConstant 4 
                                         i32 %154 = OpConstant 19 
                                         i32 %157 = OpConstant 20 
                                             %166 = OpTypePointer Private %6 
                                Private f32* %167 = OpVariable Private 
                                         i32 %171 = OpConstant 16 
                                         i32 %174 = OpConstant 17 
                                         f32 %178 = OpConstant 3.674022E-40 
                                       f32_2 %179 = OpConstantComposite %178 %178 
                       Output f32_4* vs_TEXCOORD2 = OpVariable Output 
                                         u32 %190 = OpConstant 0 
                                Private f32* %192 = OpVariable Private 
                                Input f32_2* %193 = OpVariable Input 
                                             %194 = OpTypePointer Input %6 
                                         i32 %198 = OpConstant 18 
                                         i32 %202 = OpConstant 22 
                                         f32 %205 = OpConstant 3.674022E-40 
                                         i32 %214 = OpConstant 21 
                                             %235 = OpTypePointer Input %7 
                                Input f32_3* %236 = OpVariable Input 
                                         u32 %254 = OpConstant 2 
                              Private f32_3* %263 = OpVariable Private 
                                             %296 = OpTypeBool 
                                             %297 = OpTypePointer Private %296 
                               Private bool* %298 = OpVariable Private 
                                         u32 %299 = OpConstant 3 
                                         f32 %302 = OpConstant 3.674022E-40 
                                             %305 = OpTypePointer Function %6 
                               Private bool* %315 = OpVariable Private 
                                         i32 %322 = OpConstant 10 
                                         i32 %326 = OpConstant 11 
                                         i32 %341 = OpConstant 6 
                                         i32 %348 = OpConstant 12 
                                         f32 %355 = OpConstant 3.674022E-40 
                       Output f32_4* vs_TEXCOORD1 = OpVariable Output 
                                         i32 %366 = OpConstant 8 
                                         i32 %374 = OpConstant 7 
                                             %394 = OpTypePointer Output %6 
                                         i32 %407 = OpConstant 15 
                                         f32 %410 = OpConstant 3.674022E-40 
                                       f32_4 %411 = OpConstantComposite %410 %410 %410 %410 
                                         f32 %414 = OpConstant 3.674022E-40 
                                       f32_4 %415 = OpConstantComposite %414 %414 %414 %414 
                                         f32 %419 = OpConstant 3.674022E-40 
                                       f32_2 %420 = OpConstantComposite %419 %419 
                                         i32 %438 = OpConstant 9 
                                             %451 = OpTypePointer Output %7 
                       Output f32_3* vs_TEXCOORD3 = OpVariable Output 
                                         f32 %463 = OpConstant 3.674022E-40 
                                         f32 %473 = OpConstant 3.674022E-40 
                                         f32 %480 = OpConstant 3.674022E-40 
                                       f32_2 %481 = OpConstantComposite %480 %480 
                       Output f32_4* vs_TEXCOORD5 = OpVariable Output 
                                         i32 %488 = OpConstant 23 
                                         i32 %501 = OpConstant 24 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                               Function f32* %306 = OpVariable Function 
                                        f32_4 %14 = OpLoad %12 
                                        f32_2 %15 = OpVectorShuffle %14 %14 0 1 
                                 Uniform f32* %29 = OpAccessChain %25 %27 
                                          f32 %30 = OpLoad %29 
                                 Uniform f32* %32 = OpAccessChain %25 %31 
                                          f32 %33 = OpLoad %32 
                                        f32_2 %34 = OpCompositeConstruct %30 %33 
                                        f32_2 %35 = OpFAdd %15 %34 
                                        f32_3 %36 = OpLoad %9 
                                        f32_3 %37 = OpVectorShuffle %36 %35 3 4 2 
                                                      OpStore %9 %37 
                                        f32_3 %40 = OpLoad %9 
                                        f32_4 %41 = OpVectorShuffle %40 %40 1 1 1 1 
                               Uniform f32_4* %45 = OpAccessChain %25 %42 %43 
                                        f32_4 %46 = OpLoad %45 
                                        f32_4 %47 = OpFMul %41 %46 
                                                      OpStore %39 %47 
                               Uniform f32_4* %49 = OpAccessChain %25 %42 %48 
                                        f32_4 %50 = OpLoad %49 
                                        f32_3 %51 = OpLoad %9 
                                        f32_4 %52 = OpVectorShuffle %51 %51 0 0 0 0 
                                        f32_4 %53 = OpFMul %50 %52 
                                        f32_4 %54 = OpLoad %39 
                                        f32_4 %55 = OpFAdd %53 %54 
                                                      OpStore %39 %55 
                               Uniform f32_4* %56 = OpAccessChain %25 %42 %42 
                                        f32_4 %57 = OpLoad %56 
                                        f32_4 %58 = OpLoad %12 
                                        f32_4 %59 = OpVectorShuffle %58 %58 2 2 2 2 
                                        f32_4 %60 = OpFMul %57 %59 
                                        f32_4 %61 = OpLoad %39 
                                        f32_4 %62 = OpFAdd %60 %61 
                                                      OpStore %39 %62 
                                        f32_4 %64 = OpLoad %39 
                               Uniform f32_4* %66 = OpAccessChain %25 %42 %65 
                                        f32_4 %67 = OpLoad %66 
                                        f32_4 %68 = OpFAdd %64 %67 
                                                      OpStore %63 %68 
                               Uniform f32_4* %69 = OpAccessChain %25 %42 %65 
                                        f32_4 %70 = OpLoad %69 
                                        f32_3 %71 = OpVectorShuffle %70 %70 0 1 2 
                                        f32_4 %72 = OpLoad %12 
                                        f32_3 %73 = OpVectorShuffle %72 %72 3 3 3 
                                        f32_3 %74 = OpFMul %71 %73 
                                        f32_4 %75 = OpLoad %39 
                                        f32_3 %76 = OpVectorShuffle %75 %75 0 1 2 
                                        f32_3 %77 = OpFAdd %74 %76 
                                        f32_4 %78 = OpLoad %39 
                                        f32_4 %79 = OpVectorShuffle %78 %77 4 5 6 3 
                                                      OpStore %39 %79 
                                        f32_4 %80 = OpLoad %39 
                                        f32_3 %81 = OpVectorShuffle %80 %80 0 1 2 
                                        f32_3 %82 = OpFNegate %81 
                               Uniform f32_3* %84 = OpAccessChain %25 %48 
                                        f32_3 %85 = OpLoad %84 
                                        f32_3 %86 = OpFAdd %82 %85 
                                        f32_4 %87 = OpLoad %39 
                                        f32_4 %88 = OpVectorShuffle %87 %86 4 5 6 3 
                                                      OpStore %39 %88 
                                        f32_4 %90 = OpLoad %63 
                                        f32_4 %91 = OpVectorShuffle %90 %90 1 1 1 1 
                               Uniform f32_4* %93 = OpAccessChain %25 %92 %43 
                                        f32_4 %94 = OpLoad %93 
                                        f32_4 %95 = OpFMul %91 %94 
                                                      OpStore %89 %95 
                               Uniform f32_4* %96 = OpAccessChain %25 %92 %48 
                                        f32_4 %97 = OpLoad %96 
                                        f32_4 %98 = OpLoad %63 
                                        f32_4 %99 = OpVectorShuffle %98 %98 0 0 0 0 
                                       f32_4 %100 = OpFMul %97 %99 
                                       f32_4 %101 = OpLoad %89 
                                       f32_4 %102 = OpFAdd %100 %101 
                                                      OpStore %89 %102 
                              Uniform f32_4* %103 = OpAccessChain %25 %92 %42 
                                       f32_4 %104 = OpLoad %103 
                                       f32_4 %105 = OpLoad %63 
                                       f32_4 %106 = OpVectorShuffle %105 %105 2 2 2 2 
                                       f32_4 %107 = OpFMul %104 %106 
                                       f32_4 %108 = OpLoad %89 
                                       f32_4 %109 = OpFAdd %107 %108 
                                                      OpStore %89 %109 
                              Uniform f32_4* %110 = OpAccessChain %25 %92 %65 
                                       f32_4 %111 = OpLoad %110 
                                       f32_4 %112 = OpLoad %63 
                                       f32_4 %113 = OpVectorShuffle %112 %112 3 3 3 3 
                                       f32_4 %114 = OpFMul %111 %113 
                                       f32_4 %115 = OpLoad %89 
                                       f32_4 %116 = OpFAdd %114 %115 
                                                      OpStore %63 %116 
                                       f32_4 %122 = OpLoad %63 
                               Output f32_4* %124 = OpAccessChain %121 %48 
                                                      OpStore %124 %122 
                                       f32_4 %127 = OpLoad %126 
                                                      OpStore %125 %127 
                                       f32_2 %132 = OpLoad %131 
                                                      OpStore vs_TEXCOORD0 %132 
                              Uniform f32_4* %135 = OpAccessChain %25 %43 
                                       f32_4 %136 = OpLoad %135 
                                       f32_2 %137 = OpVectorShuffle %136 %136 1 1 
                              Uniform f32_4* %139 = OpAccessChain %25 %138 %43 
                                       f32_4 %140 = OpLoad %139 
                                       f32_2 %141 = OpVectorShuffle %140 %140 0 1 
                                       f32_2 %142 = OpFMul %137 %141 
                                                      OpStore %134 %142 
                              Uniform f32_4* %143 = OpAccessChain %25 %138 %48 
                                       f32_4 %144 = OpLoad %143 
                                       f32_2 %145 = OpVectorShuffle %144 %144 0 1 
                              Uniform f32_4* %146 = OpAccessChain %25 %43 
                                       f32_4 %147 = OpLoad %146 
                                       f32_2 %148 = OpVectorShuffle %147 %147 0 0 
                                       f32_2 %149 = OpFMul %145 %148 
                                       f32_2 %150 = OpLoad %134 
                                       f32_2 %151 = OpFAdd %149 %150 
                                                      OpStore %134 %151 
                                       f32_2 %152 = OpLoad %134 
                                       f32_2 %153 = OpExtInst %1 4 %152 
                                Uniform f32* %155 = OpAccessChain %25 %154 
                                         f32 %156 = OpLoad %155 
                                Uniform f32* %158 = OpAccessChain %25 %157 
                                         f32 %159 = OpLoad %158 
                                       f32_2 %160 = OpCompositeConstruct %156 %159 
                                       f32_2 %161 = OpFMul %153 %160 
                                                      OpStore %134 %161 
                                       f32_4 %162 = OpLoad %63 
                                       f32_2 %163 = OpVectorShuffle %162 %162 3 3 
                                       f32_2 %164 = OpLoad %134 
                                       f32_2 %165 = OpFDiv %163 %164 
                                                      OpStore %134 %165 
                                       f32_2 %168 = OpLoad %134 
                                       f32_2 %169 = OpLoad %134 
                                         f32 %170 = OpDot %168 %169 
                                                      OpStore %167 %170 
                                Uniform f32* %172 = OpAccessChain %25 %171 
                                         f32 %173 = OpLoad %172 
                                Uniform f32* %175 = OpAccessChain %25 %174 
                                         f32 %176 = OpLoad %175 
                                       f32_2 %177 = OpCompositeConstruct %173 %176 
                                       f32_2 %180 = OpFMul %177 %179 
                                       f32_2 %181 = OpLoad %134 
                                       f32_2 %182 = OpFAdd %180 %181 
                                                      OpStore %134 %182 
                                       f32_2 %184 = OpLoad %134 
                                       f32_2 %185 = OpFDiv %179 %184 
                                       f32_4 %186 = OpLoad vs_TEXCOORD2 
                                       f32_4 %187 = OpVectorShuffle %186 %185 0 1 4 5 
                                                      OpStore vs_TEXCOORD2 %187 
                                         f32 %188 = OpLoad %167 
                                         f32 %189 = OpExtInst %1 32 %188 
                                Private f32* %191 = OpAccessChain %134 %190 
                                                      OpStore %191 %189 
                                  Input f32* %195 = OpAccessChain %193 %117 
                                         f32 %196 = OpLoad %195 
                                         f32 %197 = OpExtInst %1 4 %196 
                                Uniform f32* %199 = OpAccessChain %25 %198 
                                         f32 %200 = OpLoad %199 
                                         f32 %201 = OpFMul %197 %200 
                                                      OpStore %192 %201 
                                Uniform f32* %203 = OpAccessChain %25 %202 
                                         f32 %204 = OpLoad %203 
                                         f32 %206 = OpFAdd %204 %205 
                                                      OpStore %167 %206 
                                         f32 %207 = OpLoad %192 
                                         f32 %208 = OpLoad %167 
                                         f32 %209 = OpFMul %207 %208 
                                                      OpStore %192 %209 
                                         f32 %210 = OpLoad %192 
                                Private f32* %211 = OpAccessChain %134 %190 
                                         f32 %212 = OpLoad %211 
                                         f32 %213 = OpFMul %210 %212 
                                                      OpStore %167 %213 
                                Uniform f32* %215 = OpAccessChain %25 %214 
                                         f32 %216 = OpLoad %215 
                                         f32 %217 = OpFNegate %216 
                                         f32 %218 = OpFAdd %217 %205 
                                Private f32* %219 = OpAccessChain %63 %190 
                                                      OpStore %219 %218 
                                         f32 %220 = OpLoad %167 
                                         f32 %221 = OpExtInst %1 4 %220 
                                Private f32* %222 = OpAccessChain %63 %190 
                                         f32 %223 = OpLoad %222 
                                         f32 %224 = OpFMul %221 %223 
                                Private f32* %225 = OpAccessChain %63 %190 
                                                      OpStore %225 %224 
                                Private f32* %226 = OpAccessChain %134 %190 
                                         f32 %227 = OpLoad %226 
                                         f32 %228 = OpLoad %192 
                                         f32 %229 = OpFMul %227 %228 
                                Private f32* %230 = OpAccessChain %63 %190 
                                         f32 %231 = OpLoad %230 
                                         f32 %232 = OpFNegate %231 
                                         f32 %233 = OpFAdd %229 %232 
                                Private f32* %234 = OpAccessChain %134 %190 
                                                      OpStore %234 %233 
                                       f32_3 %237 = OpLoad %236 
                              Uniform f32_4* %238 = OpAccessChain %25 %65 %48 
                                       f32_4 %239 = OpLoad %238 
                                       f32_3 %240 = OpVectorShuffle %239 %239 0 1 2 
                                         f32 %241 = OpDot %237 %240 
                                Private f32* %242 = OpAccessChain %89 %190 
                                                      OpStore %242 %241 
                                       f32_3 %243 = OpLoad %236 
                              Uniform f32_4* %244 = OpAccessChain %25 %65 %43 
                                       f32_4 %245 = OpLoad %244 
                                       f32_3 %246 = OpVectorShuffle %245 %245 0 1 2 
                                         f32 %247 = OpDot %243 %246 
                                Private f32* %248 = OpAccessChain %89 %117 
                                                      OpStore %248 %247 
                                       f32_3 %249 = OpLoad %236 
                              Uniform f32_4* %250 = OpAccessChain %25 %65 %42 
                                       f32_4 %251 = OpLoad %250 
                                       f32_3 %252 = OpVectorShuffle %251 %251 0 1 2 
                                         f32 %253 = OpDot %249 %252 
                                Private f32* %255 = OpAccessChain %89 %254 
                                                      OpStore %255 %253 
                                       f32_4 %256 = OpLoad %89 
                                       f32_3 %257 = OpVectorShuffle %256 %256 0 1 2 
                                       f32_4 %258 = OpLoad %89 
                                       f32_3 %259 = OpVectorShuffle %258 %258 0 1 2 
                                         f32 %260 = OpDot %257 %259 
                                                      OpStore %192 %260 
                                         f32 %261 = OpLoad %192 
                                         f32 %262 = OpExtInst %1 32 %261 
                                                      OpStore %192 %262 
                                         f32 %264 = OpLoad %192 
                                       f32_3 %265 = OpCompositeConstruct %264 %264 %264 
                                       f32_4 %266 = OpLoad %89 
                                       f32_3 %267 = OpVectorShuffle %266 %266 0 1 2 
                                       f32_3 %268 = OpFMul %265 %267 
                                                      OpStore %263 %268 
                                       f32_4 %269 = OpLoad %39 
                                       f32_3 %270 = OpVectorShuffle %269 %269 0 1 2 
                                       f32_4 %271 = OpLoad %39 
                                       f32_3 %272 = OpVectorShuffle %271 %271 0 1 2 
                                         f32 %273 = OpDot %270 %272 
                                                      OpStore %192 %273 
                                         f32 %274 = OpLoad %192 
                                         f32 %275 = OpExtInst %1 32 %274 
                                                      OpStore %192 %275 
                                         f32 %276 = OpLoad %192 
                                       f32_3 %277 = OpCompositeConstruct %276 %276 %276 
                                       f32_4 %278 = OpLoad %39 
                                       f32_3 %279 = OpVectorShuffle %278 %278 0 1 2 
                                       f32_3 %280 = OpFMul %277 %279 
                                       f32_4 %281 = OpLoad %89 
                                       f32_4 %282 = OpVectorShuffle %281 %280 4 5 6 3 
                                                      OpStore %89 %282 
                                       f32_3 %283 = OpLoad %263 
                                       f32_4 %284 = OpLoad %89 
                                       f32_3 %285 = OpVectorShuffle %284 %284 0 1 2 
                                         f32 %286 = OpDot %283 %285 
                                                      OpStore %192 %286 
                                         f32 %287 = OpLoad %192 
                                         f32 %288 = OpExtInst %1 4 %287 
                                Private f32* %289 = OpAccessChain %134 %190 
                                         f32 %290 = OpLoad %289 
                                         f32 %291 = OpFMul %288 %290 
                                Private f32* %292 = OpAccessChain %63 %190 
                                         f32 %293 = OpLoad %292 
                                         f32 %294 = OpFAdd %291 %293 
                                Private f32* %295 = OpAccessChain %134 %190 
                                                      OpStore %295 %294 
                                Uniform f32* %300 = OpAccessChain %25 %138 %65 %299 
                                         f32 %301 = OpLoad %300 
                                        bool %303 = OpFOrdEqual %301 %302 
                                                      OpStore %298 %303 
                                        bool %304 = OpLoad %298 
                                                      OpSelectionMerge %308 None 
                                                      OpBranchConditional %304 %307 %311 
                                             %307 = OpLabel 
                                Private f32* %309 = OpAccessChain %134 %190 
                                         f32 %310 = OpLoad %309 
                                                      OpStore %306 %310 
                                                      OpBranch %308 
                                             %311 = OpLabel 
                                         f32 %312 = OpLoad %167 
                                                      OpStore %306 %312 
                                                      OpBranch %308 
                                             %308 = OpLabel 
                                         f32 %313 = OpLoad %306 
                                Private f32* %314 = OpAccessChain %263 %190 
                                                      OpStore %314 %313 
                                  Input f32* %316 = OpAccessChain %193 %117 
                                         f32 %317 = OpLoad %316 
                                        bool %318 = OpFOrdGreaterThanEqual %302 %317 
                                                      OpStore %315 %318 
                                        bool %319 = OpLoad %315 
                                         f32 %320 = OpSelect %319 %205 %302 
                                Private f32* %321 = OpAccessChain %134 %190 
                                                      OpStore %321 %320 
                                Uniform f32* %323 = OpAccessChain %25 %322 
                                         f32 %324 = OpLoad %323 
                                         f32 %325 = OpFNegate %324 
                                Uniform f32* %327 = OpAccessChain %25 %326 
                                         f32 %328 = OpLoad %327 
                                         f32 %329 = OpFAdd %325 %328 
                                                      OpStore %192 %329 
                                Private f32* %330 = OpAccessChain %134 %190 
                                         f32 %331 = OpLoad %330 
                                         f32 %332 = OpLoad %192 
                                         f32 %333 = OpFMul %331 %332 
                                Uniform f32* %334 = OpAccessChain %25 %322 
                                         f32 %335 = OpLoad %334 
                                         f32 %336 = OpFAdd %333 %335 
                                Private f32* %337 = OpAccessChain %134 %190 
                                                      OpStore %337 %336 
                                Private f32* %338 = OpAccessChain %134 %190 
                                         f32 %339 = OpLoad %338 
                                         f32 %340 = OpFMul %339 %178 
                                Uniform f32* %342 = OpAccessChain %25 %341 
                                         f32 %343 = OpLoad %342 
                                         f32 %344 = OpFAdd %340 %343 
                                Private f32* %345 = OpAccessChain %134 %190 
                                                      OpStore %345 %344 
                                Private f32* %346 = OpAccessChain %134 %190 
                                         f32 %347 = OpLoad %346 
                                Uniform f32* %349 = OpAccessChain %25 %348 
                                         f32 %350 = OpLoad %349 
                                         f32 %351 = OpFMul %347 %350 
                                Private f32* %352 = OpAccessChain %134 %190 
                                                      OpStore %352 %351 
                                Private f32* %353 = OpAccessChain %134 %190 
                                         f32 %354 = OpLoad %353 
                                         f32 %356 = OpFMul %354 %355 
                                Private f32* %357 = OpAccessChain %263 %254 
                                                      OpStore %357 %356 
                                       f32_3 %359 = OpLoad %263 
                                       f32_2 %360 = OpVectorShuffle %359 %359 0 2 
                                       f32_4 %361 = OpLoad vs_TEXCOORD1 
                                       f32_4 %362 = OpVectorShuffle %361 %360 0 4 2 5 
                                                      OpStore vs_TEXCOORD1 %362 
                                Private f32* %363 = OpAccessChain %263 %190 
                                         f32 %364 = OpLoad %363 
                                         f32 %365 = OpFDiv %355 %364 
                                                      OpStore %192 %365 
                                Uniform f32* %367 = OpAccessChain %25 %366 
                                         f32 %368 = OpLoad %367 
                                         f32 %369 = OpFNegate %368 
                                Uniform f32* %370 = OpAccessChain %25 %348 
                                         f32 %371 = OpLoad %370 
                                         f32 %372 = OpFMul %369 %371 
                                         f32 %373 = OpFAdd %372 %205 
                                                      OpStore %167 %373 
                                Uniform f32* %375 = OpAccessChain %25 %374 
                                         f32 %376 = OpLoad %375 
                                         f32 %377 = OpFNegate %376 
                                Uniform f32* %378 = OpAccessChain %25 %348 
                                         f32 %379 = OpLoad %378 
                                         f32 %380 = OpFMul %377 %379 
                                         f32 %381 = OpLoad %167 
                                         f32 %382 = OpFAdd %380 %381 
                                                      OpStore %167 %382 
                                         f32 %383 = OpLoad %167 
                                         f32 %384 = OpFMul %383 %355 
                                         f32 %385 = OpLoad %192 
                                         f32 %386 = OpFNegate %385 
                                         f32 %387 = OpFAdd %384 %386 
                                                      OpStore %167 %387 
                                Private f32* %388 = OpAccessChain %134 %190 
                                         f32 %389 = OpLoad %388 
                                         f32 %390 = OpFNegate %389 
                                         f32 %391 = OpFMul %390 %355 
                                         f32 %392 = OpLoad %167 
                                         f32 %393 = OpFAdd %391 %392 
                                 Output f32* %395 = OpAccessChain vs_TEXCOORD1 %190 
                                                      OpStore %395 %393 
                                Private f32* %396 = OpAccessChain %134 %190 
                                         f32 %397 = OpLoad %396 
                                         f32 %398 = OpFNegate %397 
                                         f32 %399 = OpFMul %398 %355 
                                         f32 %400 = OpFAdd %399 %355 
                                Private f32* %401 = OpAccessChain %134 %190 
                                                      OpStore %401 %400 
                                         f32 %402 = OpLoad %192 
                                Private f32* %403 = OpAccessChain %134 %190 
                                         f32 %404 = OpLoad %403 
                                         f32 %405 = OpFAdd %402 %404 
                                 Output f32* %406 = OpAccessChain vs_TEXCOORD1 %254 
                                                      OpStore %406 %405 
                              Uniform f32_4* %408 = OpAccessChain %25 %407 
                                       f32_4 %409 = OpLoad %408 
                                       f32_4 %412 = OpExtInst %1 40 %409 %411 
                                                      OpStore %63 %412 
                                       f32_4 %413 = OpLoad %63 
                                       f32_4 %416 = OpExtInst %1 37 %413 %415 
                                                      OpStore %63 %416 
                                       f32_3 %417 = OpLoad %9 
                                       f32_2 %418 = OpVectorShuffle %417 %417 0 1 
                                       f32_2 %421 = OpFMul %418 %420 
                                       f32_4 %422 = OpLoad %63 
                                       f32_2 %423 = OpVectorShuffle %422 %422 0 1 
                                       f32_2 %424 = OpFNegate %423 
                                       f32_2 %425 = OpFAdd %421 %424 
                                       f32_3 %426 = OpLoad %9 
                                       f32_3 %427 = OpVectorShuffle %426 %425 3 4 2 
                                                      OpStore %9 %427 
                                       f32_4 %428 = OpLoad %63 
                                       f32_2 %429 = OpVectorShuffle %428 %428 2 3 
                                       f32_2 %430 = OpFNegate %429 
                                       f32_3 %431 = OpLoad %9 
                                       f32_2 %432 = OpVectorShuffle %431 %431 0 1 
                                       f32_2 %433 = OpFAdd %430 %432 
                                       f32_4 %434 = OpLoad vs_TEXCOORD2 
                                       f32_4 %435 = OpVectorShuffle %434 %433 4 5 2 3 
                                                      OpStore vs_TEXCOORD2 %435 
                                       f32_4 %436 = OpLoad %39 
                                       f32_3 %437 = OpVectorShuffle %436 %436 1 1 1 
                              Uniform f32_4* %439 = OpAccessChain %25 %438 %43 
                                       f32_4 %440 = OpLoad %439 
                                       f32_3 %441 = OpVectorShuffle %440 %440 0 1 2 
                                       f32_3 %442 = OpFMul %437 %441 
                                                      OpStore %9 %442 
                              Uniform f32_4* %443 = OpAccessChain %25 %438 %48 
                                       f32_4 %444 = OpLoad %443 
                                       f32_3 %445 = OpVectorShuffle %444 %444 0 1 2 
                                       f32_4 %446 = OpLoad %39 
                                       f32_3 %447 = OpVectorShuffle %446 %446 0 0 0 
                                       f32_3 %448 = OpFMul %445 %447 
                                       f32_3 %449 = OpLoad %9 
                                       f32_3 %450 = OpFAdd %448 %449 
                                                      OpStore %9 %450 
                              Uniform f32_4* %453 = OpAccessChain %25 %438 %42 
                                       f32_4 %454 = OpLoad %453 
                                       f32_3 %455 = OpVectorShuffle %454 %454 0 1 2 
                                       f32_4 %456 = OpLoad %39 
                                       f32_3 %457 = OpVectorShuffle %456 %456 2 2 2 
                                       f32_3 %458 = OpFMul %455 %457 
                                       f32_3 %459 = OpLoad %9 
                                       f32_3 %460 = OpFAdd %458 %459 
                                                      OpStore vs_TEXCOORD3 %460 
                                  Input f32* %461 = OpAccessChain %193 %190 
                                         f32 %462 = OpLoad %461 
                                         f32 %464 = OpFMul %462 %463 
                                Private f32* %465 = OpAccessChain %9 %190 
                                                      OpStore %465 %464 
                                Private f32* %466 = OpAccessChain %9 %190 
                                         f32 %467 = OpLoad %466 
                                         f32 %468 = OpExtInst %1 8 %467 
                                Private f32* %469 = OpAccessChain %134 %190 
                                                      OpStore %469 %468 
                                Private f32* %470 = OpAccessChain %134 %190 
                                         f32 %471 = OpLoad %470 
                                         f32 %472 = OpFNegate %471 
                                         f32 %474 = OpFMul %472 %473 
                                  Input f32* %475 = OpAccessChain %193 %190 
                                         f32 %476 = OpLoad %475 
                                         f32 %477 = OpFAdd %474 %476 
                                Private f32* %478 = OpAccessChain %134 %117 
                                                      OpStore %478 %477 
                                       f32_2 %479 = OpLoad %134 
                                       f32_2 %482 = OpFMul %479 %481 
                                       f32_3 %483 = OpLoad %9 
                                       f32_3 %484 = OpVectorShuffle %483 %482 3 4 2 
                                                      OpStore %9 %484 
                                       f32_3 %486 = OpLoad %9 
                                       f32_2 %487 = OpVectorShuffle %486 %486 0 1 
                              Uniform f32_4* %489 = OpAccessChain %25 %488 
                                       f32_4 %490 = OpLoad %489 
                                       f32_2 %491 = OpVectorShuffle %490 %490 0 1 
                                       f32_2 %492 = OpFMul %487 %491 
                              Uniform f32_4* %493 = OpAccessChain %25 %488 
                                       f32_4 %494 = OpLoad %493 
                                       f32_2 %495 = OpVectorShuffle %494 %494 2 3 
                                       f32_2 %496 = OpFAdd %492 %495 
                                       f32_4 %497 = OpLoad vs_TEXCOORD5 
                                       f32_4 %498 = OpVectorShuffle %497 %496 4 5 2 3 
                                                      OpStore vs_TEXCOORD5 %498 
                                       f32_3 %499 = OpLoad %9 
                                       f32_2 %500 = OpVectorShuffle %499 %499 0 1 
                              Uniform f32_4* %502 = OpAccessChain %25 %501 
                                       f32_4 %503 = OpLoad %502 
                                       f32_2 %504 = OpVectorShuffle %503 %503 0 1 
                                       f32_2 %505 = OpFMul %500 %504 
                              Uniform f32_4* %506 = OpAccessChain %25 %501 
                                       f32_4 %507 = OpLoad %506 
                                       f32_2 %508 = OpVectorShuffle %507 %507 2 3 
                                       f32_2 %509 = OpFAdd %505 %508 
                                       f32_4 %510 = OpLoad vs_TEXCOORD5 
                                       f32_4 %511 = OpVectorShuffle %510 %509 0 1 4 5 
                                                      OpStore vs_TEXCOORD5 %511 
                                 Output f32* %512 = OpAccessChain %121 %48 %117 
                                         f32 %513 = OpLoad %512 
                                         f32 %514 = OpFNegate %513 
                                 Output f32* %515 = OpAccessChain %121 %48 %117 
                                                      OpStore %515 %514 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 316
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %22 %35 %128 %149 %286 %310 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpDecorate %9 RelaxedPrecision 
                                                      OpDecorate %12 RelaxedPrecision 
                                                      OpDecorate %12 DescriptorSet 12 
                                                      OpDecorate %12 Binding 12 
                                                      OpDecorate %13 RelaxedPrecision 
                                                      OpDecorate %16 RelaxedPrecision 
                                                      OpDecorate %16 DescriptorSet 16 
                                                      OpDecorate %16 Binding 16 
                                                      OpDecorate %17 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD0 Location 22 
                                                      OpDecorate %27 RelaxedPrecision 
                                                      OpDecorate %33 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD1 Location 35 
                                                      OpDecorate %45 RelaxedPrecision 
                                                      OpDecorate %46 RelaxedPrecision 
                                                      OpMemberDecorate %69 0 Offset 69 
                                                      OpMemberDecorate %69 1 Offset 69 
                                                      OpMemberDecorate %69 2 Offset 69 
                                                      OpMemberDecorate %69 3 RelaxedPrecision 
                                                      OpMemberDecorate %69 3 Offset 69 
                                                      OpMemberDecorate %69 4 Offset 69 
                                                      OpMemberDecorate %69 5 Offset 69 
                                                      OpMemberDecorate %69 6 Offset 69 
                                                      OpMemberDecorate %69 7 RelaxedPrecision 
                                                      OpMemberDecorate %69 7 Offset 69 
                                                      OpMemberDecorate %69 8 Offset 69 
                                                      OpMemberDecorate %69 9 Offset 69 
                                                      OpMemberDecorate %69 10 Offset 69 
                                                      OpDecorate %69 Block 
                                                      OpDecorate %71 DescriptorSet 71 
                                                      OpDecorate %71 Binding 71 
                                                      OpDecorate %85 RelaxedPrecision 
                                                      OpDecorate %89 RelaxedPrecision 
                                                      OpDecorate %93 RelaxedPrecision 
                                                      OpDecorate %94 RelaxedPrecision 
                                                      OpDecorate %95 RelaxedPrecision 
                                                      OpDecorate %101 RelaxedPrecision 
                                                      OpDecorate %103 RelaxedPrecision 
                                                      OpDecorate %104 RelaxedPrecision 
                                                      OpDecorate %110 RelaxedPrecision 
                                                      OpDecorate %111 RelaxedPrecision 
                                                      OpDecorate %113 RelaxedPrecision 
                                                      OpDecorate %114 RelaxedPrecision 
                                                      OpDecorate %115 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD5 Location 128 
                                                      OpDecorate %134 RelaxedPrecision 
                                                      OpDecorate %134 DescriptorSet 134 
                                                      OpDecorate %134 Binding 134 
                                                      OpDecorate %135 RelaxedPrecision 
                                                      OpDecorate %136 RelaxedPrecision 
                                                      OpDecorate %136 DescriptorSet 136 
                                                      OpDecorate %136 Binding 136 
                                                      OpDecorate %137 RelaxedPrecision 
                                                      OpDecorate %143 RelaxedPrecision 
                                                      OpDecorate %146 RelaxedPrecision 
                                                      OpDecorate %147 RelaxedPrecision 
                                                      OpDecorate %148 RelaxedPrecision 
                                                      OpDecorate %149 RelaxedPrecision 
                                                      OpDecorate %149 Location 149 
                                                      OpDecorate %150 RelaxedPrecision 
                                                      OpDecorate %151 RelaxedPrecision 
                                                      OpDecorate %154 RelaxedPrecision 
                                                      OpDecorate %155 RelaxedPrecision 
                                                      OpDecorate %156 RelaxedPrecision 
                                                      OpDecorate %172 RelaxedPrecision 
                                                      OpDecorate %173 RelaxedPrecision 
                                                      OpDecorate %173 DescriptorSet 173 
                                                      OpDecorate %173 Binding 173 
                                                      OpDecorate %174 RelaxedPrecision 
                                                      OpDecorate %175 RelaxedPrecision 
                                                      OpDecorate %175 DescriptorSet 175 
                                                      OpDecorate %175 Binding 175 
                                                      OpDecorate %176 RelaxedPrecision 
                                                      OpDecorate %181 RelaxedPrecision 
                                                      OpDecorate %182 RelaxedPrecision 
                                                      OpDecorate %183 RelaxedPrecision 
                                                      OpDecorate %184 RelaxedPrecision 
                                                      OpDecorate %188 RelaxedPrecision 
                                                      OpDecorate %190 RelaxedPrecision 
                                                      OpDecorate %191 RelaxedPrecision 
                                                      OpDecorate %197 RelaxedPrecision 
                                                      OpDecorate %203 RelaxedPrecision 
                                                      OpDecorate %204 RelaxedPrecision 
                                                      OpDecorate %209 RelaxedPrecision 
                                                      OpDecorate %211 RelaxedPrecision 
                                                      OpDecorate %212 RelaxedPrecision 
                                                      OpDecorate %218 RelaxedPrecision 
                                                      OpDecorate %219 RelaxedPrecision 
                                                      OpDecorate %220 RelaxedPrecision 
                                                      OpDecorate %221 RelaxedPrecision 
                                                      OpDecorate %222 RelaxedPrecision 
                                                      OpDecorate %227 RelaxedPrecision 
                                                      OpDecorate %228 RelaxedPrecision 
                                                      OpDecorate %233 RelaxedPrecision 
                                                      OpDecorate %235 RelaxedPrecision 
                                                      OpDecorate %236 RelaxedPrecision 
                                                      OpDecorate %238 RelaxedPrecision 
                                                      OpDecorate %239 RelaxedPrecision 
                                                      OpDecorate %262 RelaxedPrecision 
                                                      OpDecorate %264 RelaxedPrecision 
                                                      OpDecorate %265 RelaxedPrecision 
                                                      OpDecorate %266 RelaxedPrecision 
                                                      OpDecorate %267 RelaxedPrecision 
                                                      OpDecorate %268 RelaxedPrecision 
                                                      OpDecorate %269 RelaxedPrecision 
                                                      OpDecorate %270 RelaxedPrecision 
                                                      OpDecorate %271 RelaxedPrecision 
                                                      OpDecorate %272 RelaxedPrecision 
                                                      OpDecorate %273 RelaxedPrecision 
                                                      OpDecorate %274 RelaxedPrecision 
                                                      OpDecorate %275 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD2 Location 286 
                                                      OpDecorate %305 RelaxedPrecision 
                                                      OpDecorate %306 RelaxedPrecision 
                                                      OpDecorate %307 RelaxedPrecision 
                                                      OpDecorate %308 RelaxedPrecision 
                                                      OpDecorate %310 RelaxedPrecision 
                                                      OpDecorate %310 Location 310 
                                                      OpDecorate %311 RelaxedPrecision 
                                                      OpDecorate %312 RelaxedPrecision 
                                                      OpDecorate %313 RelaxedPrecision 
                                                      OpDecorate %314 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypePointer UniformConstant %10 
         UniformConstant read_only Texture2D* %12 = OpVariable UniformConstant 
                                              %14 = OpTypeSampler 
                                              %15 = OpTypePointer UniformConstant %14 
                     UniformConstant sampler* %16 = OpVariable UniformConstant 
                                              %18 = OpTypeSampledImage %10 
                                              %20 = OpTypeVector %6 2 
                                              %21 = OpTypePointer Input %20 
                        Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                              %25 = OpTypeInt 32 0 
                                          u32 %26 = OpConstant 3 
                                          u32 %28 = OpConstant 0 
                                              %29 = OpTypePointer Private %6 
                                 Private f32* %31 = OpVariable Private 
                                              %34 = OpTypePointer Input %7 
                        Input f32_4* vs_TEXCOORD1 = OpVariable Input 
                                              %36 = OpTypePointer Input %6 
                                              %41 = OpTypeVector %6 3 
                                              %42 = OpTypePointer Private %41 
                               Private f32_3* %43 = OpVariable Private 
                                          u32 %47 = OpConstant 2 
                                              %52 = OpTypeBool 
                                              %53 = OpTypePointer Private %52 
                                Private bool* %54 = OpVariable Private 
                                          f32 %56 = OpConstant 3.674022E-40 
                                              %59 = OpTypeInt 32 1 
                                          i32 %60 = OpConstant 0 
                                          i32 %61 = OpConstant 1 
                                          i32 %63 = OpConstant -1 
                                              %69 = OpTypeStruct %7 %6 %6 %7 %6 %6 %6 %7 %6 %6 %7 
                                              %70 = OpTypePointer Uniform %69 
Uniform struct {f32_4; f32; f32; f32_4; f32; f32; f32; f32_4; f32; f32; f32_4;}* %71 = OpVariable Uniform 
                                          i32 %72 = OpConstant 8 
                                              %73 = OpTypePointer Uniform %6 
                                          i32 %76 = OpConstant 9 
                                          u32 %81 = OpConstant 1 
                                 Private f32* %85 = OpVariable Private 
                                          f32 %87 = OpConstant 3.674022E-40 
                                 Private f32* %89 = OpVariable Private 
                                          f32 %91 = OpConstant 3.674022E-40 
                                 Private f32* %95 = OpVariable Private 
                                         i32 %116 = OpConstant 5 
                                         i32 %119 = OpConstant 6 
                                             %123 = OpTypePointer Uniform %7 
                        Input f32_4* vs_TEXCOORD5 = OpVariable Input 
        UniformConstant read_only Texture2D* %134 = OpVariable UniformConstant 
                    UniformConstant sampler* %136 = OpVariable UniformConstant 
                              Private f32_4* %142 = OpVariable Private 
                                         i32 %144 = OpConstant 7 
                              Private f32_3* %148 = OpVariable Private 
                                Input f32_4* %149 = OpVariable Input 
                                         i32 %152 = OpConstant 3 
                                         i32 %159 = OpConstant 2 
                              Private f32_4* %172 = OpVariable Private 
        UniformConstant read_only Texture2D* %173 = OpVariable UniformConstant 
                    UniformConstant sampler* %175 = OpVariable UniformConstant 
                                             %185 = OpTypePointer Private %20 
                              Private f32_2* %186 = OpVariable Private 
                              Private f32_4* %197 = OpVariable Private 
                              Private f32_4* %222 = OpVariable Private 
                                         i32 %241 = OpConstant 4 
                                Private f32* %248 = OpVariable Private 
                                         i32 %276 = OpConstant 10 
                        Input f32_4* vs_TEXCOORD2 = OpVariable Input 
                                             %309 = OpTypePointer Output %7 
                               Output f32_4* %310 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                          read_only Texture2D %13 = OpLoad %12 
                                      sampler %17 = OpLoad %16 
                   read_only Texture2DSampled %19 = OpSampledImage %13 %17 
                                        f32_2 %23 = OpLoad vs_TEXCOORD0 
                                        f32_4 %24 = OpImageSampleImplicitLod %19 %23 
                                          f32 %27 = OpCompositeExtract %24 3 
                                 Private f32* %30 = OpAccessChain %9 %28 
                                                      OpStore %30 %27 
                                 Private f32* %32 = OpAccessChain %9 %28 
                                          f32 %33 = OpLoad %32 
                                   Input f32* %37 = OpAccessChain vs_TEXCOORD1 %28 
                                          f32 %38 = OpLoad %37 
                                          f32 %39 = OpFNegate %38 
                                          f32 %40 = OpFAdd %33 %39 
                                                      OpStore %31 %40 
                                 Private f32* %44 = OpAccessChain %9 %28 
                                          f32 %45 = OpLoad %44 
                                          f32 %46 = OpFNegate %45 
                                   Input f32* %48 = OpAccessChain vs_TEXCOORD1 %47 
                                          f32 %49 = OpLoad %48 
                                          f32 %50 = OpFAdd %46 %49 
                                 Private f32* %51 = OpAccessChain %43 %28 
                                                      OpStore %51 %50 
                                          f32 %55 = OpLoad %31 
                                         bool %57 = OpFOrdLessThan %55 %56 
                                                      OpStore %54 %57 
                                         bool %58 = OpLoad %54 
                                          i32 %62 = OpSelect %58 %61 %60 
                                          i32 %64 = OpIMul %62 %63 
                                         bool %65 = OpINotEqual %64 %60 
                                                      OpSelectionMerge %67 None 
                                                      OpBranchConditional %65 %66 %67 
                                              %66 = OpLabel 
                                                      OpKill
                                              %67 = OpLabel 
                                 Uniform f32* %74 = OpAccessChain %71 %72 
                                          f32 %75 = OpLoad %74 
                                 Uniform f32* %77 = OpAccessChain %71 %76 
                                          f32 %78 = OpLoad %77 
                                          f32 %79 = OpFMul %75 %78 
                                                      OpStore %31 %79 
                                          f32 %80 = OpLoad %31 
                                   Input f32* %82 = OpAccessChain vs_TEXCOORD1 %81 
                                          f32 %83 = OpLoad %82 
                                          f32 %84 = OpFMul %80 %83 
                                                      OpStore %31 %84 
                                          f32 %86 = OpLoad %31 
                                          f32 %88 = OpExtInst %1 37 %86 %87 
                                                      OpStore %85 %88 
                                          f32 %90 = OpLoad %31 
                                          f32 %92 = OpFMul %90 %91 
                                                      OpStore %89 %92 
                                          f32 %93 = OpLoad %85 
                                          f32 %94 = OpExtInst %1 31 %93 
                                                      OpStore %85 %94 
                                 Private f32* %96 = OpAccessChain %43 %28 
                                          f32 %97 = OpLoad %96 
                                   Input f32* %98 = OpAccessChain vs_TEXCOORD1 %81 
                                          f32 %99 = OpLoad %98 
                                         f32 %100 = OpFMul %97 %99 
                                         f32 %101 = OpLoad %89 
                                         f32 %102 = OpFAdd %100 %101 
                                                      OpStore %95 %102 
                                         f32 %103 = OpLoad %95 
                                         f32 %104 = OpExtInst %1 43 %103 %56 %87 
                                                      OpStore %95 %104 
                                Private f32* %105 = OpAccessChain %43 %28 
                                         f32 %106 = OpLoad %105 
                                  Input f32* %107 = OpAccessChain vs_TEXCOORD1 %81 
                                         f32 %108 = OpLoad %107 
                                         f32 %109 = OpFMul %106 %108 
                                         f32 %110 = OpLoad %89 
                                         f32 %111 = OpFNegate %110 
                                         f32 %112 = OpFAdd %109 %111 
                                                      OpStore %89 %112 
                                         f32 %113 = OpLoad %85 
                                         f32 %114 = OpLoad %95 
                                         f32 %115 = OpFMul %113 %114 
                                                      OpStore %85 %115 
                                Uniform f32* %117 = OpAccessChain %71 %116 
                                         f32 %118 = OpLoad %117 
                                Uniform f32* %120 = OpAccessChain %71 %119 
                                         f32 %121 = OpLoad %120 
                                       f32_2 %122 = OpCompositeConstruct %118 %121 
                              Uniform f32_4* %124 = OpAccessChain %71 %60 
                                       f32_4 %125 = OpLoad %124 
                                       f32_2 %126 = OpVectorShuffle %125 %125 1 1 
                                       f32_2 %127 = OpFMul %122 %126 
                                       f32_4 %129 = OpLoad vs_TEXCOORD5 
                                       f32_2 %130 = OpVectorShuffle %129 %129 2 3 
                                       f32_2 %131 = OpFAdd %127 %130 
                                       f32_3 %132 = OpLoad %43 
                                       f32_3 %133 = OpVectorShuffle %132 %131 3 4 2 
                                                      OpStore %43 %133 
                         read_only Texture2D %135 = OpLoad %134 
                                     sampler %137 = OpLoad %136 
                  read_only Texture2DSampled %138 = OpSampledImage %135 %137 
                                       f32_3 %139 = OpLoad %43 
                                       f32_2 %140 = OpVectorShuffle %139 %139 0 1 
                                       f32_4 %141 = OpImageSampleImplicitLod %138 %140 
                                                      OpStore %9 %141 
                                       f32_4 %143 = OpLoad %9 
                              Uniform f32_4* %145 = OpAccessChain %71 %144 
                                       f32_4 %146 = OpLoad %145 
                                       f32_4 %147 = OpFMul %143 %146 
                                                      OpStore %142 %147 
                                       f32_4 %150 = OpLoad %149 
                                       f32_3 %151 = OpVectorShuffle %150 %150 0 1 2 
                              Uniform f32_4* %153 = OpAccessChain %71 %152 
                                       f32_4 %154 = OpLoad %153 
                                       f32_3 %155 = OpVectorShuffle %154 %154 0 1 2 
                                       f32_3 %156 = OpFMul %151 %155 
                                                      OpStore %148 %156 
                                Uniform f32* %157 = OpAccessChain %71 %61 
                                         f32 %158 = OpLoad %157 
                                Uniform f32* %160 = OpAccessChain %71 %159 
                                         f32 %161 = OpLoad %160 
                                       f32_2 %162 = OpCompositeConstruct %158 %161 
                              Uniform f32_4* %163 = OpAccessChain %71 %60 
                                       f32_4 %164 = OpLoad %163 
                                       f32_2 %165 = OpVectorShuffle %164 %164 1 1 
                                       f32_2 %166 = OpFMul %162 %165 
                                       f32_4 %167 = OpLoad vs_TEXCOORD5 
                                       f32_2 %168 = OpVectorShuffle %167 %167 0 1 
                                       f32_2 %169 = OpFAdd %166 %168 
                                       f32_3 %170 = OpLoad %43 
                                       f32_3 %171 = OpVectorShuffle %170 %169 3 4 2 
                                                      OpStore %43 %171 
                         read_only Texture2D %174 = OpLoad %173 
                                     sampler %176 = OpLoad %175 
                  read_only Texture2DSampled %177 = OpSampledImage %174 %176 
                                       f32_3 %178 = OpLoad %43 
                                       f32_2 %179 = OpVectorShuffle %178 %178 0 1 
                                       f32_4 %180 = OpImageSampleImplicitLod %177 %179 
                                                      OpStore %172 %180 
                                       f32_3 %181 = OpLoad %148 
                                       f32_4 %182 = OpLoad %172 
                                       f32_3 %183 = OpVectorShuffle %182 %182 0 1 2 
                                       f32_3 %184 = OpFMul %181 %183 
                                                      OpStore %43 %184 
                                Private f32* %187 = OpAccessChain %172 %26 
                                         f32 %188 = OpLoad %187 
                                Uniform f32* %189 = OpAccessChain %71 %152 %26 
                                         f32 %190 = OpLoad %189 
                                         f32 %191 = OpFMul %188 %190 
                                Private f32* %192 = OpAccessChain %186 %28 
                                                      OpStore %192 %191 
                                       f32_3 %193 = OpLoad %43 
                                       f32_2 %194 = OpLoad %186 
                                       f32_3 %195 = OpVectorShuffle %194 %194 0 0 0 
                                       f32_3 %196 = OpFMul %193 %195 
                                                      OpStore %148 %196 
                                       f32_4 %198 = OpLoad %142 
                                       f32_3 %199 = OpVectorShuffle %198 %198 0 1 2 
                                       f32_4 %200 = OpLoad %142 
                                       f32_3 %201 = OpVectorShuffle %200 %200 3 3 3 
                                       f32_3 %202 = OpFMul %199 %201 
                                       f32_3 %203 = OpLoad %148 
                                       f32_3 %204 = OpFNegate %203 
                                       f32_3 %205 = OpFAdd %202 %204 
                                       f32_4 %206 = OpLoad %197 
                                       f32_4 %207 = OpVectorShuffle %206 %205 4 5 6 3 
                                                      OpStore %197 %207 
                                Uniform f32* %208 = OpAccessChain %71 %144 %26 
                                         f32 %209 = OpLoad %208 
                                Private f32* %210 = OpAccessChain %9 %26 
                                         f32 %211 = OpLoad %210 
                                         f32 %212 = OpFMul %209 %211 
                                Private f32* %213 = OpAccessChain %186 %28 
                                         f32 %214 = OpLoad %213 
                                         f32 %215 = OpFNegate %214 
                                         f32 %216 = OpFAdd %212 %215 
                                Private f32* %217 = OpAccessChain %197 %26 
                                                      OpStore %217 %216 
                                         f32 %218 = OpLoad %85 
                                       f32_4 %219 = OpCompositeConstruct %218 %218 %218 %218 
                                       f32_4 %220 = OpLoad %197 
                                       f32_4 %221 = OpFMul %219 %220 
                                                      OpStore %197 %221 
                                       f32_3 %223 = OpLoad %43 
                                       f32_2 %224 = OpLoad %186 
                                       f32_3 %225 = OpVectorShuffle %224 %224 0 0 0 
                                       f32_3 %226 = OpFMul %223 %225 
                                       f32_4 %227 = OpLoad %197 
                                       f32_3 %228 = OpVectorShuffle %227 %227 0 1 2 
                                       f32_3 %229 = OpFAdd %226 %228 
                                       f32_4 %230 = OpLoad %222 
                                       f32_4 %231 = OpVectorShuffle %230 %229 4 5 6 3 
                                                      OpStore %222 %231 
                                Uniform f32* %232 = OpAccessChain %71 %152 %26 
                                         f32 %233 = OpLoad %232 
                                Private f32* %234 = OpAccessChain %172 %26 
                                         f32 %235 = OpLoad %234 
                                         f32 %236 = OpFMul %233 %235 
                                Private f32* %237 = OpAccessChain %197 %26 
                                         f32 %238 = OpLoad %237 
                                         f32 %239 = OpFAdd %236 %238 
                                Private f32* %240 = OpAccessChain %222 %26 
                                                      OpStore %240 %239 
                                Uniform f32* %242 = OpAccessChain %71 %241 
                                         f32 %243 = OpLoad %242 
                                Uniform f32* %244 = OpAccessChain %71 %76 
                                         f32 %245 = OpLoad %244 
                                         f32 %246 = OpFMul %243 %245 
                                Private f32* %247 = OpAccessChain %186 %28 
                                                      OpStore %247 %246 
                                Private f32* %249 = OpAccessChain %186 %28 
                                         f32 %250 = OpLoad %249 
                                  Input f32* %251 = OpAccessChain vs_TEXCOORD1 %81 
                                         f32 %252 = OpLoad %251 
                                         f32 %253 = OpFMul %250 %252 
                                                      OpStore %248 %253 
                                Private f32* %254 = OpAccessChain %186 %28 
                                         f32 %255 = OpLoad %254 
                                  Input f32* %256 = OpAccessChain vs_TEXCOORD1 %81 
                                         f32 %257 = OpLoad %256 
                                         f32 %258 = OpFMul %255 %257 
                                         f32 %259 = OpFAdd %258 %87 
                                                      OpStore %85 %259 
                                         f32 %260 = OpLoad %248 
                                         f32 %261 = OpFMul %260 %91 
                                         f32 %262 = OpLoad %89 
                                         f32 %263 = OpFAdd %261 %262 
                                                      OpStore %89 %263 
                                         f32 %264 = OpLoad %89 
                                         f32 %265 = OpLoad %85 
                                         f32 %266 = OpFDiv %264 %265 
                                                      OpStore %85 %266 
                                         f32 %267 = OpLoad %85 
                                         f32 %268 = OpExtInst %1 43 %267 %56 %87 
                                                      OpStore %85 %268 
                                         f32 %269 = OpLoad %85 
                                         f32 %270 = OpFNegate %269 
                                         f32 %271 = OpFAdd %270 %87 
                                                      OpStore %85 %271 
                                       f32_4 %272 = OpLoad %222 
                                         f32 %273 = OpLoad %85 
                                       f32_4 %274 = OpCompositeConstruct %273 %273 %273 %273 
                                       f32_4 %275 = OpFMul %272 %274 
                                                      OpStore %222 %275 
                              Uniform f32_4* %277 = OpAccessChain %71 %276 
                                       f32_4 %278 = OpLoad %277 
                                       f32_2 %279 = OpVectorShuffle %278 %278 0 1 
                                       f32_2 %280 = OpFNegate %279 
                              Uniform f32_4* %281 = OpAccessChain %71 %276 
                                       f32_4 %282 = OpLoad %281 
                                       f32_2 %283 = OpVectorShuffle %282 %282 2 3 
                                       f32_2 %284 = OpFAdd %280 %283 
                                                      OpStore %186 %284 
                                       f32_2 %285 = OpLoad %186 
                                       f32_4 %287 = OpLoad vs_TEXCOORD2 
                                       f32_2 %288 = OpVectorShuffle %287 %287 0 1 
                                       f32_2 %289 = OpExtInst %1 4 %288 
                                       f32_2 %290 = OpFNegate %289 
                                       f32_2 %291 = OpFAdd %285 %290 
                                                      OpStore %186 %291 
                                       f32_2 %292 = OpLoad %186 
                                       f32_4 %293 = OpLoad vs_TEXCOORD2 
                                       f32_2 %294 = OpVectorShuffle %293 %293 2 3 
                                       f32_2 %295 = OpFMul %292 %294 
                                                      OpStore %186 %295 
                                       f32_2 %296 = OpLoad %186 
                                       f32_2 %297 = OpCompositeConstruct %56 %56 
                                       f32_2 %298 = OpCompositeConstruct %87 %87 
                                       f32_2 %299 = OpExtInst %1 43 %296 %297 %298 
                                                      OpStore %186 %299 
                                Private f32* %300 = OpAccessChain %186 %81 
                                         f32 %301 = OpLoad %300 
                                Private f32* %302 = OpAccessChain %186 %28 
                                         f32 %303 = OpLoad %302 
                                         f32 %304 = OpFMul %301 %303 
                                                      OpStore %85 %304 
                                       f32_4 %305 = OpLoad %222 
                                         f32 %306 = OpLoad %85 
                                       f32_4 %307 = OpCompositeConstruct %306 %306 %306 %306 
                                       f32_4 %308 = OpFMul %305 %307 
                                                      OpStore %222 %308 
                                       f32_4 %311 = OpLoad %222 
                                       f32_4 %312 = OpLoad %149 
                                       f32_4 %313 = OpVectorShuffle %312 %312 3 3 3 3 
                                       f32_4 %314 = OpFMul %311 %313 
                                                      OpStore %310 %314 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "vulkan hw_tier01 " {
Keywords { "UNITY_UI_CLIP_RECT" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 517
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %12 %121 %125 %126 %129 %131 %183 %193 %236 %358 %452 %485 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpDecorate %12 Location 12 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpDecorate %19 ArrayStride 19 
                                                      OpDecorate %20 ArrayStride 20 
                                                      OpDecorate %21 ArrayStride 21 
                                                      OpDecorate %22 ArrayStride 22 
                                                      OpMemberDecorate %23 0 Offset 23 
                                                      OpMemberDecorate %23 1 Offset 23 
                                                      OpMemberDecorate %23 2 Offset 23 
                                                      OpMemberDecorate %23 3 Offset 23 
                                                      OpMemberDecorate %23 4 Offset 23 
                                                      OpMemberDecorate %23 5 Offset 23 
                                                      OpMemberDecorate %23 6 Offset 23 
                                                      OpMemberDecorate %23 7 Offset 23 
                                                      OpMemberDecorate %23 8 Offset 23 
                                                      OpMemberDecorate %23 9 Offset 23 
                                                      OpMemberDecorate %23 10 Offset 23 
                                                      OpMemberDecorate %23 11 Offset 23 
                                                      OpMemberDecorate %23 12 Offset 23 
                                                      OpMemberDecorate %23 13 Offset 23 
                                                      OpMemberDecorate %23 14 Offset 23 
                                                      OpMemberDecorate %23 15 Offset 23 
                                                      OpMemberDecorate %23 16 Offset 23 
                                                      OpMemberDecorate %23 17 Offset 23 
                                                      OpMemberDecorate %23 18 Offset 23 
                                                      OpMemberDecorate %23 19 Offset 23 
                                                      OpMemberDecorate %23 20 Offset 23 
                                                      OpMemberDecorate %23 21 Offset 23 
                                                      OpMemberDecorate %23 22 Offset 23 
                                                      OpMemberDecorate %23 23 Offset 23 
                                                      OpMemberDecorate %23 24 Offset 23 
                                                      OpDecorate %23 Block 
                                                      OpDecorate %25 DescriptorSet 25 
                                                      OpDecorate %25 Binding 25 
                                                      OpMemberDecorate %119 0 BuiltIn 119 
                                                      OpMemberDecorate %119 1 BuiltIn 119 
                                                      OpMemberDecorate %119 2 BuiltIn 119 
                                                      OpDecorate %119 Block 
                                                      OpDecorate %125 RelaxedPrecision 
                                                      OpDecorate %125 Location 125 
                                                      OpDecorate %126 RelaxedPrecision 
                                                      OpDecorate %126 Location 126 
                                                      OpDecorate %127 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD0 Location 129 
                                                      OpDecorate %131 Location 131 
                                                      OpDecorate vs_TEXCOORD2 Location 183 
                                                      OpDecorate %193 Location 193 
                                                      OpDecorate %236 Location 236 
                                                      OpDecorate vs_TEXCOORD1 Location 358 
                                                      OpDecorate vs_TEXCOORD3 Location 452 
                                                      OpDecorate vs_TEXCOORD5 Location 485 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 3 
                                               %8 = OpTypePointer Private %7 
                                Private f32_3* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 4 
                                              %11 = OpTypePointer Input %10 
                                 Input f32_4* %12 = OpVariable Input 
                                              %13 = OpTypeVector %6 2 
                                              %16 = OpTypeInt 32 0 
                                          u32 %17 = OpConstant 4 
                                              %18 = OpTypeArray %10 %17 
                                              %19 = OpTypeArray %10 %17 
                                              %20 = OpTypeArray %10 %17 
                                              %21 = OpTypeArray %10 %17 
                                              %22 = OpTypeArray %10 %17 
                                              %23 = OpTypeStruct %7 %10 %18 %19 %20 %21 %6 %6 %6 %22 %6 %6 %6 %6 %6 %10 %6 %6 %6 %6 %6 %6 %6 %10 %10 
                                              %24 = OpTypePointer Uniform %23 
Uniform struct {f32_3; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4[4]; f32; f32; f32; f32_4[4]; f32; f32; f32; f32; f32; f32_4; f32; f32; f32; f32; f32; f32; f32; f32_4; f32_4;}* %25 = OpVariable Uniform 
                                              %26 = OpTypeInt 32 1 
                                          i32 %27 = OpConstant 13 
                                              %28 = OpTypePointer Uniform %6 
                                          i32 %31 = OpConstant 14 
                                              %38 = OpTypePointer Private %10 
                               Private f32_4* %39 = OpVariable Private 
                                          i32 %42 = OpConstant 2 
                                          i32 %43 = OpConstant 1 
                                              %44 = OpTypePointer Uniform %10 
                                          i32 %48 = OpConstant 0 
                               Private f32_4* %63 = OpVariable Private 
                                          i32 %65 = OpConstant 3 
                                              %83 = OpTypePointer Uniform %7 
                               Private f32_4* %89 = OpVariable Private 
                                          i32 %92 = OpConstant 5 
                                         u32 %117 = OpConstant 1 
                                             %118 = OpTypeArray %6 %117 
                                             %119 = OpTypeStruct %10 %6 %118 
                                             %120 = OpTypePointer Output %119 
        Output struct {f32_4; f32; f32[1];}* %121 = OpVariable Output 
                                             %123 = OpTypePointer Output %10 
                               Output f32_4* %125 = OpVariable Output 
                                Input f32_4* %126 = OpVariable Input 
                                             %128 = OpTypePointer Output %13 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                             %130 = OpTypePointer Input %13 
                                Input f32_2* %131 = OpVariable Input 
                                             %133 = OpTypePointer Private %13 
                              Private f32_2* %134 = OpVariable Private 
                                         i32 %138 = OpConstant 4 
                                         i32 %154 = OpConstant 19 
                                         i32 %157 = OpConstant 20 
                                             %166 = OpTypePointer Private %6 
                                Private f32* %167 = OpVariable Private 
                                         i32 %171 = OpConstant 16 
                                         i32 %174 = OpConstant 17 
                                         f32 %178 = OpConstant 3.674022E-40 
                                       f32_2 %179 = OpConstantComposite %178 %178 
                       Output f32_4* vs_TEXCOORD2 = OpVariable Output 
                                         u32 %190 = OpConstant 0 
                                Private f32* %192 = OpVariable Private 
                                Input f32_2* %193 = OpVariable Input 
                                             %194 = OpTypePointer Input %6 
                                         i32 %198 = OpConstant 18 
                                         i32 %202 = OpConstant 22 
                                         f32 %205 = OpConstant 3.674022E-40 
                                         i32 %214 = OpConstant 21 
                                             %235 = OpTypePointer Input %7 
                                Input f32_3* %236 = OpVariable Input 
                                         u32 %254 = OpConstant 2 
                              Private f32_3* %263 = OpVariable Private 
                                             %296 = OpTypeBool 
                                             %297 = OpTypePointer Private %296 
                               Private bool* %298 = OpVariable Private 
                                         u32 %299 = OpConstant 3 
                                         f32 %302 = OpConstant 3.674022E-40 
                                             %305 = OpTypePointer Function %6 
                               Private bool* %315 = OpVariable Private 
                                         i32 %322 = OpConstant 10 
                                         i32 %326 = OpConstant 11 
                                         i32 %341 = OpConstant 6 
                                         i32 %348 = OpConstant 12 
                                         f32 %355 = OpConstant 3.674022E-40 
                       Output f32_4* vs_TEXCOORD1 = OpVariable Output 
                                         i32 %366 = OpConstant 8 
                                         i32 %374 = OpConstant 7 
                                             %394 = OpTypePointer Output %6 
                                         i32 %407 = OpConstant 15 
                                         f32 %410 = OpConstant 3.674022E-40 
                                       f32_4 %411 = OpConstantComposite %410 %410 %410 %410 
                                         f32 %414 = OpConstant 3.674022E-40 
                                       f32_4 %415 = OpConstantComposite %414 %414 %414 %414 
                                         f32 %419 = OpConstant 3.674022E-40 
                                       f32_2 %420 = OpConstantComposite %419 %419 
                                         i32 %438 = OpConstant 9 
                                             %451 = OpTypePointer Output %7 
                       Output f32_3* vs_TEXCOORD3 = OpVariable Output 
                                         f32 %463 = OpConstant 3.674022E-40 
                                         f32 %473 = OpConstant 3.674022E-40 
                                         f32 %480 = OpConstant 3.674022E-40 
                                       f32_2 %481 = OpConstantComposite %480 %480 
                       Output f32_4* vs_TEXCOORD5 = OpVariable Output 
                                         i32 %488 = OpConstant 23 
                                         i32 %501 = OpConstant 24 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                               Function f32* %306 = OpVariable Function 
                                        f32_4 %14 = OpLoad %12 
                                        f32_2 %15 = OpVectorShuffle %14 %14 0 1 
                                 Uniform f32* %29 = OpAccessChain %25 %27 
                                          f32 %30 = OpLoad %29 
                                 Uniform f32* %32 = OpAccessChain %25 %31 
                                          f32 %33 = OpLoad %32 
                                        f32_2 %34 = OpCompositeConstruct %30 %33 
                                        f32_2 %35 = OpFAdd %15 %34 
                                        f32_3 %36 = OpLoad %9 
                                        f32_3 %37 = OpVectorShuffle %36 %35 3 4 2 
                                                      OpStore %9 %37 
                                        f32_3 %40 = OpLoad %9 
                                        f32_4 %41 = OpVectorShuffle %40 %40 1 1 1 1 
                               Uniform f32_4* %45 = OpAccessChain %25 %42 %43 
                                        f32_4 %46 = OpLoad %45 
                                        f32_4 %47 = OpFMul %41 %46 
                                                      OpStore %39 %47 
                               Uniform f32_4* %49 = OpAccessChain %25 %42 %48 
                                        f32_4 %50 = OpLoad %49 
                                        f32_3 %51 = OpLoad %9 
                                        f32_4 %52 = OpVectorShuffle %51 %51 0 0 0 0 
                                        f32_4 %53 = OpFMul %50 %52 
                                        f32_4 %54 = OpLoad %39 
                                        f32_4 %55 = OpFAdd %53 %54 
                                                      OpStore %39 %55 
                               Uniform f32_4* %56 = OpAccessChain %25 %42 %42 
                                        f32_4 %57 = OpLoad %56 
                                        f32_4 %58 = OpLoad %12 
                                        f32_4 %59 = OpVectorShuffle %58 %58 2 2 2 2 
                                        f32_4 %60 = OpFMul %57 %59 
                                        f32_4 %61 = OpLoad %39 
                                        f32_4 %62 = OpFAdd %60 %61 
                                                      OpStore %39 %62 
                                        f32_4 %64 = OpLoad %39 
                               Uniform f32_4* %66 = OpAccessChain %25 %42 %65 
                                        f32_4 %67 = OpLoad %66 
                                        f32_4 %68 = OpFAdd %64 %67 
                                                      OpStore %63 %68 
                               Uniform f32_4* %69 = OpAccessChain %25 %42 %65 
                                        f32_4 %70 = OpLoad %69 
                                        f32_3 %71 = OpVectorShuffle %70 %70 0 1 2 
                                        f32_4 %72 = OpLoad %12 
                                        f32_3 %73 = OpVectorShuffle %72 %72 3 3 3 
                                        f32_3 %74 = OpFMul %71 %73 
                                        f32_4 %75 = OpLoad %39 
                                        f32_3 %76 = OpVectorShuffle %75 %75 0 1 2 
                                        f32_3 %77 = OpFAdd %74 %76 
                                        f32_4 %78 = OpLoad %39 
                                        f32_4 %79 = OpVectorShuffle %78 %77 4 5 6 3 
                                                      OpStore %39 %79 
                                        f32_4 %80 = OpLoad %39 
                                        f32_3 %81 = OpVectorShuffle %80 %80 0 1 2 
                                        f32_3 %82 = OpFNegate %81 
                               Uniform f32_3* %84 = OpAccessChain %25 %48 
                                        f32_3 %85 = OpLoad %84 
                                        f32_3 %86 = OpFAdd %82 %85 
                                        f32_4 %87 = OpLoad %39 
                                        f32_4 %88 = OpVectorShuffle %87 %86 4 5 6 3 
                                                      OpStore %39 %88 
                                        f32_4 %90 = OpLoad %63 
                                        f32_4 %91 = OpVectorShuffle %90 %90 1 1 1 1 
                               Uniform f32_4* %93 = OpAccessChain %25 %92 %43 
                                        f32_4 %94 = OpLoad %93 
                                        f32_4 %95 = OpFMul %91 %94 
                                                      OpStore %89 %95 
                               Uniform f32_4* %96 = OpAccessChain %25 %92 %48 
                                        f32_4 %97 = OpLoad %96 
                                        f32_4 %98 = OpLoad %63 
                                        f32_4 %99 = OpVectorShuffle %98 %98 0 0 0 0 
                                       f32_4 %100 = OpFMul %97 %99 
                                       f32_4 %101 = OpLoad %89 
                                       f32_4 %102 = OpFAdd %100 %101 
                                                      OpStore %89 %102 
                              Uniform f32_4* %103 = OpAccessChain %25 %92 %42 
                                       f32_4 %104 = OpLoad %103 
                                       f32_4 %105 = OpLoad %63 
                                       f32_4 %106 = OpVectorShuffle %105 %105 2 2 2 2 
                                       f32_4 %107 = OpFMul %104 %106 
                                       f32_4 %108 = OpLoad %89 
                                       f32_4 %109 = OpFAdd %107 %108 
                                                      OpStore %89 %109 
                              Uniform f32_4* %110 = OpAccessChain %25 %92 %65 
                                       f32_4 %111 = OpLoad %110 
                                       f32_4 %112 = OpLoad %63 
                                       f32_4 %113 = OpVectorShuffle %112 %112 3 3 3 3 
                                       f32_4 %114 = OpFMul %111 %113 
                                       f32_4 %115 = OpLoad %89 
                                       f32_4 %116 = OpFAdd %114 %115 
                                                      OpStore %63 %116 
                                       f32_4 %122 = OpLoad %63 
                               Output f32_4* %124 = OpAccessChain %121 %48 
                                                      OpStore %124 %122 
                                       f32_4 %127 = OpLoad %126 
                                                      OpStore %125 %127 
                                       f32_2 %132 = OpLoad %131 
                                                      OpStore vs_TEXCOORD0 %132 
                              Uniform f32_4* %135 = OpAccessChain %25 %43 
                                       f32_4 %136 = OpLoad %135 
                                       f32_2 %137 = OpVectorShuffle %136 %136 1 1 
                              Uniform f32_4* %139 = OpAccessChain %25 %138 %43 
                                       f32_4 %140 = OpLoad %139 
                                       f32_2 %141 = OpVectorShuffle %140 %140 0 1 
                                       f32_2 %142 = OpFMul %137 %141 
                                                      OpStore %134 %142 
                              Uniform f32_4* %143 = OpAccessChain %25 %138 %48 
                                       f32_4 %144 = OpLoad %143 
                                       f32_2 %145 = OpVectorShuffle %144 %144 0 1 
                              Uniform f32_4* %146 = OpAccessChain %25 %43 
                                       f32_4 %147 = OpLoad %146 
                                       f32_2 %148 = OpVectorShuffle %147 %147 0 0 
                                       f32_2 %149 = OpFMul %145 %148 
                                       f32_2 %150 = OpLoad %134 
                                       f32_2 %151 = OpFAdd %149 %150 
                                                      OpStore %134 %151 
                                       f32_2 %152 = OpLoad %134 
                                       f32_2 %153 = OpExtInst %1 4 %152 
                                Uniform f32* %155 = OpAccessChain %25 %154 
                                         f32 %156 = OpLoad %155 
                                Uniform f32* %158 = OpAccessChain %25 %157 
                                         f32 %159 = OpLoad %158 
                                       f32_2 %160 = OpCompositeConstruct %156 %159 
                                       f32_2 %161 = OpFMul %153 %160 
                                                      OpStore %134 %161 
                                       f32_4 %162 = OpLoad %63 
                                       f32_2 %163 = OpVectorShuffle %162 %162 3 3 
                                       f32_2 %164 = OpLoad %134 
                                       f32_2 %165 = OpFDiv %163 %164 
                                                      OpStore %134 %165 
                                       f32_2 %168 = OpLoad %134 
                                       f32_2 %169 = OpLoad %134 
                                         f32 %170 = OpDot %168 %169 
                                                      OpStore %167 %170 
                                Uniform f32* %172 = OpAccessChain %25 %171 
                                         f32 %173 = OpLoad %172 
                                Uniform f32* %175 = OpAccessChain %25 %174 
                                         f32 %176 = OpLoad %175 
                                       f32_2 %177 = OpCompositeConstruct %173 %176 
                                       f32_2 %180 = OpFMul %177 %179 
                                       f32_2 %181 = OpLoad %134 
                                       f32_2 %182 = OpFAdd %180 %181 
                                                      OpStore %134 %182 
                                       f32_2 %184 = OpLoad %134 
                                       f32_2 %185 = OpFDiv %179 %184 
                                       f32_4 %186 = OpLoad vs_TEXCOORD2 
                                       f32_4 %187 = OpVectorShuffle %186 %185 0 1 4 5 
                                                      OpStore vs_TEXCOORD2 %187 
                                         f32 %188 = OpLoad %167 
                                         f32 %189 = OpExtInst %1 32 %188 
                                Private f32* %191 = OpAccessChain %134 %190 
                                                      OpStore %191 %189 
                                  Input f32* %195 = OpAccessChain %193 %117 
                                         f32 %196 = OpLoad %195 
                                         f32 %197 = OpExtInst %1 4 %196 
                                Uniform f32* %199 = OpAccessChain %25 %198 
                                         f32 %200 = OpLoad %199 
                                         f32 %201 = OpFMul %197 %200 
                                                      OpStore %192 %201 
                                Uniform f32* %203 = OpAccessChain %25 %202 
                                         f32 %204 = OpLoad %203 
                                         f32 %206 = OpFAdd %204 %205 
                                                      OpStore %167 %206 
                                         f32 %207 = OpLoad %192 
                                         f32 %208 = OpLoad %167 
                                         f32 %209 = OpFMul %207 %208 
                                                      OpStore %192 %209 
                                         f32 %210 = OpLoad %192 
                                Private f32* %211 = OpAccessChain %134 %190 
                                         f32 %212 = OpLoad %211 
                                         f32 %213 = OpFMul %210 %212 
                                                      OpStore %167 %213 
                                Uniform f32* %215 = OpAccessChain %25 %214 
                                         f32 %216 = OpLoad %215 
                                         f32 %217 = OpFNegate %216 
                                         f32 %218 = OpFAdd %217 %205 
                                Private f32* %219 = OpAccessChain %63 %190 
                                                      OpStore %219 %218 
                                         f32 %220 = OpLoad %167 
                                         f32 %221 = OpExtInst %1 4 %220 
                                Private f32* %222 = OpAccessChain %63 %190 
                                         f32 %223 = OpLoad %222 
                                         f32 %224 = OpFMul %221 %223 
                                Private f32* %225 = OpAccessChain %63 %190 
                                                      OpStore %225 %224 
                                Private f32* %226 = OpAccessChain %134 %190 
                                         f32 %227 = OpLoad %226 
                                         f32 %228 = OpLoad %192 
                                         f32 %229 = OpFMul %227 %228 
                                Private f32* %230 = OpAccessChain %63 %190 
                                         f32 %231 = OpLoad %230 
                                         f32 %232 = OpFNegate %231 
                                         f32 %233 = OpFAdd %229 %232 
                                Private f32* %234 = OpAccessChain %134 %190 
                                                      OpStore %234 %233 
                                       f32_3 %237 = OpLoad %236 
                              Uniform f32_4* %238 = OpAccessChain %25 %65 %48 
                                       f32_4 %239 = OpLoad %238 
                                       f32_3 %240 = OpVectorShuffle %239 %239 0 1 2 
                                         f32 %241 = OpDot %237 %240 
                                Private f32* %242 = OpAccessChain %89 %190 
                                                      OpStore %242 %241 
                                       f32_3 %243 = OpLoad %236 
                              Uniform f32_4* %244 = OpAccessChain %25 %65 %43 
                                       f32_4 %245 = OpLoad %244 
                                       f32_3 %246 = OpVectorShuffle %245 %245 0 1 2 
                                         f32 %247 = OpDot %243 %246 
                                Private f32* %248 = OpAccessChain %89 %117 
                                                      OpStore %248 %247 
                                       f32_3 %249 = OpLoad %236 
                              Uniform f32_4* %250 = OpAccessChain %25 %65 %42 
                                       f32_4 %251 = OpLoad %250 
                                       f32_3 %252 = OpVectorShuffle %251 %251 0 1 2 
                                         f32 %253 = OpDot %249 %252 
                                Private f32* %255 = OpAccessChain %89 %254 
                                                      OpStore %255 %253 
                                       f32_4 %256 = OpLoad %89 
                                       f32_3 %257 = OpVectorShuffle %256 %256 0 1 2 
                                       f32_4 %258 = OpLoad %89 
                                       f32_3 %259 = OpVectorShuffle %258 %258 0 1 2 
                                         f32 %260 = OpDot %257 %259 
                                                      OpStore %192 %260 
                                         f32 %261 = OpLoad %192 
                                         f32 %262 = OpExtInst %1 32 %261 
                                                      OpStore %192 %262 
                                         f32 %264 = OpLoad %192 
                                       f32_3 %265 = OpCompositeConstruct %264 %264 %264 
                                       f32_4 %266 = OpLoad %89 
                                       f32_3 %267 = OpVectorShuffle %266 %266 0 1 2 
                                       f32_3 %268 = OpFMul %265 %267 
                                                      OpStore %263 %268 
                                       f32_4 %269 = OpLoad %39 
                                       f32_3 %270 = OpVectorShuffle %269 %269 0 1 2 
                                       f32_4 %271 = OpLoad %39 
                                       f32_3 %272 = OpVectorShuffle %271 %271 0 1 2 
                                         f32 %273 = OpDot %270 %272 
                                                      OpStore %192 %273 
                                         f32 %274 = OpLoad %192 
                                         f32 %275 = OpExtInst %1 32 %274 
                                                      OpStore %192 %275 
                                         f32 %276 = OpLoad %192 
                                       f32_3 %277 = OpCompositeConstruct %276 %276 %276 
                                       f32_4 %278 = OpLoad %39 
                                       f32_3 %279 = OpVectorShuffle %278 %278 0 1 2 
                                       f32_3 %280 = OpFMul %277 %279 
                                       f32_4 %281 = OpLoad %89 
                                       f32_4 %282 = OpVectorShuffle %281 %280 4 5 6 3 
                                                      OpStore %89 %282 
                                       f32_3 %283 = OpLoad %263 
                                       f32_4 %284 = OpLoad %89 
                                       f32_3 %285 = OpVectorShuffle %284 %284 0 1 2 
                                         f32 %286 = OpDot %283 %285 
                                                      OpStore %192 %286 
                                         f32 %287 = OpLoad %192 
                                         f32 %288 = OpExtInst %1 4 %287 
                                Private f32* %289 = OpAccessChain %134 %190 
                                         f32 %290 = OpLoad %289 
                                         f32 %291 = OpFMul %288 %290 
                                Private f32* %292 = OpAccessChain %63 %190 
                                         f32 %293 = OpLoad %292 
                                         f32 %294 = OpFAdd %291 %293 
                                Private f32* %295 = OpAccessChain %134 %190 
                                                      OpStore %295 %294 
                                Uniform f32* %300 = OpAccessChain %25 %138 %65 %299 
                                         f32 %301 = OpLoad %300 
                                        bool %303 = OpFOrdEqual %301 %302 
                                                      OpStore %298 %303 
                                        bool %304 = OpLoad %298 
                                                      OpSelectionMerge %308 None 
                                                      OpBranchConditional %304 %307 %311 
                                             %307 = OpLabel 
                                Private f32* %309 = OpAccessChain %134 %190 
                                         f32 %310 = OpLoad %309 
                                                      OpStore %306 %310 
                                                      OpBranch %308 
                                             %311 = OpLabel 
                                         f32 %312 = OpLoad %167 
                                                      OpStore %306 %312 
                                                      OpBranch %308 
                                             %308 = OpLabel 
                                         f32 %313 = OpLoad %306 
                                Private f32* %314 = OpAccessChain %263 %190 
                                                      OpStore %314 %313 
                                  Input f32* %316 = OpAccessChain %193 %117 
                                         f32 %317 = OpLoad %316 
                                        bool %318 = OpFOrdGreaterThanEqual %302 %317 
                                                      OpStore %315 %318 
                                        bool %319 = OpLoad %315 
                                         f32 %320 = OpSelect %319 %205 %302 
                                Private f32* %321 = OpAccessChain %134 %190 
                                                      OpStore %321 %320 
                                Uniform f32* %323 = OpAccessChain %25 %322 
                                         f32 %324 = OpLoad %323 
                                         f32 %325 = OpFNegate %324 
                                Uniform f32* %327 = OpAccessChain %25 %326 
                                         f32 %328 = OpLoad %327 
                                         f32 %329 = OpFAdd %325 %328 
                                                      OpStore %192 %329 
                                Private f32* %330 = OpAccessChain %134 %190 
                                         f32 %331 = OpLoad %330 
                                         f32 %332 = OpLoad %192 
                                         f32 %333 = OpFMul %331 %332 
                                Uniform f32* %334 = OpAccessChain %25 %322 
                                         f32 %335 = OpLoad %334 
                                         f32 %336 = OpFAdd %333 %335 
                                Private f32* %337 = OpAccessChain %134 %190 
                                                      OpStore %337 %336 
                                Private f32* %338 = OpAccessChain %134 %190 
                                         f32 %339 = OpLoad %338 
                                         f32 %340 = OpFMul %339 %178 
                                Uniform f32* %342 = OpAccessChain %25 %341 
                                         f32 %343 = OpLoad %342 
                                         f32 %344 = OpFAdd %340 %343 
                                Private f32* %345 = OpAccessChain %134 %190 
                                                      OpStore %345 %344 
                                Private f32* %346 = OpAccessChain %134 %190 
                                         f32 %347 = OpLoad %346 
                                Uniform f32* %349 = OpAccessChain %25 %348 
                                         f32 %350 = OpLoad %349 
                                         f32 %351 = OpFMul %347 %350 
                                Private f32* %352 = OpAccessChain %134 %190 
                                                      OpStore %352 %351 
                                Private f32* %353 = OpAccessChain %134 %190 
                                         f32 %354 = OpLoad %353 
                                         f32 %356 = OpFMul %354 %355 
                                Private f32* %357 = OpAccessChain %263 %254 
                                                      OpStore %357 %356 
                                       f32_3 %359 = OpLoad %263 
                                       f32_2 %360 = OpVectorShuffle %359 %359 0 2 
                                       f32_4 %361 = OpLoad vs_TEXCOORD1 
                                       f32_4 %362 = OpVectorShuffle %361 %360 0 4 2 5 
                                                      OpStore vs_TEXCOORD1 %362 
                                Private f32* %363 = OpAccessChain %263 %190 
                                         f32 %364 = OpLoad %363 
                                         f32 %365 = OpFDiv %355 %364 
                                                      OpStore %192 %365 
                                Uniform f32* %367 = OpAccessChain %25 %366 
                                         f32 %368 = OpLoad %367 
                                         f32 %369 = OpFNegate %368 
                                Uniform f32* %370 = OpAccessChain %25 %348 
                                         f32 %371 = OpLoad %370 
                                         f32 %372 = OpFMul %369 %371 
                                         f32 %373 = OpFAdd %372 %205 
                                                      OpStore %167 %373 
                                Uniform f32* %375 = OpAccessChain %25 %374 
                                         f32 %376 = OpLoad %375 
                                         f32 %377 = OpFNegate %376 
                                Uniform f32* %378 = OpAccessChain %25 %348 
                                         f32 %379 = OpLoad %378 
                                         f32 %380 = OpFMul %377 %379 
                                         f32 %381 = OpLoad %167 
                                         f32 %382 = OpFAdd %380 %381 
                                                      OpStore %167 %382 
                                         f32 %383 = OpLoad %167 
                                         f32 %384 = OpFMul %383 %355 
                                         f32 %385 = OpLoad %192 
                                         f32 %386 = OpFNegate %385 
                                         f32 %387 = OpFAdd %384 %386 
                                                      OpStore %167 %387 
                                Private f32* %388 = OpAccessChain %134 %190 
                                         f32 %389 = OpLoad %388 
                                         f32 %390 = OpFNegate %389 
                                         f32 %391 = OpFMul %390 %355 
                                         f32 %392 = OpLoad %167 
                                         f32 %393 = OpFAdd %391 %392 
                                 Output f32* %395 = OpAccessChain vs_TEXCOORD1 %190 
                                                      OpStore %395 %393 
                                Private f32* %396 = OpAccessChain %134 %190 
                                         f32 %397 = OpLoad %396 
                                         f32 %398 = OpFNegate %397 
                                         f32 %399 = OpFMul %398 %355 
                                         f32 %400 = OpFAdd %399 %355 
                                Private f32* %401 = OpAccessChain %134 %190 
                                                      OpStore %401 %400 
                                         f32 %402 = OpLoad %192 
                                Private f32* %403 = OpAccessChain %134 %190 
                                         f32 %404 = OpLoad %403 
                                         f32 %405 = OpFAdd %402 %404 
                                 Output f32* %406 = OpAccessChain vs_TEXCOORD1 %254 
                                                      OpStore %406 %405 
                              Uniform f32_4* %408 = OpAccessChain %25 %407 
                                       f32_4 %409 = OpLoad %408 
                                       f32_4 %412 = OpExtInst %1 40 %409 %411 
                                                      OpStore %63 %412 
                                       f32_4 %413 = OpLoad %63 
                                       f32_4 %416 = OpExtInst %1 37 %413 %415 
                                                      OpStore %63 %416 
                                       f32_3 %417 = OpLoad %9 
                                       f32_2 %418 = OpVectorShuffle %417 %417 0 1 
                                       f32_2 %421 = OpFMul %418 %420 
                                       f32_4 %422 = OpLoad %63 
                                       f32_2 %423 = OpVectorShuffle %422 %422 0 1 
                                       f32_2 %424 = OpFNegate %423 
                                       f32_2 %425 = OpFAdd %421 %424 
                                       f32_3 %426 = OpLoad %9 
                                       f32_3 %427 = OpVectorShuffle %426 %425 3 4 2 
                                                      OpStore %9 %427 
                                       f32_4 %428 = OpLoad %63 
                                       f32_2 %429 = OpVectorShuffle %428 %428 2 3 
                                       f32_2 %430 = OpFNegate %429 
                                       f32_3 %431 = OpLoad %9 
                                       f32_2 %432 = OpVectorShuffle %431 %431 0 1 
                                       f32_2 %433 = OpFAdd %430 %432 
                                       f32_4 %434 = OpLoad vs_TEXCOORD2 
                                       f32_4 %435 = OpVectorShuffle %434 %433 4 5 2 3 
                                                      OpStore vs_TEXCOORD2 %435 
                                       f32_4 %436 = OpLoad %39 
                                       f32_3 %437 = OpVectorShuffle %436 %436 1 1 1 
                              Uniform f32_4* %439 = OpAccessChain %25 %438 %43 
                                       f32_4 %440 = OpLoad %439 
                                       f32_3 %441 = OpVectorShuffle %440 %440 0 1 2 
                                       f32_3 %442 = OpFMul %437 %441 
                                                      OpStore %9 %442 
                              Uniform f32_4* %443 = OpAccessChain %25 %438 %48 
                                       f32_4 %444 = OpLoad %443 
                                       f32_3 %445 = OpVectorShuffle %444 %444 0 1 2 
                                       f32_4 %446 = OpLoad %39 
                                       f32_3 %447 = OpVectorShuffle %446 %446 0 0 0 
                                       f32_3 %448 = OpFMul %445 %447 
                                       f32_3 %449 = OpLoad %9 
                                       f32_3 %450 = OpFAdd %448 %449 
                                                      OpStore %9 %450 
                              Uniform f32_4* %453 = OpAccessChain %25 %438 %42 
                                       f32_4 %454 = OpLoad %453 
                                       f32_3 %455 = OpVectorShuffle %454 %454 0 1 2 
                                       f32_4 %456 = OpLoad %39 
                                       f32_3 %457 = OpVectorShuffle %456 %456 2 2 2 
                                       f32_3 %458 = OpFMul %455 %457 
                                       f32_3 %459 = OpLoad %9 
                                       f32_3 %460 = OpFAdd %458 %459 
                                                      OpStore vs_TEXCOORD3 %460 
                                  Input f32* %461 = OpAccessChain %193 %190 
                                         f32 %462 = OpLoad %461 
                                         f32 %464 = OpFMul %462 %463 
                                Private f32* %465 = OpAccessChain %9 %190 
                                                      OpStore %465 %464 
                                Private f32* %466 = OpAccessChain %9 %190 
                                         f32 %467 = OpLoad %466 
                                         f32 %468 = OpExtInst %1 8 %467 
                                Private f32* %469 = OpAccessChain %134 %190 
                                                      OpStore %469 %468 
                                Private f32* %470 = OpAccessChain %134 %190 
                                         f32 %471 = OpLoad %470 
                                         f32 %472 = OpFNegate %471 
                                         f32 %474 = OpFMul %472 %473 
                                  Input f32* %475 = OpAccessChain %193 %190 
                                         f32 %476 = OpLoad %475 
                                         f32 %477 = OpFAdd %474 %476 
                                Private f32* %478 = OpAccessChain %134 %117 
                                                      OpStore %478 %477 
                                       f32_2 %479 = OpLoad %134 
                                       f32_2 %482 = OpFMul %479 %481 
                                       f32_3 %483 = OpLoad %9 
                                       f32_3 %484 = OpVectorShuffle %483 %482 3 4 2 
                                                      OpStore %9 %484 
                                       f32_3 %486 = OpLoad %9 
                                       f32_2 %487 = OpVectorShuffle %486 %486 0 1 
                              Uniform f32_4* %489 = OpAccessChain %25 %488 
                                       f32_4 %490 = OpLoad %489 
                                       f32_2 %491 = OpVectorShuffle %490 %490 0 1 
                                       f32_2 %492 = OpFMul %487 %491 
                              Uniform f32_4* %493 = OpAccessChain %25 %488 
                                       f32_4 %494 = OpLoad %493 
                                       f32_2 %495 = OpVectorShuffle %494 %494 2 3 
                                       f32_2 %496 = OpFAdd %492 %495 
                                       f32_4 %497 = OpLoad vs_TEXCOORD5 
                                       f32_4 %498 = OpVectorShuffle %497 %496 4 5 2 3 
                                                      OpStore vs_TEXCOORD5 %498 
                                       f32_3 %499 = OpLoad %9 
                                       f32_2 %500 = OpVectorShuffle %499 %499 0 1 
                              Uniform f32_4* %502 = OpAccessChain %25 %501 
                                       f32_4 %503 = OpLoad %502 
                                       f32_2 %504 = OpVectorShuffle %503 %503 0 1 
                                       f32_2 %505 = OpFMul %500 %504 
                              Uniform f32_4* %506 = OpAccessChain %25 %501 
                                       f32_4 %507 = OpLoad %506 
                                       f32_2 %508 = OpVectorShuffle %507 %507 2 3 
                                       f32_2 %509 = OpFAdd %505 %508 
                                       f32_4 %510 = OpLoad vs_TEXCOORD5 
                                       f32_4 %511 = OpVectorShuffle %510 %509 0 1 4 5 
                                                      OpStore vs_TEXCOORD5 %511 
                                 Output f32* %512 = OpAccessChain %121 %48 %117 
                                         f32 %513 = OpLoad %512 
                                         f32 %514 = OpFNegate %513 
                                 Output f32* %515 = OpAccessChain %121 %48 %117 
                                                      OpStore %515 %514 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 316
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %22 %35 %128 %149 %286 %310 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpDecorate %9 RelaxedPrecision 
                                                      OpDecorate %12 RelaxedPrecision 
                                                      OpDecorate %12 DescriptorSet 12 
                                                      OpDecorate %12 Binding 12 
                                                      OpDecorate %13 RelaxedPrecision 
                                                      OpDecorate %16 RelaxedPrecision 
                                                      OpDecorate %16 DescriptorSet 16 
                                                      OpDecorate %16 Binding 16 
                                                      OpDecorate %17 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD0 Location 22 
                                                      OpDecorate %27 RelaxedPrecision 
                                                      OpDecorate %33 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD1 Location 35 
                                                      OpDecorate %45 RelaxedPrecision 
                                                      OpDecorate %46 RelaxedPrecision 
                                                      OpMemberDecorate %69 0 Offset 69 
                                                      OpMemberDecorate %69 1 Offset 69 
                                                      OpMemberDecorate %69 2 Offset 69 
                                                      OpMemberDecorate %69 3 RelaxedPrecision 
                                                      OpMemberDecorate %69 3 Offset 69 
                                                      OpMemberDecorate %69 4 Offset 69 
                                                      OpMemberDecorate %69 5 Offset 69 
                                                      OpMemberDecorate %69 6 Offset 69 
                                                      OpMemberDecorate %69 7 RelaxedPrecision 
                                                      OpMemberDecorate %69 7 Offset 69 
                                                      OpMemberDecorate %69 8 Offset 69 
                                                      OpMemberDecorate %69 9 Offset 69 
                                                      OpMemberDecorate %69 10 Offset 69 
                                                      OpDecorate %69 Block 
                                                      OpDecorate %71 DescriptorSet 71 
                                                      OpDecorate %71 Binding 71 
                                                      OpDecorate %85 RelaxedPrecision 
                                                      OpDecorate %89 RelaxedPrecision 
                                                      OpDecorate %93 RelaxedPrecision 
                                                      OpDecorate %94 RelaxedPrecision 
                                                      OpDecorate %95 RelaxedPrecision 
                                                      OpDecorate %101 RelaxedPrecision 
                                                      OpDecorate %103 RelaxedPrecision 
                                                      OpDecorate %104 RelaxedPrecision 
                                                      OpDecorate %110 RelaxedPrecision 
                                                      OpDecorate %111 RelaxedPrecision 
                                                      OpDecorate %113 RelaxedPrecision 
                                                      OpDecorate %114 RelaxedPrecision 
                                                      OpDecorate %115 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD5 Location 128 
                                                      OpDecorate %134 RelaxedPrecision 
                                                      OpDecorate %134 DescriptorSet 134 
                                                      OpDecorate %134 Binding 134 
                                                      OpDecorate %135 RelaxedPrecision 
                                                      OpDecorate %136 RelaxedPrecision 
                                                      OpDecorate %136 DescriptorSet 136 
                                                      OpDecorate %136 Binding 136 
                                                      OpDecorate %137 RelaxedPrecision 
                                                      OpDecorate %143 RelaxedPrecision 
                                                      OpDecorate %146 RelaxedPrecision 
                                                      OpDecorate %147 RelaxedPrecision 
                                                      OpDecorate %148 RelaxedPrecision 
                                                      OpDecorate %149 RelaxedPrecision 
                                                      OpDecorate %149 Location 149 
                                                      OpDecorate %150 RelaxedPrecision 
                                                      OpDecorate %151 RelaxedPrecision 
                                                      OpDecorate %154 RelaxedPrecision 
                                                      OpDecorate %155 RelaxedPrecision 
                                                      OpDecorate %156 RelaxedPrecision 
                                                      OpDecorate %172 RelaxedPrecision 
                                                      OpDecorate %173 RelaxedPrecision 
                                                      OpDecorate %173 DescriptorSet 173 
                                                      OpDecorate %173 Binding 173 
                                                      OpDecorate %174 RelaxedPrecision 
                                                      OpDecorate %175 RelaxedPrecision 
                                                      OpDecorate %175 DescriptorSet 175 
                                                      OpDecorate %175 Binding 175 
                                                      OpDecorate %176 RelaxedPrecision 
                                                      OpDecorate %181 RelaxedPrecision 
                                                      OpDecorate %182 RelaxedPrecision 
                                                      OpDecorate %183 RelaxedPrecision 
                                                      OpDecorate %184 RelaxedPrecision 
                                                      OpDecorate %188 RelaxedPrecision 
                                                      OpDecorate %190 RelaxedPrecision 
                                                      OpDecorate %191 RelaxedPrecision 
                                                      OpDecorate %197 RelaxedPrecision 
                                                      OpDecorate %203 RelaxedPrecision 
                                                      OpDecorate %204 RelaxedPrecision 
                                                      OpDecorate %209 RelaxedPrecision 
                                                      OpDecorate %211 RelaxedPrecision 
                                                      OpDecorate %212 RelaxedPrecision 
                                                      OpDecorate %218 RelaxedPrecision 
                                                      OpDecorate %219 RelaxedPrecision 
                                                      OpDecorate %220 RelaxedPrecision 
                                                      OpDecorate %221 RelaxedPrecision 
                                                      OpDecorate %222 RelaxedPrecision 
                                                      OpDecorate %227 RelaxedPrecision 
                                                      OpDecorate %228 RelaxedPrecision 
                                                      OpDecorate %233 RelaxedPrecision 
                                                      OpDecorate %235 RelaxedPrecision 
                                                      OpDecorate %236 RelaxedPrecision 
                                                      OpDecorate %238 RelaxedPrecision 
                                                      OpDecorate %239 RelaxedPrecision 
                                                      OpDecorate %262 RelaxedPrecision 
                                                      OpDecorate %264 RelaxedPrecision 
                                                      OpDecorate %265 RelaxedPrecision 
                                                      OpDecorate %266 RelaxedPrecision 
                                                      OpDecorate %267 RelaxedPrecision 
                                                      OpDecorate %268 RelaxedPrecision 
                                                      OpDecorate %269 RelaxedPrecision 
                                                      OpDecorate %270 RelaxedPrecision 
                                                      OpDecorate %271 RelaxedPrecision 
                                                      OpDecorate %272 RelaxedPrecision 
                                                      OpDecorate %273 RelaxedPrecision 
                                                      OpDecorate %274 RelaxedPrecision 
                                                      OpDecorate %275 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD2 Location 286 
                                                      OpDecorate %305 RelaxedPrecision 
                                                      OpDecorate %306 RelaxedPrecision 
                                                      OpDecorate %307 RelaxedPrecision 
                                                      OpDecorate %308 RelaxedPrecision 
                                                      OpDecorate %310 RelaxedPrecision 
                                                      OpDecorate %310 Location 310 
                                                      OpDecorate %311 RelaxedPrecision 
                                                      OpDecorate %312 RelaxedPrecision 
                                                      OpDecorate %313 RelaxedPrecision 
                                                      OpDecorate %314 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypePointer UniformConstant %10 
         UniformConstant read_only Texture2D* %12 = OpVariable UniformConstant 
                                              %14 = OpTypeSampler 
                                              %15 = OpTypePointer UniformConstant %14 
                     UniformConstant sampler* %16 = OpVariable UniformConstant 
                                              %18 = OpTypeSampledImage %10 
                                              %20 = OpTypeVector %6 2 
                                              %21 = OpTypePointer Input %20 
                        Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                              %25 = OpTypeInt 32 0 
                                          u32 %26 = OpConstant 3 
                                          u32 %28 = OpConstant 0 
                                              %29 = OpTypePointer Private %6 
                                 Private f32* %31 = OpVariable Private 
                                              %34 = OpTypePointer Input %7 
                        Input f32_4* vs_TEXCOORD1 = OpVariable Input 
                                              %36 = OpTypePointer Input %6 
                                              %41 = OpTypeVector %6 3 
                                              %42 = OpTypePointer Private %41 
                               Private f32_3* %43 = OpVariable Private 
                                          u32 %47 = OpConstant 2 
                                              %52 = OpTypeBool 
                                              %53 = OpTypePointer Private %52 
                                Private bool* %54 = OpVariable Private 
                                          f32 %56 = OpConstant 3.674022E-40 
                                              %59 = OpTypeInt 32 1 
                                          i32 %60 = OpConstant 0 
                                          i32 %61 = OpConstant 1 
                                          i32 %63 = OpConstant -1 
                                              %69 = OpTypeStruct %7 %6 %6 %7 %6 %6 %6 %7 %6 %6 %7 
                                              %70 = OpTypePointer Uniform %69 
Uniform struct {f32_4; f32; f32; f32_4; f32; f32; f32; f32_4; f32; f32; f32_4;}* %71 = OpVariable Uniform 
                                          i32 %72 = OpConstant 8 
                                              %73 = OpTypePointer Uniform %6 
                                          i32 %76 = OpConstant 9 
                                          u32 %81 = OpConstant 1 
                                 Private f32* %85 = OpVariable Private 
                                          f32 %87 = OpConstant 3.674022E-40 
                                 Private f32* %89 = OpVariable Private 
                                          f32 %91 = OpConstant 3.674022E-40 
                                 Private f32* %95 = OpVariable Private 
                                         i32 %116 = OpConstant 5 
                                         i32 %119 = OpConstant 6 
                                             %123 = OpTypePointer Uniform %7 
                        Input f32_4* vs_TEXCOORD5 = OpVariable Input 
        UniformConstant read_only Texture2D* %134 = OpVariable UniformConstant 
                    UniformConstant sampler* %136 = OpVariable UniformConstant 
                              Private f32_4* %142 = OpVariable Private 
                                         i32 %144 = OpConstant 7 
                              Private f32_3* %148 = OpVariable Private 
                                Input f32_4* %149 = OpVariable Input 
                                         i32 %152 = OpConstant 3 
                                         i32 %159 = OpConstant 2 
                              Private f32_4* %172 = OpVariable Private 
        UniformConstant read_only Texture2D* %173 = OpVariable UniformConstant 
                    UniformConstant sampler* %175 = OpVariable UniformConstant 
                                             %185 = OpTypePointer Private %20 
                              Private f32_2* %186 = OpVariable Private 
                              Private f32_4* %197 = OpVariable Private 
                              Private f32_4* %222 = OpVariable Private 
                                         i32 %241 = OpConstant 4 
                                Private f32* %248 = OpVariable Private 
                                         i32 %276 = OpConstant 10 
                        Input f32_4* vs_TEXCOORD2 = OpVariable Input 
                                             %309 = OpTypePointer Output %7 
                               Output f32_4* %310 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                          read_only Texture2D %13 = OpLoad %12 
                                      sampler %17 = OpLoad %16 
                   read_only Texture2DSampled %19 = OpSampledImage %13 %17 
                                        f32_2 %23 = OpLoad vs_TEXCOORD0 
                                        f32_4 %24 = OpImageSampleImplicitLod %19 %23 
                                          f32 %27 = OpCompositeExtract %24 3 
                                 Private f32* %30 = OpAccessChain %9 %28 
                                                      OpStore %30 %27 
                                 Private f32* %32 = OpAccessChain %9 %28 
                                          f32 %33 = OpLoad %32 
                                   Input f32* %37 = OpAccessChain vs_TEXCOORD1 %28 
                                          f32 %38 = OpLoad %37 
                                          f32 %39 = OpFNegate %38 
                                          f32 %40 = OpFAdd %33 %39 
                                                      OpStore %31 %40 
                                 Private f32* %44 = OpAccessChain %9 %28 
                                          f32 %45 = OpLoad %44 
                                          f32 %46 = OpFNegate %45 
                                   Input f32* %48 = OpAccessChain vs_TEXCOORD1 %47 
                                          f32 %49 = OpLoad %48 
                                          f32 %50 = OpFAdd %46 %49 
                                 Private f32* %51 = OpAccessChain %43 %28 
                                                      OpStore %51 %50 
                                          f32 %55 = OpLoad %31 
                                         bool %57 = OpFOrdLessThan %55 %56 
                                                      OpStore %54 %57 
                                         bool %58 = OpLoad %54 
                                          i32 %62 = OpSelect %58 %61 %60 
                                          i32 %64 = OpIMul %62 %63 
                                         bool %65 = OpINotEqual %64 %60 
                                                      OpSelectionMerge %67 None 
                                                      OpBranchConditional %65 %66 %67 
                                              %66 = OpLabel 
                                                      OpKill
                                              %67 = OpLabel 
                                 Uniform f32* %74 = OpAccessChain %71 %72 
                                          f32 %75 = OpLoad %74 
                                 Uniform f32* %77 = OpAccessChain %71 %76 
                                          f32 %78 = OpLoad %77 
                                          f32 %79 = OpFMul %75 %78 
                                                      OpStore %31 %79 
                                          f32 %80 = OpLoad %31 
                                   Input f32* %82 = OpAccessChain vs_TEXCOORD1 %81 
                                          f32 %83 = OpLoad %82 
                                          f32 %84 = OpFMul %80 %83 
                                                      OpStore %31 %84 
                                          f32 %86 = OpLoad %31 
                                          f32 %88 = OpExtInst %1 37 %86 %87 
                                                      OpStore %85 %88 
                                          f32 %90 = OpLoad %31 
                                          f32 %92 = OpFMul %90 %91 
                                                      OpStore %89 %92 
                                          f32 %93 = OpLoad %85 
                                          f32 %94 = OpExtInst %1 31 %93 
                                                      OpStore %85 %94 
                                 Private f32* %96 = OpAccessChain %43 %28 
                                          f32 %97 = OpLoad %96 
                                   Input f32* %98 = OpAccessChain vs_TEXCOORD1 %81 
                                          f32 %99 = OpLoad %98 
                                         f32 %100 = OpFMul %97 %99 
                                         f32 %101 = OpLoad %89 
                                         f32 %102 = OpFAdd %100 %101 
                                                      OpStore %95 %102 
                                         f32 %103 = OpLoad %95 
                                         f32 %104 = OpExtInst %1 43 %103 %56 %87 
                                                      OpStore %95 %104 
                                Private f32* %105 = OpAccessChain %43 %28 
                                         f32 %106 = OpLoad %105 
                                  Input f32* %107 = OpAccessChain vs_TEXCOORD1 %81 
                                         f32 %108 = OpLoad %107 
                                         f32 %109 = OpFMul %106 %108 
                                         f32 %110 = OpLoad %89 
                                         f32 %111 = OpFNegate %110 
                                         f32 %112 = OpFAdd %109 %111 
                                                      OpStore %89 %112 
                                         f32 %113 = OpLoad %85 
                                         f32 %114 = OpLoad %95 
                                         f32 %115 = OpFMul %113 %114 
                                                      OpStore %85 %115 
                                Uniform f32* %117 = OpAccessChain %71 %116 
                                         f32 %118 = OpLoad %117 
                                Uniform f32* %120 = OpAccessChain %71 %119 
                                         f32 %121 = OpLoad %120 
                                       f32_2 %122 = OpCompositeConstruct %118 %121 
                              Uniform f32_4* %124 = OpAccessChain %71 %60 
                                       f32_4 %125 = OpLoad %124 
                                       f32_2 %126 = OpVectorShuffle %125 %125 1 1 
                                       f32_2 %127 = OpFMul %122 %126 
                                       f32_4 %129 = OpLoad vs_TEXCOORD5 
                                       f32_2 %130 = OpVectorShuffle %129 %129 2 3 
                                       f32_2 %131 = OpFAdd %127 %130 
                                       f32_3 %132 = OpLoad %43 
                                       f32_3 %133 = OpVectorShuffle %132 %131 3 4 2 
                                                      OpStore %43 %133 
                         read_only Texture2D %135 = OpLoad %134 
                                     sampler %137 = OpLoad %136 
                  read_only Texture2DSampled %138 = OpSampledImage %135 %137 
                                       f32_3 %139 = OpLoad %43 
                                       f32_2 %140 = OpVectorShuffle %139 %139 0 1 
                                       f32_4 %141 = OpImageSampleImplicitLod %138 %140 
                                                      OpStore %9 %141 
                                       f32_4 %143 = OpLoad %9 
                              Uniform f32_4* %145 = OpAccessChain %71 %144 
                                       f32_4 %146 = OpLoad %145 
                                       f32_4 %147 = OpFMul %143 %146 
                                                      OpStore %142 %147 
                                       f32_4 %150 = OpLoad %149 
                                       f32_3 %151 = OpVectorShuffle %150 %150 0 1 2 
                              Uniform f32_4* %153 = OpAccessChain %71 %152 
                                       f32_4 %154 = OpLoad %153 
                                       f32_3 %155 = OpVectorShuffle %154 %154 0 1 2 
                                       f32_3 %156 = OpFMul %151 %155 
                                                      OpStore %148 %156 
                                Uniform f32* %157 = OpAccessChain %71 %61 
                                         f32 %158 = OpLoad %157 
                                Uniform f32* %160 = OpAccessChain %71 %159 
                                         f32 %161 = OpLoad %160 
                                       f32_2 %162 = OpCompositeConstruct %158 %161 
                              Uniform f32_4* %163 = OpAccessChain %71 %60 
                                       f32_4 %164 = OpLoad %163 
                                       f32_2 %165 = OpVectorShuffle %164 %164 1 1 
                                       f32_2 %166 = OpFMul %162 %165 
                                       f32_4 %167 = OpLoad vs_TEXCOORD5 
                                       f32_2 %168 = OpVectorShuffle %167 %167 0 1 
                                       f32_2 %169 = OpFAdd %166 %168 
                                       f32_3 %170 = OpLoad %43 
                                       f32_3 %171 = OpVectorShuffle %170 %169 3 4 2 
                                                      OpStore %43 %171 
                         read_only Texture2D %174 = OpLoad %173 
                                     sampler %176 = OpLoad %175 
                  read_only Texture2DSampled %177 = OpSampledImage %174 %176 
                                       f32_3 %178 = OpLoad %43 
                                       f32_2 %179 = OpVectorShuffle %178 %178 0 1 
                                       f32_4 %180 = OpImageSampleImplicitLod %177 %179 
                                                      OpStore %172 %180 
                                       f32_3 %181 = OpLoad %148 
                                       f32_4 %182 = OpLoad %172 
                                       f32_3 %183 = OpVectorShuffle %182 %182 0 1 2 
                                       f32_3 %184 = OpFMul %181 %183 
                                                      OpStore %43 %184 
                                Private f32* %187 = OpAccessChain %172 %26 
                                         f32 %188 = OpLoad %187 
                                Uniform f32* %189 = OpAccessChain %71 %152 %26 
                                         f32 %190 = OpLoad %189 
                                         f32 %191 = OpFMul %188 %190 
                                Private f32* %192 = OpAccessChain %186 %28 
                                                      OpStore %192 %191 
                                       f32_3 %193 = OpLoad %43 
                                       f32_2 %194 = OpLoad %186 
                                       f32_3 %195 = OpVectorShuffle %194 %194 0 0 0 
                                       f32_3 %196 = OpFMul %193 %195 
                                                      OpStore %148 %196 
                                       f32_4 %198 = OpLoad %142 
                                       f32_3 %199 = OpVectorShuffle %198 %198 0 1 2 
                                       f32_4 %200 = OpLoad %142 
                                       f32_3 %201 = OpVectorShuffle %200 %200 3 3 3 
                                       f32_3 %202 = OpFMul %199 %201 
                                       f32_3 %203 = OpLoad %148 
                                       f32_3 %204 = OpFNegate %203 
                                       f32_3 %205 = OpFAdd %202 %204 
                                       f32_4 %206 = OpLoad %197 
                                       f32_4 %207 = OpVectorShuffle %206 %205 4 5 6 3 
                                                      OpStore %197 %207 
                                Uniform f32* %208 = OpAccessChain %71 %144 %26 
                                         f32 %209 = OpLoad %208 
                                Private f32* %210 = OpAccessChain %9 %26 
                                         f32 %211 = OpLoad %210 
                                         f32 %212 = OpFMul %209 %211 
                                Private f32* %213 = OpAccessChain %186 %28 
                                         f32 %214 = OpLoad %213 
                                         f32 %215 = OpFNegate %214 
                                         f32 %216 = OpFAdd %212 %215 
                                Private f32* %217 = OpAccessChain %197 %26 
                                                      OpStore %217 %216 
                                         f32 %218 = OpLoad %85 
                                       f32_4 %219 = OpCompositeConstruct %218 %218 %218 %218 
                                       f32_4 %220 = OpLoad %197 
                                       f32_4 %221 = OpFMul %219 %220 
                                                      OpStore %197 %221 
                                       f32_3 %223 = OpLoad %43 
                                       f32_2 %224 = OpLoad %186 
                                       f32_3 %225 = OpVectorShuffle %224 %224 0 0 0 
                                       f32_3 %226 = OpFMul %223 %225 
                                       f32_4 %227 = OpLoad %197 
                                       f32_3 %228 = OpVectorShuffle %227 %227 0 1 2 
                                       f32_3 %229 = OpFAdd %226 %228 
                                       f32_4 %230 = OpLoad %222 
                                       f32_4 %231 = OpVectorShuffle %230 %229 4 5 6 3 
                                                      OpStore %222 %231 
                                Uniform f32* %232 = OpAccessChain %71 %152 %26 
                                         f32 %233 = OpLoad %232 
                                Private f32* %234 = OpAccessChain %172 %26 
                                         f32 %235 = OpLoad %234 
                                         f32 %236 = OpFMul %233 %235 
                                Private f32* %237 = OpAccessChain %197 %26 
                                         f32 %238 = OpLoad %237 
                                         f32 %239 = OpFAdd %236 %238 
                                Private f32* %240 = OpAccessChain %222 %26 
                                                      OpStore %240 %239 
                                Uniform f32* %242 = OpAccessChain %71 %241 
                                         f32 %243 = OpLoad %242 
                                Uniform f32* %244 = OpAccessChain %71 %76 
                                         f32 %245 = OpLoad %244 
                                         f32 %246 = OpFMul %243 %245 
                                Private f32* %247 = OpAccessChain %186 %28 
                                                      OpStore %247 %246 
                                Private f32* %249 = OpAccessChain %186 %28 
                                         f32 %250 = OpLoad %249 
                                  Input f32* %251 = OpAccessChain vs_TEXCOORD1 %81 
                                         f32 %252 = OpLoad %251 
                                         f32 %253 = OpFMul %250 %252 
                                                      OpStore %248 %253 
                                Private f32* %254 = OpAccessChain %186 %28 
                                         f32 %255 = OpLoad %254 
                                  Input f32* %256 = OpAccessChain vs_TEXCOORD1 %81 
                                         f32 %257 = OpLoad %256 
                                         f32 %258 = OpFMul %255 %257 
                                         f32 %259 = OpFAdd %258 %87 
                                                      OpStore %85 %259 
                                         f32 %260 = OpLoad %248 
                                         f32 %261 = OpFMul %260 %91 
                                         f32 %262 = OpLoad %89 
                                         f32 %263 = OpFAdd %261 %262 
                                                      OpStore %89 %263 
                                         f32 %264 = OpLoad %89 
                                         f32 %265 = OpLoad %85 
                                         f32 %266 = OpFDiv %264 %265 
                                                      OpStore %85 %266 
                                         f32 %267 = OpLoad %85 
                                         f32 %268 = OpExtInst %1 43 %267 %56 %87 
                                                      OpStore %85 %268 
                                         f32 %269 = OpLoad %85 
                                         f32 %270 = OpFNegate %269 
                                         f32 %271 = OpFAdd %270 %87 
                                                      OpStore %85 %271 
                                       f32_4 %272 = OpLoad %222 
                                         f32 %273 = OpLoad %85 
                                       f32_4 %274 = OpCompositeConstruct %273 %273 %273 %273 
                                       f32_4 %275 = OpFMul %272 %274 
                                                      OpStore %222 %275 
                              Uniform f32_4* %277 = OpAccessChain %71 %276 
                                       f32_4 %278 = OpLoad %277 
                                       f32_2 %279 = OpVectorShuffle %278 %278 0 1 
                                       f32_2 %280 = OpFNegate %279 
                              Uniform f32_4* %281 = OpAccessChain %71 %276 
                                       f32_4 %282 = OpLoad %281 
                                       f32_2 %283 = OpVectorShuffle %282 %282 2 3 
                                       f32_2 %284 = OpFAdd %280 %283 
                                                      OpStore %186 %284 
                                       f32_2 %285 = OpLoad %186 
                                       f32_4 %287 = OpLoad vs_TEXCOORD2 
                                       f32_2 %288 = OpVectorShuffle %287 %287 0 1 
                                       f32_2 %289 = OpExtInst %1 4 %288 
                                       f32_2 %290 = OpFNegate %289 
                                       f32_2 %291 = OpFAdd %285 %290 
                                                      OpStore %186 %291 
                                       f32_2 %292 = OpLoad %186 
                                       f32_4 %293 = OpLoad vs_TEXCOORD2 
                                       f32_2 %294 = OpVectorShuffle %293 %293 2 3 
                                       f32_2 %295 = OpFMul %292 %294 
                                                      OpStore %186 %295 
                                       f32_2 %296 = OpLoad %186 
                                       f32_2 %297 = OpCompositeConstruct %56 %56 
                                       f32_2 %298 = OpCompositeConstruct %87 %87 
                                       f32_2 %299 = OpExtInst %1 43 %296 %297 %298 
                                                      OpStore %186 %299 
                                Private f32* %300 = OpAccessChain %186 %81 
                                         f32 %301 = OpLoad %300 
                                Private f32* %302 = OpAccessChain %186 %28 
                                         f32 %303 = OpLoad %302 
                                         f32 %304 = OpFMul %301 %303 
                                                      OpStore %85 %304 
                                       f32_4 %305 = OpLoad %222 
                                         f32 %306 = OpLoad %85 
                                       f32_4 %307 = OpCompositeConstruct %306 %306 %306 %306 
                                       f32_4 %308 = OpFMul %305 %307 
                                                      OpStore %222 %308 
                                       f32_4 %311 = OpLoad %222 
                                       f32_4 %312 = OpLoad %149 
                                       f32_4 %313 = OpVectorShuffle %312 %312 3 3 3 3 
                                       f32_4 %314 = OpFMul %311 %313 
                                                      OpStore %310 %314 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "vulkan hw_tier02 " {
Keywords { "UNITY_UI_CLIP_RECT" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 517
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %12 %121 %125 %126 %129 %131 %183 %193 %236 %358 %452 %485 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpDecorate %12 Location 12 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpDecorate %19 ArrayStride 19 
                                                      OpDecorate %20 ArrayStride 20 
                                                      OpDecorate %21 ArrayStride 21 
                                                      OpDecorate %22 ArrayStride 22 
                                                      OpMemberDecorate %23 0 Offset 23 
                                                      OpMemberDecorate %23 1 Offset 23 
                                                      OpMemberDecorate %23 2 Offset 23 
                                                      OpMemberDecorate %23 3 Offset 23 
                                                      OpMemberDecorate %23 4 Offset 23 
                                                      OpMemberDecorate %23 5 Offset 23 
                                                      OpMemberDecorate %23 6 Offset 23 
                                                      OpMemberDecorate %23 7 Offset 23 
                                                      OpMemberDecorate %23 8 Offset 23 
                                                      OpMemberDecorate %23 9 Offset 23 
                                                      OpMemberDecorate %23 10 Offset 23 
                                                      OpMemberDecorate %23 11 Offset 23 
                                                      OpMemberDecorate %23 12 Offset 23 
                                                      OpMemberDecorate %23 13 Offset 23 
                                                      OpMemberDecorate %23 14 Offset 23 
                                                      OpMemberDecorate %23 15 Offset 23 
                                                      OpMemberDecorate %23 16 Offset 23 
                                                      OpMemberDecorate %23 17 Offset 23 
                                                      OpMemberDecorate %23 18 Offset 23 
                                                      OpMemberDecorate %23 19 Offset 23 
                                                      OpMemberDecorate %23 20 Offset 23 
                                                      OpMemberDecorate %23 21 Offset 23 
                                                      OpMemberDecorate %23 22 Offset 23 
                                                      OpMemberDecorate %23 23 Offset 23 
                                                      OpMemberDecorate %23 24 Offset 23 
                                                      OpDecorate %23 Block 
                                                      OpDecorate %25 DescriptorSet 25 
                                                      OpDecorate %25 Binding 25 
                                                      OpMemberDecorate %119 0 BuiltIn 119 
                                                      OpMemberDecorate %119 1 BuiltIn 119 
                                                      OpMemberDecorate %119 2 BuiltIn 119 
                                                      OpDecorate %119 Block 
                                                      OpDecorate %125 RelaxedPrecision 
                                                      OpDecorate %125 Location 125 
                                                      OpDecorate %126 RelaxedPrecision 
                                                      OpDecorate %126 Location 126 
                                                      OpDecorate %127 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD0 Location 129 
                                                      OpDecorate %131 Location 131 
                                                      OpDecorate vs_TEXCOORD2 Location 183 
                                                      OpDecorate %193 Location 193 
                                                      OpDecorate %236 Location 236 
                                                      OpDecorate vs_TEXCOORD1 Location 358 
                                                      OpDecorate vs_TEXCOORD3 Location 452 
                                                      OpDecorate vs_TEXCOORD5 Location 485 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 3 
                                               %8 = OpTypePointer Private %7 
                                Private f32_3* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 4 
                                              %11 = OpTypePointer Input %10 
                                 Input f32_4* %12 = OpVariable Input 
                                              %13 = OpTypeVector %6 2 
                                              %16 = OpTypeInt 32 0 
                                          u32 %17 = OpConstant 4 
                                              %18 = OpTypeArray %10 %17 
                                              %19 = OpTypeArray %10 %17 
                                              %20 = OpTypeArray %10 %17 
                                              %21 = OpTypeArray %10 %17 
                                              %22 = OpTypeArray %10 %17 
                                              %23 = OpTypeStruct %7 %10 %18 %19 %20 %21 %6 %6 %6 %22 %6 %6 %6 %6 %6 %10 %6 %6 %6 %6 %6 %6 %6 %10 %10 
                                              %24 = OpTypePointer Uniform %23 
Uniform struct {f32_3; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4[4]; f32; f32; f32; f32_4[4]; f32; f32; f32; f32; f32; f32_4; f32; f32; f32; f32; f32; f32; f32; f32_4; f32_4;}* %25 = OpVariable Uniform 
                                              %26 = OpTypeInt 32 1 
                                          i32 %27 = OpConstant 13 
                                              %28 = OpTypePointer Uniform %6 
                                          i32 %31 = OpConstant 14 
                                              %38 = OpTypePointer Private %10 
                               Private f32_4* %39 = OpVariable Private 
                                          i32 %42 = OpConstant 2 
                                          i32 %43 = OpConstant 1 
                                              %44 = OpTypePointer Uniform %10 
                                          i32 %48 = OpConstant 0 
                               Private f32_4* %63 = OpVariable Private 
                                          i32 %65 = OpConstant 3 
                                              %83 = OpTypePointer Uniform %7 
                               Private f32_4* %89 = OpVariable Private 
                                          i32 %92 = OpConstant 5 
                                         u32 %117 = OpConstant 1 
                                             %118 = OpTypeArray %6 %117 
                                             %119 = OpTypeStruct %10 %6 %118 
                                             %120 = OpTypePointer Output %119 
        Output struct {f32_4; f32; f32[1];}* %121 = OpVariable Output 
                                             %123 = OpTypePointer Output %10 
                               Output f32_4* %125 = OpVariable Output 
                                Input f32_4* %126 = OpVariable Input 
                                             %128 = OpTypePointer Output %13 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                             %130 = OpTypePointer Input %13 
                                Input f32_2* %131 = OpVariable Input 
                                             %133 = OpTypePointer Private %13 
                              Private f32_2* %134 = OpVariable Private 
                                         i32 %138 = OpConstant 4 
                                         i32 %154 = OpConstant 19 
                                         i32 %157 = OpConstant 20 
                                             %166 = OpTypePointer Private %6 
                                Private f32* %167 = OpVariable Private 
                                         i32 %171 = OpConstant 16 
                                         i32 %174 = OpConstant 17 
                                         f32 %178 = OpConstant 3.674022E-40 
                                       f32_2 %179 = OpConstantComposite %178 %178 
                       Output f32_4* vs_TEXCOORD2 = OpVariable Output 
                                         u32 %190 = OpConstant 0 
                                Private f32* %192 = OpVariable Private 
                                Input f32_2* %193 = OpVariable Input 
                                             %194 = OpTypePointer Input %6 
                                         i32 %198 = OpConstant 18 
                                         i32 %202 = OpConstant 22 
                                         f32 %205 = OpConstant 3.674022E-40 
                                         i32 %214 = OpConstant 21 
                                             %235 = OpTypePointer Input %7 
                                Input f32_3* %236 = OpVariable Input 
                                         u32 %254 = OpConstant 2 
                              Private f32_3* %263 = OpVariable Private 
                                             %296 = OpTypeBool 
                                             %297 = OpTypePointer Private %296 
                               Private bool* %298 = OpVariable Private 
                                         u32 %299 = OpConstant 3 
                                         f32 %302 = OpConstant 3.674022E-40 
                                             %305 = OpTypePointer Function %6 
                               Private bool* %315 = OpVariable Private 
                                         i32 %322 = OpConstant 10 
                                         i32 %326 = OpConstant 11 
                                         i32 %341 = OpConstant 6 
                                         i32 %348 = OpConstant 12 
                                         f32 %355 = OpConstant 3.674022E-40 
                       Output f32_4* vs_TEXCOORD1 = OpVariable Output 
                                         i32 %366 = OpConstant 8 
                                         i32 %374 = OpConstant 7 
                                             %394 = OpTypePointer Output %6 
                                         i32 %407 = OpConstant 15 
                                         f32 %410 = OpConstant 3.674022E-40 
                                       f32_4 %411 = OpConstantComposite %410 %410 %410 %410 
                                         f32 %414 = OpConstant 3.674022E-40 
                                       f32_4 %415 = OpConstantComposite %414 %414 %414 %414 
                                         f32 %419 = OpConstant 3.674022E-40 
                                       f32_2 %420 = OpConstantComposite %419 %419 
                                         i32 %438 = OpConstant 9 
                                             %451 = OpTypePointer Output %7 
                       Output f32_3* vs_TEXCOORD3 = OpVariable Output 
                                         f32 %463 = OpConstant 3.674022E-40 
                                         f32 %473 = OpConstant 3.674022E-40 
                                         f32 %480 = OpConstant 3.674022E-40 
                                       f32_2 %481 = OpConstantComposite %480 %480 
                       Output f32_4* vs_TEXCOORD5 = OpVariable Output 
                                         i32 %488 = OpConstant 23 
                                         i32 %501 = OpConstant 24 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                               Function f32* %306 = OpVariable Function 
                                        f32_4 %14 = OpLoad %12 
                                        f32_2 %15 = OpVectorShuffle %14 %14 0 1 
                                 Uniform f32* %29 = OpAccessChain %25 %27 
                                          f32 %30 = OpLoad %29 
                                 Uniform f32* %32 = OpAccessChain %25 %31 
                                          f32 %33 = OpLoad %32 
                                        f32_2 %34 = OpCompositeConstruct %30 %33 
                                        f32_2 %35 = OpFAdd %15 %34 
                                        f32_3 %36 = OpLoad %9 
                                        f32_3 %37 = OpVectorShuffle %36 %35 3 4 2 
                                                      OpStore %9 %37 
                                        f32_3 %40 = OpLoad %9 
                                        f32_4 %41 = OpVectorShuffle %40 %40 1 1 1 1 
                               Uniform f32_4* %45 = OpAccessChain %25 %42 %43 
                                        f32_4 %46 = OpLoad %45 
                                        f32_4 %47 = OpFMul %41 %46 
                                                      OpStore %39 %47 
                               Uniform f32_4* %49 = OpAccessChain %25 %42 %48 
                                        f32_4 %50 = OpLoad %49 
                                        f32_3 %51 = OpLoad %9 
                                        f32_4 %52 = OpVectorShuffle %51 %51 0 0 0 0 
                                        f32_4 %53 = OpFMul %50 %52 
                                        f32_4 %54 = OpLoad %39 
                                        f32_4 %55 = OpFAdd %53 %54 
                                                      OpStore %39 %55 
                               Uniform f32_4* %56 = OpAccessChain %25 %42 %42 
                                        f32_4 %57 = OpLoad %56 
                                        f32_4 %58 = OpLoad %12 
                                        f32_4 %59 = OpVectorShuffle %58 %58 2 2 2 2 
                                        f32_4 %60 = OpFMul %57 %59 
                                        f32_4 %61 = OpLoad %39 
                                        f32_4 %62 = OpFAdd %60 %61 
                                                      OpStore %39 %62 
                                        f32_4 %64 = OpLoad %39 
                               Uniform f32_4* %66 = OpAccessChain %25 %42 %65 
                                        f32_4 %67 = OpLoad %66 
                                        f32_4 %68 = OpFAdd %64 %67 
                                                      OpStore %63 %68 
                               Uniform f32_4* %69 = OpAccessChain %25 %42 %65 
                                        f32_4 %70 = OpLoad %69 
                                        f32_3 %71 = OpVectorShuffle %70 %70 0 1 2 
                                        f32_4 %72 = OpLoad %12 
                                        f32_3 %73 = OpVectorShuffle %72 %72 3 3 3 
                                        f32_3 %74 = OpFMul %71 %73 
                                        f32_4 %75 = OpLoad %39 
                                        f32_3 %76 = OpVectorShuffle %75 %75 0 1 2 
                                        f32_3 %77 = OpFAdd %74 %76 
                                        f32_4 %78 = OpLoad %39 
                                        f32_4 %79 = OpVectorShuffle %78 %77 4 5 6 3 
                                                      OpStore %39 %79 
                                        f32_4 %80 = OpLoad %39 
                                        f32_3 %81 = OpVectorShuffle %80 %80 0 1 2 
                                        f32_3 %82 = OpFNegate %81 
                               Uniform f32_3* %84 = OpAccessChain %25 %48 
                                        f32_3 %85 = OpLoad %84 
                                        f32_3 %86 = OpFAdd %82 %85 
                                        f32_4 %87 = OpLoad %39 
                                        f32_4 %88 = OpVectorShuffle %87 %86 4 5 6 3 
                                                      OpStore %39 %88 
                                        f32_4 %90 = OpLoad %63 
                                        f32_4 %91 = OpVectorShuffle %90 %90 1 1 1 1 
                               Uniform f32_4* %93 = OpAccessChain %25 %92 %43 
                                        f32_4 %94 = OpLoad %93 
                                        f32_4 %95 = OpFMul %91 %94 
                                                      OpStore %89 %95 
                               Uniform f32_4* %96 = OpAccessChain %25 %92 %48 
                                        f32_4 %97 = OpLoad %96 
                                        f32_4 %98 = OpLoad %63 
                                        f32_4 %99 = OpVectorShuffle %98 %98 0 0 0 0 
                                       f32_4 %100 = OpFMul %97 %99 
                                       f32_4 %101 = OpLoad %89 
                                       f32_4 %102 = OpFAdd %100 %101 
                                                      OpStore %89 %102 
                              Uniform f32_4* %103 = OpAccessChain %25 %92 %42 
                                       f32_4 %104 = OpLoad %103 
                                       f32_4 %105 = OpLoad %63 
                                       f32_4 %106 = OpVectorShuffle %105 %105 2 2 2 2 
                                       f32_4 %107 = OpFMul %104 %106 
                                       f32_4 %108 = OpLoad %89 
                                       f32_4 %109 = OpFAdd %107 %108 
                                                      OpStore %89 %109 
                              Uniform f32_4* %110 = OpAccessChain %25 %92 %65 
                                       f32_4 %111 = OpLoad %110 
                                       f32_4 %112 = OpLoad %63 
                                       f32_4 %113 = OpVectorShuffle %112 %112 3 3 3 3 
                                       f32_4 %114 = OpFMul %111 %113 
                                       f32_4 %115 = OpLoad %89 
                                       f32_4 %116 = OpFAdd %114 %115 
                                                      OpStore %63 %116 
                                       f32_4 %122 = OpLoad %63 
                               Output f32_4* %124 = OpAccessChain %121 %48 
                                                      OpStore %124 %122 
                                       f32_4 %127 = OpLoad %126 
                                                      OpStore %125 %127 
                                       f32_2 %132 = OpLoad %131 
                                                      OpStore vs_TEXCOORD0 %132 
                              Uniform f32_4* %135 = OpAccessChain %25 %43 
                                       f32_4 %136 = OpLoad %135 
                                       f32_2 %137 = OpVectorShuffle %136 %136 1 1 
                              Uniform f32_4* %139 = OpAccessChain %25 %138 %43 
                                       f32_4 %140 = OpLoad %139 
                                       f32_2 %141 = OpVectorShuffle %140 %140 0 1 
                                       f32_2 %142 = OpFMul %137 %141 
                                                      OpStore %134 %142 
                              Uniform f32_4* %143 = OpAccessChain %25 %138 %48 
                                       f32_4 %144 = OpLoad %143 
                                       f32_2 %145 = OpVectorShuffle %144 %144 0 1 
                              Uniform f32_4* %146 = OpAccessChain %25 %43 
                                       f32_4 %147 = OpLoad %146 
                                       f32_2 %148 = OpVectorShuffle %147 %147 0 0 
                                       f32_2 %149 = OpFMul %145 %148 
                                       f32_2 %150 = OpLoad %134 
                                       f32_2 %151 = OpFAdd %149 %150 
                                                      OpStore %134 %151 
                                       f32_2 %152 = OpLoad %134 
                                       f32_2 %153 = OpExtInst %1 4 %152 
                                Uniform f32* %155 = OpAccessChain %25 %154 
                                         f32 %156 = OpLoad %155 
                                Uniform f32* %158 = OpAccessChain %25 %157 
                                         f32 %159 = OpLoad %158 
                                       f32_2 %160 = OpCompositeConstruct %156 %159 
                                       f32_2 %161 = OpFMul %153 %160 
                                                      OpStore %134 %161 
                                       f32_4 %162 = OpLoad %63 
                                       f32_2 %163 = OpVectorShuffle %162 %162 3 3 
                                       f32_2 %164 = OpLoad %134 
                                       f32_2 %165 = OpFDiv %163 %164 
                                                      OpStore %134 %165 
                                       f32_2 %168 = OpLoad %134 
                                       f32_2 %169 = OpLoad %134 
                                         f32 %170 = OpDot %168 %169 
                                                      OpStore %167 %170 
                                Uniform f32* %172 = OpAccessChain %25 %171 
                                         f32 %173 = OpLoad %172 
                                Uniform f32* %175 = OpAccessChain %25 %174 
                                         f32 %176 = OpLoad %175 
                                       f32_2 %177 = OpCompositeConstruct %173 %176 
                                       f32_2 %180 = OpFMul %177 %179 
                                       f32_2 %181 = OpLoad %134 
                                       f32_2 %182 = OpFAdd %180 %181 
                                                      OpStore %134 %182 
                                       f32_2 %184 = OpLoad %134 
                                       f32_2 %185 = OpFDiv %179 %184 
                                       f32_4 %186 = OpLoad vs_TEXCOORD2 
                                       f32_4 %187 = OpVectorShuffle %186 %185 0 1 4 5 
                                                      OpStore vs_TEXCOORD2 %187 
                                         f32 %188 = OpLoad %167 
                                         f32 %189 = OpExtInst %1 32 %188 
                                Private f32* %191 = OpAccessChain %134 %190 
                                                      OpStore %191 %189 
                                  Input f32* %195 = OpAccessChain %193 %117 
                                         f32 %196 = OpLoad %195 
                                         f32 %197 = OpExtInst %1 4 %196 
                                Uniform f32* %199 = OpAccessChain %25 %198 
                                         f32 %200 = OpLoad %199 
                                         f32 %201 = OpFMul %197 %200 
                                                      OpStore %192 %201 
                                Uniform f32* %203 = OpAccessChain %25 %202 
                                         f32 %204 = OpLoad %203 
                                         f32 %206 = OpFAdd %204 %205 
                                                      OpStore %167 %206 
                                         f32 %207 = OpLoad %192 
                                         f32 %208 = OpLoad %167 
                                         f32 %209 = OpFMul %207 %208 
                                                      OpStore %192 %209 
                                         f32 %210 = OpLoad %192 
                                Private f32* %211 = OpAccessChain %134 %190 
                                         f32 %212 = OpLoad %211 
                                         f32 %213 = OpFMul %210 %212 
                                                      OpStore %167 %213 
                                Uniform f32* %215 = OpAccessChain %25 %214 
                                         f32 %216 = OpLoad %215 
                                         f32 %217 = OpFNegate %216 
                                         f32 %218 = OpFAdd %217 %205 
                                Private f32* %219 = OpAccessChain %63 %190 
                                                      OpStore %219 %218 
                                         f32 %220 = OpLoad %167 
                                         f32 %221 = OpExtInst %1 4 %220 
                                Private f32* %222 = OpAccessChain %63 %190 
                                         f32 %223 = OpLoad %222 
                                         f32 %224 = OpFMul %221 %223 
                                Private f32* %225 = OpAccessChain %63 %190 
                                                      OpStore %225 %224 
                                Private f32* %226 = OpAccessChain %134 %190 
                                         f32 %227 = OpLoad %226 
                                         f32 %228 = OpLoad %192 
                                         f32 %229 = OpFMul %227 %228 
                                Private f32* %230 = OpAccessChain %63 %190 
                                         f32 %231 = OpLoad %230 
                                         f32 %232 = OpFNegate %231 
                                         f32 %233 = OpFAdd %229 %232 
                                Private f32* %234 = OpAccessChain %134 %190 
                                                      OpStore %234 %233 
                                       f32_3 %237 = OpLoad %236 
                              Uniform f32_4* %238 = OpAccessChain %25 %65 %48 
                                       f32_4 %239 = OpLoad %238 
                                       f32_3 %240 = OpVectorShuffle %239 %239 0 1 2 
                                         f32 %241 = OpDot %237 %240 
                                Private f32* %242 = OpAccessChain %89 %190 
                                                      OpStore %242 %241 
                                       f32_3 %243 = OpLoad %236 
                              Uniform f32_4* %244 = OpAccessChain %25 %65 %43 
                                       f32_4 %245 = OpLoad %244 
                                       f32_3 %246 = OpVectorShuffle %245 %245 0 1 2 
                                         f32 %247 = OpDot %243 %246 
                                Private f32* %248 = OpAccessChain %89 %117 
                                                      OpStore %248 %247 
                                       f32_3 %249 = OpLoad %236 
                              Uniform f32_4* %250 = OpAccessChain %25 %65 %42 
                                       f32_4 %251 = OpLoad %250 
                                       f32_3 %252 = OpVectorShuffle %251 %251 0 1 2 
                                         f32 %253 = OpDot %249 %252 
                                Private f32* %255 = OpAccessChain %89 %254 
                                                      OpStore %255 %253 
                                       f32_4 %256 = OpLoad %89 
                                       f32_3 %257 = OpVectorShuffle %256 %256 0 1 2 
                                       f32_4 %258 = OpLoad %89 
                                       f32_3 %259 = OpVectorShuffle %258 %258 0 1 2 
                                         f32 %260 = OpDot %257 %259 
                                                      OpStore %192 %260 
                                         f32 %261 = OpLoad %192 
                                         f32 %262 = OpExtInst %1 32 %261 
                                                      OpStore %192 %262 
                                         f32 %264 = OpLoad %192 
                                       f32_3 %265 = OpCompositeConstruct %264 %264 %264 
                                       f32_4 %266 = OpLoad %89 
                                       f32_3 %267 = OpVectorShuffle %266 %266 0 1 2 
                                       f32_3 %268 = OpFMul %265 %267 
                                                      OpStore %263 %268 
                                       f32_4 %269 = OpLoad %39 
                                       f32_3 %270 = OpVectorShuffle %269 %269 0 1 2 
                                       f32_4 %271 = OpLoad %39 
                                       f32_3 %272 = OpVectorShuffle %271 %271 0 1 2 
                                         f32 %273 = OpDot %270 %272 
                                                      OpStore %192 %273 
                                         f32 %274 = OpLoad %192 
                                         f32 %275 = OpExtInst %1 32 %274 
                                                      OpStore %192 %275 
                                         f32 %276 = OpLoad %192 
                                       f32_3 %277 = OpCompositeConstruct %276 %276 %276 
                                       f32_4 %278 = OpLoad %39 
                                       f32_3 %279 = OpVectorShuffle %278 %278 0 1 2 
                                       f32_3 %280 = OpFMul %277 %279 
                                       f32_4 %281 = OpLoad %89 
                                       f32_4 %282 = OpVectorShuffle %281 %280 4 5 6 3 
                                                      OpStore %89 %282 
                                       f32_3 %283 = OpLoad %263 
                                       f32_4 %284 = OpLoad %89 
                                       f32_3 %285 = OpVectorShuffle %284 %284 0 1 2 
                                         f32 %286 = OpDot %283 %285 
                                                      OpStore %192 %286 
                                         f32 %287 = OpLoad %192 
                                         f32 %288 = OpExtInst %1 4 %287 
                                Private f32* %289 = OpAccessChain %134 %190 
                                         f32 %290 = OpLoad %289 
                                         f32 %291 = OpFMul %288 %290 
                                Private f32* %292 = OpAccessChain %63 %190 
                                         f32 %293 = OpLoad %292 
                                         f32 %294 = OpFAdd %291 %293 
                                Private f32* %295 = OpAccessChain %134 %190 
                                                      OpStore %295 %294 
                                Uniform f32* %300 = OpAccessChain %25 %138 %65 %299 
                                         f32 %301 = OpLoad %300 
                                        bool %303 = OpFOrdEqual %301 %302 
                                                      OpStore %298 %303 
                                        bool %304 = OpLoad %298 
                                                      OpSelectionMerge %308 None 
                                                      OpBranchConditional %304 %307 %311 
                                             %307 = OpLabel 
                                Private f32* %309 = OpAccessChain %134 %190 
                                         f32 %310 = OpLoad %309 
                                                      OpStore %306 %310 
                                                      OpBranch %308 
                                             %311 = OpLabel 
                                         f32 %312 = OpLoad %167 
                                                      OpStore %306 %312 
                                                      OpBranch %308 
                                             %308 = OpLabel 
                                         f32 %313 = OpLoad %306 
                                Private f32* %314 = OpAccessChain %263 %190 
                                                      OpStore %314 %313 
                                  Input f32* %316 = OpAccessChain %193 %117 
                                         f32 %317 = OpLoad %316 
                                        bool %318 = OpFOrdGreaterThanEqual %302 %317 
                                                      OpStore %315 %318 
                                        bool %319 = OpLoad %315 
                                         f32 %320 = OpSelect %319 %205 %302 
                                Private f32* %321 = OpAccessChain %134 %190 
                                                      OpStore %321 %320 
                                Uniform f32* %323 = OpAccessChain %25 %322 
                                         f32 %324 = OpLoad %323 
                                         f32 %325 = OpFNegate %324 
                                Uniform f32* %327 = OpAccessChain %25 %326 
                                         f32 %328 = OpLoad %327 
                                         f32 %329 = OpFAdd %325 %328 
                                                      OpStore %192 %329 
                                Private f32* %330 = OpAccessChain %134 %190 
                                         f32 %331 = OpLoad %330 
                                         f32 %332 = OpLoad %192 
                                         f32 %333 = OpFMul %331 %332 
                                Uniform f32* %334 = OpAccessChain %25 %322 
                                         f32 %335 = OpLoad %334 
                                         f32 %336 = OpFAdd %333 %335 
                                Private f32* %337 = OpAccessChain %134 %190 
                                                      OpStore %337 %336 
                                Private f32* %338 = OpAccessChain %134 %190 
                                         f32 %339 = OpLoad %338 
                                         f32 %340 = OpFMul %339 %178 
                                Uniform f32* %342 = OpAccessChain %25 %341 
                                         f32 %343 = OpLoad %342 
                                         f32 %344 = OpFAdd %340 %343 
                                Private f32* %345 = OpAccessChain %134 %190 
                                                      OpStore %345 %344 
                                Private f32* %346 = OpAccessChain %134 %190 
                                         f32 %347 = OpLoad %346 
                                Uniform f32* %349 = OpAccessChain %25 %348 
                                         f32 %350 = OpLoad %349 
                                         f32 %351 = OpFMul %347 %350 
                                Private f32* %352 = OpAccessChain %134 %190 
                                                      OpStore %352 %351 
                                Private f32* %353 = OpAccessChain %134 %190 
                                         f32 %354 = OpLoad %353 
                                         f32 %356 = OpFMul %354 %355 
                                Private f32* %357 = OpAccessChain %263 %254 
                                                      OpStore %357 %356 
                                       f32_3 %359 = OpLoad %263 
                                       f32_2 %360 = OpVectorShuffle %359 %359 0 2 
                                       f32_4 %361 = OpLoad vs_TEXCOORD1 
                                       f32_4 %362 = OpVectorShuffle %361 %360 0 4 2 5 
                                                      OpStore vs_TEXCOORD1 %362 
                                Private f32* %363 = OpAccessChain %263 %190 
                                         f32 %364 = OpLoad %363 
                                         f32 %365 = OpFDiv %355 %364 
                                                      OpStore %192 %365 
                                Uniform f32* %367 = OpAccessChain %25 %366 
                                         f32 %368 = OpLoad %367 
                                         f32 %369 = OpFNegate %368 
                                Uniform f32* %370 = OpAccessChain %25 %348 
                                         f32 %371 = OpLoad %370 
                                         f32 %372 = OpFMul %369 %371 
                                         f32 %373 = OpFAdd %372 %205 
                                                      OpStore %167 %373 
                                Uniform f32* %375 = OpAccessChain %25 %374 
                                         f32 %376 = OpLoad %375 
                                         f32 %377 = OpFNegate %376 
                                Uniform f32* %378 = OpAccessChain %25 %348 
                                         f32 %379 = OpLoad %378 
                                         f32 %380 = OpFMul %377 %379 
                                         f32 %381 = OpLoad %167 
                                         f32 %382 = OpFAdd %380 %381 
                                                      OpStore %167 %382 
                                         f32 %383 = OpLoad %167 
                                         f32 %384 = OpFMul %383 %355 
                                         f32 %385 = OpLoad %192 
                                         f32 %386 = OpFNegate %385 
                                         f32 %387 = OpFAdd %384 %386 
                                                      OpStore %167 %387 
                                Private f32* %388 = OpAccessChain %134 %190 
                                         f32 %389 = OpLoad %388 
                                         f32 %390 = OpFNegate %389 
                                         f32 %391 = OpFMul %390 %355 
                                         f32 %392 = OpLoad %167 
                                         f32 %393 = OpFAdd %391 %392 
                                 Output f32* %395 = OpAccessChain vs_TEXCOORD1 %190 
                                                      OpStore %395 %393 
                                Private f32* %396 = OpAccessChain %134 %190 
                                         f32 %397 = OpLoad %396 
                                         f32 %398 = OpFNegate %397 
                                         f32 %399 = OpFMul %398 %355 
                                         f32 %400 = OpFAdd %399 %355 
                                Private f32* %401 = OpAccessChain %134 %190 
                                                      OpStore %401 %400 
                                         f32 %402 = OpLoad %192 
                                Private f32* %403 = OpAccessChain %134 %190 
                                         f32 %404 = OpLoad %403 
                                         f32 %405 = OpFAdd %402 %404 
                                 Output f32* %406 = OpAccessChain vs_TEXCOORD1 %254 
                                                      OpStore %406 %405 
                              Uniform f32_4* %408 = OpAccessChain %25 %407 
                                       f32_4 %409 = OpLoad %408 
                                       f32_4 %412 = OpExtInst %1 40 %409 %411 
                                                      OpStore %63 %412 
                                       f32_4 %413 = OpLoad %63 
                                       f32_4 %416 = OpExtInst %1 37 %413 %415 
                                                      OpStore %63 %416 
                                       f32_3 %417 = OpLoad %9 
                                       f32_2 %418 = OpVectorShuffle %417 %417 0 1 
                                       f32_2 %421 = OpFMul %418 %420 
                                       f32_4 %422 = OpLoad %63 
                                       f32_2 %423 = OpVectorShuffle %422 %422 0 1 
                                       f32_2 %424 = OpFNegate %423 
                                       f32_2 %425 = OpFAdd %421 %424 
                                       f32_3 %426 = OpLoad %9 
                                       f32_3 %427 = OpVectorShuffle %426 %425 3 4 2 
                                                      OpStore %9 %427 
                                       f32_4 %428 = OpLoad %63 
                                       f32_2 %429 = OpVectorShuffle %428 %428 2 3 
                                       f32_2 %430 = OpFNegate %429 
                                       f32_3 %431 = OpLoad %9 
                                       f32_2 %432 = OpVectorShuffle %431 %431 0 1 
                                       f32_2 %433 = OpFAdd %430 %432 
                                       f32_4 %434 = OpLoad vs_TEXCOORD2 
                                       f32_4 %435 = OpVectorShuffle %434 %433 4 5 2 3 
                                                      OpStore vs_TEXCOORD2 %435 
                                       f32_4 %436 = OpLoad %39 
                                       f32_3 %437 = OpVectorShuffle %436 %436 1 1 1 
                              Uniform f32_4* %439 = OpAccessChain %25 %438 %43 
                                       f32_4 %440 = OpLoad %439 
                                       f32_3 %441 = OpVectorShuffle %440 %440 0 1 2 
                                       f32_3 %442 = OpFMul %437 %441 
                                                      OpStore %9 %442 
                              Uniform f32_4* %443 = OpAccessChain %25 %438 %48 
                                       f32_4 %444 = OpLoad %443 
                                       f32_3 %445 = OpVectorShuffle %444 %444 0 1 2 
                                       f32_4 %446 = OpLoad %39 
                                       f32_3 %447 = OpVectorShuffle %446 %446 0 0 0 
                                       f32_3 %448 = OpFMul %445 %447 
                                       f32_3 %449 = OpLoad %9 
                                       f32_3 %450 = OpFAdd %448 %449 
                                                      OpStore %9 %450 
                              Uniform f32_4* %453 = OpAccessChain %25 %438 %42 
                                       f32_4 %454 = OpLoad %453 
                                       f32_3 %455 = OpVectorShuffle %454 %454 0 1 2 
                                       f32_4 %456 = OpLoad %39 
                                       f32_3 %457 = OpVectorShuffle %456 %456 2 2 2 
                                       f32_3 %458 = OpFMul %455 %457 
                                       f32_3 %459 = OpLoad %9 
                                       f32_3 %460 = OpFAdd %458 %459 
                                                      OpStore vs_TEXCOORD3 %460 
                                  Input f32* %461 = OpAccessChain %193 %190 
                                         f32 %462 = OpLoad %461 
                                         f32 %464 = OpFMul %462 %463 
                                Private f32* %465 = OpAccessChain %9 %190 
                                                      OpStore %465 %464 
                                Private f32* %466 = OpAccessChain %9 %190 
                                         f32 %467 = OpLoad %466 
                                         f32 %468 = OpExtInst %1 8 %467 
                                Private f32* %469 = OpAccessChain %134 %190 
                                                      OpStore %469 %468 
                                Private f32* %470 = OpAccessChain %134 %190 
                                         f32 %471 = OpLoad %470 
                                         f32 %472 = OpFNegate %471 
                                         f32 %474 = OpFMul %472 %473 
                                  Input f32* %475 = OpAccessChain %193 %190 
                                         f32 %476 = OpLoad %475 
                                         f32 %477 = OpFAdd %474 %476 
                                Private f32* %478 = OpAccessChain %134 %117 
                                                      OpStore %478 %477 
                                       f32_2 %479 = OpLoad %134 
                                       f32_2 %482 = OpFMul %479 %481 
                                       f32_3 %483 = OpLoad %9 
                                       f32_3 %484 = OpVectorShuffle %483 %482 3 4 2 
                                                      OpStore %9 %484 
                                       f32_3 %486 = OpLoad %9 
                                       f32_2 %487 = OpVectorShuffle %486 %486 0 1 
                              Uniform f32_4* %489 = OpAccessChain %25 %488 
                                       f32_4 %490 = OpLoad %489 
                                       f32_2 %491 = OpVectorShuffle %490 %490 0 1 
                                       f32_2 %492 = OpFMul %487 %491 
                              Uniform f32_4* %493 = OpAccessChain %25 %488 
                                       f32_4 %494 = OpLoad %493 
                                       f32_2 %495 = OpVectorShuffle %494 %494 2 3 
                                       f32_2 %496 = OpFAdd %492 %495 
                                       f32_4 %497 = OpLoad vs_TEXCOORD5 
                                       f32_4 %498 = OpVectorShuffle %497 %496 4 5 2 3 
                                                      OpStore vs_TEXCOORD5 %498 
                                       f32_3 %499 = OpLoad %9 
                                       f32_2 %500 = OpVectorShuffle %499 %499 0 1 
                              Uniform f32_4* %502 = OpAccessChain %25 %501 
                                       f32_4 %503 = OpLoad %502 
                                       f32_2 %504 = OpVectorShuffle %503 %503 0 1 
                                       f32_2 %505 = OpFMul %500 %504 
                              Uniform f32_4* %506 = OpAccessChain %25 %501 
                                       f32_4 %507 = OpLoad %506 
                                       f32_2 %508 = OpVectorShuffle %507 %507 2 3 
                                       f32_2 %509 = OpFAdd %505 %508 
                                       f32_4 %510 = OpLoad vs_TEXCOORD5 
                                       f32_4 %511 = OpVectorShuffle %510 %509 0 1 4 5 
                                                      OpStore vs_TEXCOORD5 %511 
                                 Output f32* %512 = OpAccessChain %121 %48 %117 
                                         f32 %513 = OpLoad %512 
                                         f32 %514 = OpFNegate %513 
                                 Output f32* %515 = OpAccessChain %121 %48 %117 
                                                      OpStore %515 %514 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 316
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %22 %35 %128 %149 %286 %310 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpDecorate %9 RelaxedPrecision 
                                                      OpDecorate %12 RelaxedPrecision 
                                                      OpDecorate %12 DescriptorSet 12 
                                                      OpDecorate %12 Binding 12 
                                                      OpDecorate %13 RelaxedPrecision 
                                                      OpDecorate %16 RelaxedPrecision 
                                                      OpDecorate %16 DescriptorSet 16 
                                                      OpDecorate %16 Binding 16 
                                                      OpDecorate %17 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD0 Location 22 
                                                      OpDecorate %27 RelaxedPrecision 
                                                      OpDecorate %33 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD1 Location 35 
                                                      OpDecorate %45 RelaxedPrecision 
                                                      OpDecorate %46 RelaxedPrecision 
                                                      OpMemberDecorate %69 0 Offset 69 
                                                      OpMemberDecorate %69 1 Offset 69 
                                                      OpMemberDecorate %69 2 Offset 69 
                                                      OpMemberDecorate %69 3 RelaxedPrecision 
                                                      OpMemberDecorate %69 3 Offset 69 
                                                      OpMemberDecorate %69 4 Offset 69 
                                                      OpMemberDecorate %69 5 Offset 69 
                                                      OpMemberDecorate %69 6 Offset 69 
                                                      OpMemberDecorate %69 7 RelaxedPrecision 
                                                      OpMemberDecorate %69 7 Offset 69 
                                                      OpMemberDecorate %69 8 Offset 69 
                                                      OpMemberDecorate %69 9 Offset 69 
                                                      OpMemberDecorate %69 10 Offset 69 
                                                      OpDecorate %69 Block 
                                                      OpDecorate %71 DescriptorSet 71 
                                                      OpDecorate %71 Binding 71 
                                                      OpDecorate %85 RelaxedPrecision 
                                                      OpDecorate %89 RelaxedPrecision 
                                                      OpDecorate %93 RelaxedPrecision 
                                                      OpDecorate %94 RelaxedPrecision 
                                                      OpDecorate %95 RelaxedPrecision 
                                                      OpDecorate %101 RelaxedPrecision 
                                                      OpDecorate %103 RelaxedPrecision 
                                                      OpDecorate %104 RelaxedPrecision 
                                                      OpDecorate %110 RelaxedPrecision 
                                                      OpDecorate %111 RelaxedPrecision 
                                                      OpDecorate %113 RelaxedPrecision 
                                                      OpDecorate %114 RelaxedPrecision 
                                                      OpDecorate %115 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD5 Location 128 
                                                      OpDecorate %134 RelaxedPrecision 
                                                      OpDecorate %134 DescriptorSet 134 
                                                      OpDecorate %134 Binding 134 
                                                      OpDecorate %135 RelaxedPrecision 
                                                      OpDecorate %136 RelaxedPrecision 
                                                      OpDecorate %136 DescriptorSet 136 
                                                      OpDecorate %136 Binding 136 
                                                      OpDecorate %137 RelaxedPrecision 
                                                      OpDecorate %143 RelaxedPrecision 
                                                      OpDecorate %146 RelaxedPrecision 
                                                      OpDecorate %147 RelaxedPrecision 
                                                      OpDecorate %148 RelaxedPrecision 
                                                      OpDecorate %149 RelaxedPrecision 
                                                      OpDecorate %149 Location 149 
                                                      OpDecorate %150 RelaxedPrecision 
                                                      OpDecorate %151 RelaxedPrecision 
                                                      OpDecorate %154 RelaxedPrecision 
                                                      OpDecorate %155 RelaxedPrecision 
                                                      OpDecorate %156 RelaxedPrecision 
                                                      OpDecorate %172 RelaxedPrecision 
                                                      OpDecorate %173 RelaxedPrecision 
                                                      OpDecorate %173 DescriptorSet 173 
                                                      OpDecorate %173 Binding 173 
                                                      OpDecorate %174 RelaxedPrecision 
                                                      OpDecorate %175 RelaxedPrecision 
                                                      OpDecorate %175 DescriptorSet 175 
                                                      OpDecorate %175 Binding 175 
                                                      OpDecorate %176 RelaxedPrecision 
                                                      OpDecorate %181 RelaxedPrecision 
                                                      OpDecorate %182 RelaxedPrecision 
                                                      OpDecorate %183 RelaxedPrecision 
                                                      OpDecorate %184 RelaxedPrecision 
                                                      OpDecorate %188 RelaxedPrecision 
                                                      OpDecorate %190 RelaxedPrecision 
                                                      OpDecorate %191 RelaxedPrecision 
                                                      OpDecorate %197 RelaxedPrecision 
                                                      OpDecorate %203 RelaxedPrecision 
                                                      OpDecorate %204 RelaxedPrecision 
                                                      OpDecorate %209 RelaxedPrecision 
                                                      OpDecorate %211 RelaxedPrecision 
                                                      OpDecorate %212 RelaxedPrecision 
                                                      OpDecorate %218 RelaxedPrecision 
                                                      OpDecorate %219 RelaxedPrecision 
                                                      OpDecorate %220 RelaxedPrecision 
                                                      OpDecorate %221 RelaxedPrecision 
                                                      OpDecorate %222 RelaxedPrecision 
                                                      OpDecorate %227 RelaxedPrecision 
                                                      OpDecorate %228 RelaxedPrecision 
                                                      OpDecorate %233 RelaxedPrecision 
                                                      OpDecorate %235 RelaxedPrecision 
                                                      OpDecorate %236 RelaxedPrecision 
                                                      OpDecorate %238 RelaxedPrecision 
                                                      OpDecorate %239 RelaxedPrecision 
                                                      OpDecorate %262 RelaxedPrecision 
                                                      OpDecorate %264 RelaxedPrecision 
                                                      OpDecorate %265 RelaxedPrecision 
                                                      OpDecorate %266 RelaxedPrecision 
                                                      OpDecorate %267 RelaxedPrecision 
                                                      OpDecorate %268 RelaxedPrecision 
                                                      OpDecorate %269 RelaxedPrecision 
                                                      OpDecorate %270 RelaxedPrecision 
                                                      OpDecorate %271 RelaxedPrecision 
                                                      OpDecorate %272 RelaxedPrecision 
                                                      OpDecorate %273 RelaxedPrecision 
                                                      OpDecorate %274 RelaxedPrecision 
                                                      OpDecorate %275 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD2 Location 286 
                                                      OpDecorate %305 RelaxedPrecision 
                                                      OpDecorate %306 RelaxedPrecision 
                                                      OpDecorate %307 RelaxedPrecision 
                                                      OpDecorate %308 RelaxedPrecision 
                                                      OpDecorate %310 RelaxedPrecision 
                                                      OpDecorate %310 Location 310 
                                                      OpDecorate %311 RelaxedPrecision 
                                                      OpDecorate %312 RelaxedPrecision 
                                                      OpDecorate %313 RelaxedPrecision 
                                                      OpDecorate %314 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypePointer UniformConstant %10 
         UniformConstant read_only Texture2D* %12 = OpVariable UniformConstant 
                                              %14 = OpTypeSampler 
                                              %15 = OpTypePointer UniformConstant %14 
                     UniformConstant sampler* %16 = OpVariable UniformConstant 
                                              %18 = OpTypeSampledImage %10 
                                              %20 = OpTypeVector %6 2 
                                              %21 = OpTypePointer Input %20 
                        Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                              %25 = OpTypeInt 32 0 
                                          u32 %26 = OpConstant 3 
                                          u32 %28 = OpConstant 0 
                                              %29 = OpTypePointer Private %6 
                                 Private f32* %31 = OpVariable Private 
                                              %34 = OpTypePointer Input %7 
                        Input f32_4* vs_TEXCOORD1 = OpVariable Input 
                                              %36 = OpTypePointer Input %6 
                                              %41 = OpTypeVector %6 3 
                                              %42 = OpTypePointer Private %41 
                               Private f32_3* %43 = OpVariable Private 
                                          u32 %47 = OpConstant 2 
                                              %52 = OpTypeBool 
                                              %53 = OpTypePointer Private %52 
                                Private bool* %54 = OpVariable Private 
                                          f32 %56 = OpConstant 3.674022E-40 
                                              %59 = OpTypeInt 32 1 
                                          i32 %60 = OpConstant 0 
                                          i32 %61 = OpConstant 1 
                                          i32 %63 = OpConstant -1 
                                              %69 = OpTypeStruct %7 %6 %6 %7 %6 %6 %6 %7 %6 %6 %7 
                                              %70 = OpTypePointer Uniform %69 
Uniform struct {f32_4; f32; f32; f32_4; f32; f32; f32; f32_4; f32; f32; f32_4;}* %71 = OpVariable Uniform 
                                          i32 %72 = OpConstant 8 
                                              %73 = OpTypePointer Uniform %6 
                                          i32 %76 = OpConstant 9 
                                          u32 %81 = OpConstant 1 
                                 Private f32* %85 = OpVariable Private 
                                          f32 %87 = OpConstant 3.674022E-40 
                                 Private f32* %89 = OpVariable Private 
                                          f32 %91 = OpConstant 3.674022E-40 
                                 Private f32* %95 = OpVariable Private 
                                         i32 %116 = OpConstant 5 
                                         i32 %119 = OpConstant 6 
                                             %123 = OpTypePointer Uniform %7 
                        Input f32_4* vs_TEXCOORD5 = OpVariable Input 
        UniformConstant read_only Texture2D* %134 = OpVariable UniformConstant 
                    UniformConstant sampler* %136 = OpVariable UniformConstant 
                              Private f32_4* %142 = OpVariable Private 
                                         i32 %144 = OpConstant 7 
                              Private f32_3* %148 = OpVariable Private 
                                Input f32_4* %149 = OpVariable Input 
                                         i32 %152 = OpConstant 3 
                                         i32 %159 = OpConstant 2 
                              Private f32_4* %172 = OpVariable Private 
        UniformConstant read_only Texture2D* %173 = OpVariable UniformConstant 
                    UniformConstant sampler* %175 = OpVariable UniformConstant 
                                             %185 = OpTypePointer Private %20 
                              Private f32_2* %186 = OpVariable Private 
                              Private f32_4* %197 = OpVariable Private 
                              Private f32_4* %222 = OpVariable Private 
                                         i32 %241 = OpConstant 4 
                                Private f32* %248 = OpVariable Private 
                                         i32 %276 = OpConstant 10 
                        Input f32_4* vs_TEXCOORD2 = OpVariable Input 
                                             %309 = OpTypePointer Output %7 
                               Output f32_4* %310 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                          read_only Texture2D %13 = OpLoad %12 
                                      sampler %17 = OpLoad %16 
                   read_only Texture2DSampled %19 = OpSampledImage %13 %17 
                                        f32_2 %23 = OpLoad vs_TEXCOORD0 
                                        f32_4 %24 = OpImageSampleImplicitLod %19 %23 
                                          f32 %27 = OpCompositeExtract %24 3 
                                 Private f32* %30 = OpAccessChain %9 %28 
                                                      OpStore %30 %27 
                                 Private f32* %32 = OpAccessChain %9 %28 
                                          f32 %33 = OpLoad %32 
                                   Input f32* %37 = OpAccessChain vs_TEXCOORD1 %28 
                                          f32 %38 = OpLoad %37 
                                          f32 %39 = OpFNegate %38 
                                          f32 %40 = OpFAdd %33 %39 
                                                      OpStore %31 %40 
                                 Private f32* %44 = OpAccessChain %9 %28 
                                          f32 %45 = OpLoad %44 
                                          f32 %46 = OpFNegate %45 
                                   Input f32* %48 = OpAccessChain vs_TEXCOORD1 %47 
                                          f32 %49 = OpLoad %48 
                                          f32 %50 = OpFAdd %46 %49 
                                 Private f32* %51 = OpAccessChain %43 %28 
                                                      OpStore %51 %50 
                                          f32 %55 = OpLoad %31 
                                         bool %57 = OpFOrdLessThan %55 %56 
                                                      OpStore %54 %57 
                                         bool %58 = OpLoad %54 
                                          i32 %62 = OpSelect %58 %61 %60 
                                          i32 %64 = OpIMul %62 %63 
                                         bool %65 = OpINotEqual %64 %60 
                                                      OpSelectionMerge %67 None 
                                                      OpBranchConditional %65 %66 %67 
                                              %66 = OpLabel 
                                                      OpKill
                                              %67 = OpLabel 
                                 Uniform f32* %74 = OpAccessChain %71 %72 
                                          f32 %75 = OpLoad %74 
                                 Uniform f32* %77 = OpAccessChain %71 %76 
                                          f32 %78 = OpLoad %77 
                                          f32 %79 = OpFMul %75 %78 
                                                      OpStore %31 %79 
                                          f32 %80 = OpLoad %31 
                                   Input f32* %82 = OpAccessChain vs_TEXCOORD1 %81 
                                          f32 %83 = OpLoad %82 
                                          f32 %84 = OpFMul %80 %83 
                                                      OpStore %31 %84 
                                          f32 %86 = OpLoad %31 
                                          f32 %88 = OpExtInst %1 37 %86 %87 
                                                      OpStore %85 %88 
                                          f32 %90 = OpLoad %31 
                                          f32 %92 = OpFMul %90 %91 
                                                      OpStore %89 %92 
                                          f32 %93 = OpLoad %85 
                                          f32 %94 = OpExtInst %1 31 %93 
                                                      OpStore %85 %94 
                                 Private f32* %96 = OpAccessChain %43 %28 
                                          f32 %97 = OpLoad %96 
                                   Input f32* %98 = OpAccessChain vs_TEXCOORD1 %81 
                                          f32 %99 = OpLoad %98 
                                         f32 %100 = OpFMul %97 %99 
                                         f32 %101 = OpLoad %89 
                                         f32 %102 = OpFAdd %100 %101 
                                                      OpStore %95 %102 
                                         f32 %103 = OpLoad %95 
                                         f32 %104 = OpExtInst %1 43 %103 %56 %87 
                                                      OpStore %95 %104 
                                Private f32* %105 = OpAccessChain %43 %28 
                                         f32 %106 = OpLoad %105 
                                  Input f32* %107 = OpAccessChain vs_TEXCOORD1 %81 
                                         f32 %108 = OpLoad %107 
                                         f32 %109 = OpFMul %106 %108 
                                         f32 %110 = OpLoad %89 
                                         f32 %111 = OpFNegate %110 
                                         f32 %112 = OpFAdd %109 %111 
                                                      OpStore %89 %112 
                                         f32 %113 = OpLoad %85 
                                         f32 %114 = OpLoad %95 
                                         f32 %115 = OpFMul %113 %114 
                                                      OpStore %85 %115 
                                Uniform f32* %117 = OpAccessChain %71 %116 
                                         f32 %118 = OpLoad %117 
                                Uniform f32* %120 = OpAccessChain %71 %119 
                                         f32 %121 = OpLoad %120 
                                       f32_2 %122 = OpCompositeConstruct %118 %121 
                              Uniform f32_4* %124 = OpAccessChain %71 %60 
                                       f32_4 %125 = OpLoad %124 
                                       f32_2 %126 = OpVectorShuffle %125 %125 1 1 
                                       f32_2 %127 = OpFMul %122 %126 
                                       f32_4 %129 = OpLoad vs_TEXCOORD5 
                                       f32_2 %130 = OpVectorShuffle %129 %129 2 3 
                                       f32_2 %131 = OpFAdd %127 %130 
                                       f32_3 %132 = OpLoad %43 
                                       f32_3 %133 = OpVectorShuffle %132 %131 3 4 2 
                                                      OpStore %43 %133 
                         read_only Texture2D %135 = OpLoad %134 
                                     sampler %137 = OpLoad %136 
                  read_only Texture2DSampled %138 = OpSampledImage %135 %137 
                                       f32_3 %139 = OpLoad %43 
                                       f32_2 %140 = OpVectorShuffle %139 %139 0 1 
                                       f32_4 %141 = OpImageSampleImplicitLod %138 %140 
                                                      OpStore %9 %141 
                                       f32_4 %143 = OpLoad %9 
                              Uniform f32_4* %145 = OpAccessChain %71 %144 
                                       f32_4 %146 = OpLoad %145 
                                       f32_4 %147 = OpFMul %143 %146 
                                                      OpStore %142 %147 
                                       f32_4 %150 = OpLoad %149 
                                       f32_3 %151 = OpVectorShuffle %150 %150 0 1 2 
                              Uniform f32_4* %153 = OpAccessChain %71 %152 
                                       f32_4 %154 = OpLoad %153 
                                       f32_3 %155 = OpVectorShuffle %154 %154 0 1 2 
                                       f32_3 %156 = OpFMul %151 %155 
                                                      OpStore %148 %156 
                                Uniform f32* %157 = OpAccessChain %71 %61 
                                         f32 %158 = OpLoad %157 
                                Uniform f32* %160 = OpAccessChain %71 %159 
                                         f32 %161 = OpLoad %160 
                                       f32_2 %162 = OpCompositeConstruct %158 %161 
                              Uniform f32_4* %163 = OpAccessChain %71 %60 
                                       f32_4 %164 = OpLoad %163 
                                       f32_2 %165 = OpVectorShuffle %164 %164 1 1 
                                       f32_2 %166 = OpFMul %162 %165 
                                       f32_4 %167 = OpLoad vs_TEXCOORD5 
                                       f32_2 %168 = OpVectorShuffle %167 %167 0 1 
                                       f32_2 %169 = OpFAdd %166 %168 
                                       f32_3 %170 = OpLoad %43 
                                       f32_3 %171 = OpVectorShuffle %170 %169 3 4 2 
                                                      OpStore %43 %171 
                         read_only Texture2D %174 = OpLoad %173 
                                     sampler %176 = OpLoad %175 
                  read_only Texture2DSampled %177 = OpSampledImage %174 %176 
                                       f32_3 %178 = OpLoad %43 
                                       f32_2 %179 = OpVectorShuffle %178 %178 0 1 
                                       f32_4 %180 = OpImageSampleImplicitLod %177 %179 
                                                      OpStore %172 %180 
                                       f32_3 %181 = OpLoad %148 
                                       f32_4 %182 = OpLoad %172 
                                       f32_3 %183 = OpVectorShuffle %182 %182 0 1 2 
                                       f32_3 %184 = OpFMul %181 %183 
                                                      OpStore %43 %184 
                                Private f32* %187 = OpAccessChain %172 %26 
                                         f32 %188 = OpLoad %187 
                                Uniform f32* %189 = OpAccessChain %71 %152 %26 
                                         f32 %190 = OpLoad %189 
                                         f32 %191 = OpFMul %188 %190 
                                Private f32* %192 = OpAccessChain %186 %28 
                                                      OpStore %192 %191 
                                       f32_3 %193 = OpLoad %43 
                                       f32_2 %194 = OpLoad %186 
                                       f32_3 %195 = OpVectorShuffle %194 %194 0 0 0 
                                       f32_3 %196 = OpFMul %193 %195 
                                                      OpStore %148 %196 
                                       f32_4 %198 = OpLoad %142 
                                       f32_3 %199 = OpVectorShuffle %198 %198 0 1 2 
                                       f32_4 %200 = OpLoad %142 
                                       f32_3 %201 = OpVectorShuffle %200 %200 3 3 3 
                                       f32_3 %202 = OpFMul %199 %201 
                                       f32_3 %203 = OpLoad %148 
                                       f32_3 %204 = OpFNegate %203 
                                       f32_3 %205 = OpFAdd %202 %204 
                                       f32_4 %206 = OpLoad %197 
                                       f32_4 %207 = OpVectorShuffle %206 %205 4 5 6 3 
                                                      OpStore %197 %207 
                                Uniform f32* %208 = OpAccessChain %71 %144 %26 
                                         f32 %209 = OpLoad %208 
                                Private f32* %210 = OpAccessChain %9 %26 
                                         f32 %211 = OpLoad %210 
                                         f32 %212 = OpFMul %209 %211 
                                Private f32* %213 = OpAccessChain %186 %28 
                                         f32 %214 = OpLoad %213 
                                         f32 %215 = OpFNegate %214 
                                         f32 %216 = OpFAdd %212 %215 
                                Private f32* %217 = OpAccessChain %197 %26 
                                                      OpStore %217 %216 
                                         f32 %218 = OpLoad %85 
                                       f32_4 %219 = OpCompositeConstruct %218 %218 %218 %218 
                                       f32_4 %220 = OpLoad %197 
                                       f32_4 %221 = OpFMul %219 %220 
                                                      OpStore %197 %221 
                                       f32_3 %223 = OpLoad %43 
                                       f32_2 %224 = OpLoad %186 
                                       f32_3 %225 = OpVectorShuffle %224 %224 0 0 0 
                                       f32_3 %226 = OpFMul %223 %225 
                                       f32_4 %227 = OpLoad %197 
                                       f32_3 %228 = OpVectorShuffle %227 %227 0 1 2 
                                       f32_3 %229 = OpFAdd %226 %228 
                                       f32_4 %230 = OpLoad %222 
                                       f32_4 %231 = OpVectorShuffle %230 %229 4 5 6 3 
                                                      OpStore %222 %231 
                                Uniform f32* %232 = OpAccessChain %71 %152 %26 
                                         f32 %233 = OpLoad %232 
                                Private f32* %234 = OpAccessChain %172 %26 
                                         f32 %235 = OpLoad %234 
                                         f32 %236 = OpFMul %233 %235 
                                Private f32* %237 = OpAccessChain %197 %26 
                                         f32 %238 = OpLoad %237 
                                         f32 %239 = OpFAdd %236 %238 
                                Private f32* %240 = OpAccessChain %222 %26 
                                                      OpStore %240 %239 
                                Uniform f32* %242 = OpAccessChain %71 %241 
                                         f32 %243 = OpLoad %242 
                                Uniform f32* %244 = OpAccessChain %71 %76 
                                         f32 %245 = OpLoad %244 
                                         f32 %246 = OpFMul %243 %245 
                                Private f32* %247 = OpAccessChain %186 %28 
                                                      OpStore %247 %246 
                                Private f32* %249 = OpAccessChain %186 %28 
                                         f32 %250 = OpLoad %249 
                                  Input f32* %251 = OpAccessChain vs_TEXCOORD1 %81 
                                         f32 %252 = OpLoad %251 
                                         f32 %253 = OpFMul %250 %252 
                                                      OpStore %248 %253 
                                Private f32* %254 = OpAccessChain %186 %28 
                                         f32 %255 = OpLoad %254 
                                  Input f32* %256 = OpAccessChain vs_TEXCOORD1 %81 
                                         f32 %257 = OpLoad %256 
                                         f32 %258 = OpFMul %255 %257 
                                         f32 %259 = OpFAdd %258 %87 
                                                      OpStore %85 %259 
                                         f32 %260 = OpLoad %248 
                                         f32 %261 = OpFMul %260 %91 
                                         f32 %262 = OpLoad %89 
                                         f32 %263 = OpFAdd %261 %262 
                                                      OpStore %89 %263 
                                         f32 %264 = OpLoad %89 
                                         f32 %265 = OpLoad %85 
                                         f32 %266 = OpFDiv %264 %265 
                                                      OpStore %85 %266 
                                         f32 %267 = OpLoad %85 
                                         f32 %268 = OpExtInst %1 43 %267 %56 %87 
                                                      OpStore %85 %268 
                                         f32 %269 = OpLoad %85 
                                         f32 %270 = OpFNegate %269 
                                         f32 %271 = OpFAdd %270 %87 
                                                      OpStore %85 %271 
                                       f32_4 %272 = OpLoad %222 
                                         f32 %273 = OpLoad %85 
                                       f32_4 %274 = OpCompositeConstruct %273 %273 %273 %273 
                                       f32_4 %275 = OpFMul %272 %274 
                                                      OpStore %222 %275 
                              Uniform f32_4* %277 = OpAccessChain %71 %276 
                                       f32_4 %278 = OpLoad %277 
                                       f32_2 %279 = OpVectorShuffle %278 %278 0 1 
                                       f32_2 %280 = OpFNegate %279 
                              Uniform f32_4* %281 = OpAccessChain %71 %276 
                                       f32_4 %282 = OpLoad %281 
                                       f32_2 %283 = OpVectorShuffle %282 %282 2 3 
                                       f32_2 %284 = OpFAdd %280 %283 
                                                      OpStore %186 %284 
                                       f32_2 %285 = OpLoad %186 
                                       f32_4 %287 = OpLoad vs_TEXCOORD2 
                                       f32_2 %288 = OpVectorShuffle %287 %287 0 1 
                                       f32_2 %289 = OpExtInst %1 4 %288 
                                       f32_2 %290 = OpFNegate %289 
                                       f32_2 %291 = OpFAdd %285 %290 
                                                      OpStore %186 %291 
                                       f32_2 %292 = OpLoad %186 
                                       f32_4 %293 = OpLoad vs_TEXCOORD2 
                                       f32_2 %294 = OpVectorShuffle %293 %293 2 3 
                                       f32_2 %295 = OpFMul %292 %294 
                                                      OpStore %186 %295 
                                       f32_2 %296 = OpLoad %186 
                                       f32_2 %297 = OpCompositeConstruct %56 %56 
                                       f32_2 %298 = OpCompositeConstruct %87 %87 
                                       f32_2 %299 = OpExtInst %1 43 %296 %297 %298 
                                                      OpStore %186 %299 
                                Private f32* %300 = OpAccessChain %186 %81 
                                         f32 %301 = OpLoad %300 
                                Private f32* %302 = OpAccessChain %186 %28 
                                         f32 %303 = OpLoad %302 
                                         f32 %304 = OpFMul %301 %303 
                                                      OpStore %85 %304 
                                       f32_4 %305 = OpLoad %222 
                                         f32 %306 = OpLoad %85 
                                       f32_4 %307 = OpCompositeConstruct %306 %306 %306 %306 
                                       f32_4 %308 = OpFMul %305 %307 
                                                      OpStore %222 %308 
                                       f32_4 %311 = OpLoad %222 
                                       f32_4 %312 = OpLoad %149 
                                       f32_4 %313 = OpVectorShuffle %312 %312 3 3 3 3 
                                       f32_4 %314 = OpFMul %311 %313 
                                                      OpStore %310 %314 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "UNITY_UI_ALPHACLIP" "UNITY_UI_CLIP_RECT" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _FaceDilate;
uniform 	float _OutlineSoftness;
uniform 	float _OutlineWidth;
uniform 	vec4 hlslcc_mtx4x4_EnvMatrix[4];
uniform 	float _WeightNormal;
uniform 	float _WeightBold;
uniform 	float _ScaleRatioA;
uniform 	float _VertexOffsetX;
uniform 	float _VertexOffsetY;
uniform 	vec4 _ClipRect;
uniform 	float _MaskSoftnessX;
uniform 	float _MaskSoftnessY;
uniform 	float _GradientScale;
uniform 	float _ScaleX;
uniform 	float _ScaleY;
uniform 	float _PerspectiveFilter;
uniform 	float _Sharpness;
uniform 	vec4 _FaceTex_ST;
uniform 	vec4 _OutlineTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
out mediump vec4 vs_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD5;
vec3 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec3 u_xlat6;
vec2 u_xlat8;
bool u_xlatb8;
float u_xlat12;
bool u_xlatb12;
float u_xlat13;
void main()
{
    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
    gl_Position = u_xlat2;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat8.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;
    u_xlat8.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat8.xy;
    u_xlat8.xy = abs(u_xlat8.xy) * vec2(_ScaleX, _ScaleY);
    u_xlat8.xy = u_xlat2.ww / u_xlat8.xy;
    u_xlat13 = dot(u_xlat8.xy, u_xlat8.xy);
    u_xlat8.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) * vec2(0.25, 0.25) + u_xlat8.xy;
    vs_TEXCOORD2.zw = vec2(0.25, 0.25) / u_xlat8.xy;
    u_xlat8.x = inversesqrt(u_xlat13);
    u_xlat12 = abs(in_TEXCOORD1.y) * _GradientScale;
    u_xlat13 = _Sharpness + 1.0;
    u_xlat12 = u_xlat12 * u_xlat13;
    u_xlat13 = u_xlat12 * u_xlat8.x;
    u_xlat2.x = (-_PerspectiveFilter) + 1.0;
    u_xlat2.x = abs(u_xlat13) * u_xlat2.x;
    u_xlat8.x = u_xlat8.x * u_xlat12 + (-u_xlat2.x);
    u_xlat3.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat3.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat3.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat6.xyz = vec3(u_xlat12) * u_xlat3.xyz;
    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat3.xyz = vec3(u_xlat12) * u_xlat1.xyz;
    u_xlat12 = dot(u_xlat6.xyz, u_xlat3.xyz);
    u_xlat8.x = abs(u_xlat12) * u_xlat8.x + u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(hlslcc_mtx4x4glstate_matrix_projection[3].w==0.0);
#else
    u_xlatb12 = hlslcc_mtx4x4glstate_matrix_projection[3].w==0.0;
#endif
    u_xlat6.x = (u_xlatb12) ? u_xlat8.x : u_xlat13;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.0>=in_TEXCOORD1.y);
#else
    u_xlatb8 = 0.0>=in_TEXCOORD1.y;
#endif
    u_xlat8.x = u_xlatb8 ? 1.0 : float(0.0);
    u_xlat12 = (-_WeightNormal) + _WeightBold;
    u_xlat8.x = u_xlat8.x * u_xlat12 + _WeightNormal;
    u_xlat8.x = u_xlat8.x * 0.25 + _FaceDilate;
    u_xlat8.x = u_xlat8.x * _ScaleRatioA;
    u_xlat6.z = u_xlat8.x * 0.5;
    vs_TEXCOORD1.yw = u_xlat6.xz;
    u_xlat12 = 0.5 / u_xlat6.x;
    u_xlat13 = (-_OutlineWidth) * _ScaleRatioA + 1.0;
    u_xlat13 = (-_OutlineSoftness) * _ScaleRatioA + u_xlat13;
    u_xlat13 = u_xlat13 * 0.5 + (-u_xlat12);
    vs_TEXCOORD1.x = (-u_xlat8.x) * 0.5 + u_xlat13;
    u_xlat8.x = (-u_xlat8.x) * 0.5 + 0.5;
    vs_TEXCOORD1.z = u_xlat12 + u_xlat8.x;
    u_xlat2 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));
    u_xlat2 = min(u_xlat2, vec4(2e+10, 2e+10, 2e+10, 2e+10));
    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + (-u_xlat2.xy);
    vs_TEXCOORD2.xy = (-u_xlat2.zw) + u_xlat0.xy;
    u_xlat0.xyz = u_xlat1.yyy * hlslcc_mtx4x4_EnvMatrix[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4_EnvMatrix[0].xyz * u_xlat1.xxx + u_xlat0.xyz;
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4_EnvMatrix[2].xyz * u_xlat1.zzz + u_xlat0.xyz;
    u_xlat0.x = in_TEXCOORD1.x * 0.000244140625;
    u_xlat8.x = floor(u_xlat0.x);
    u_xlat8.y = (-u_xlat8.x) * 4096.0 + in_TEXCOORD1.x;
    u_xlat0.xy = u_xlat8.xy * vec2(0.001953125, 0.001953125);
    vs_TEXCOORD5.xy = u_xlat0.xy * _FaceTex_ST.xy + _FaceTex_ST.zw;
    vs_TEXCOORD5.zw = u_xlat0.xy * _OutlineTex_ST.xy + _OutlineTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _Time;
uniform 	float _FaceUVSpeedX;
uniform 	float _FaceUVSpeedY;
uniform 	mediump vec4 _FaceColor;
uniform 	float _OutlineSoftness;
uniform 	float _OutlineUVSpeedX;
uniform 	float _OutlineUVSpeedY;
uniform 	mediump vec4 _OutlineColor;
uniform 	float _OutlineWidth;
uniform 	float _ScaleRatioA;
uniform 	vec4 _ClipRect;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _FaceTex;
UNITY_LOCATION(2) uniform mediump sampler2D _OutlineTex;
in mediump vec4 vs_COLOR0;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
mediump float u_xlat16_1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump vec4 u_xlat16_4;
bool u_xlatb4;
float u_xlat5;
bool u_xlatb5;
mediump float u_xlat16_6;
float u_xlat9;
mediump float u_xlat16_11;
void main()
{
    u_xlat16_0.x = texture(_MainTex, vs_TEXCOORD0.xy).w;
    u_xlat5 = u_xlat16_0.x + (-vs_TEXCOORD1.x);
    u_xlat0.x = (-u_xlat16_0.x) + vs_TEXCOORD1.z;
#ifdef UNITY_ADRENO_ES3
    u_xlatb5 = !!(u_xlat5<0.0);
#else
    u_xlatb5 = u_xlat5<0.0;
#endif
    if(u_xlatb5){discard;}
    u_xlat5 = _OutlineWidth * _ScaleRatioA;
    u_xlat5 = u_xlat5 * vs_TEXCOORD1.y;
    u_xlat16_1 = min(u_xlat5, 1.0);
    u_xlat16_6 = u_xlat5 * 0.5;
    u_xlat16_1 = sqrt(u_xlat16_1);
    u_xlat16_11 = u_xlat0.x * vs_TEXCOORD1.y + u_xlat16_6;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_11 = min(max(u_xlat16_11, 0.0), 1.0);
#else
    u_xlat16_11 = clamp(u_xlat16_11, 0.0, 1.0);
#endif
    u_xlat16_6 = u_xlat0.x * vs_TEXCOORD1.y + (-u_xlat16_6);
    u_xlat16_1 = u_xlat16_1 * u_xlat16_11;
    u_xlat0.xy = vec2(_OutlineUVSpeedX, _OutlineUVSpeedY) * _Time.yy + vs_TEXCOORD5.zw;
    u_xlat16_0 = texture(_OutlineTex, u_xlat0.xy);
    u_xlat2 = u_xlat16_0 * _OutlineColor;
    u_xlat16_3.xyz = vs_COLOR0.xyz * _FaceColor.xyz;
    u_xlat0.xy = vec2(_FaceUVSpeedX, _FaceUVSpeedY) * _Time.yy + vs_TEXCOORD5.xy;
    u_xlat16_4 = texture(_FaceTex, u_xlat0.xy);
    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;
    u_xlat4.x = u_xlat16_4.w * _FaceColor.w;
    u_xlat16_3.xyz = u_xlat0.xyz * u_xlat4.xxx;
    u_xlat16_2.xyz = u_xlat2.xyz * u_xlat2.www + (-u_xlat16_3.xyz);
    u_xlat16_2.w = _OutlineColor.w * u_xlat16_0.w + (-u_xlat4.x);
    u_xlat16_2 = vec4(u_xlat16_1) * u_xlat16_2;
    u_xlat16_0.xyz = u_xlat0.xyz * u_xlat4.xxx + u_xlat16_2.xyz;
    u_xlat16_0.w = _FaceColor.w * u_xlat16_4.w + u_xlat16_2.w;
    u_xlat4.x = _OutlineSoftness * _ScaleRatioA;
    u_xlat9 = u_xlat4.x * vs_TEXCOORD1.y;
    u_xlat16_1 = u_xlat4.x * vs_TEXCOORD1.y + 1.0;
    u_xlat16_6 = u_xlat9 * 0.5 + u_xlat16_6;
    u_xlat16_1 = u_xlat16_6 / u_xlat16_1;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1 = min(max(u_xlat16_1, 0.0), 1.0);
#else
    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);
#endif
    u_xlat16_1 = (-u_xlat16_1) + 1.0;
    u_xlat16_0 = u_xlat16_0 * vec4(u_xlat16_1);
    u_xlat4.xy = (-_ClipRect.xy) + _ClipRect.zw;
    u_xlat4.xy = u_xlat4.xy + -abs(vs_TEXCOORD2.xy);
    u_xlat4.xy = u_xlat4.xy * vs_TEXCOORD2.zw;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.xy = min(max(u_xlat4.xy, 0.0), 1.0);
#else
    u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);
#endif
    u_xlat16_1 = u_xlat4.y * u_xlat4.x;
    u_xlat16_6 = u_xlat16_0.w * u_xlat16_1 + -0.00100000005;
    u_xlat16_0 = u_xlat16_0 * vec4(u_xlat16_1);
    SV_Target0 = u_xlat16_0 * vs_COLOR0.wwww;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(u_xlat16_6<0.0);
#else
    u_xlatb4 = u_xlat16_6<0.0;
#endif
    if(u_xlatb4){discard;}
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "UNITY_UI_ALPHACLIP" "UNITY_UI_CLIP_RECT" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _FaceDilate;
uniform 	float _OutlineSoftness;
uniform 	float _OutlineWidth;
uniform 	vec4 hlslcc_mtx4x4_EnvMatrix[4];
uniform 	float _WeightNormal;
uniform 	float _WeightBold;
uniform 	float _ScaleRatioA;
uniform 	float _VertexOffsetX;
uniform 	float _VertexOffsetY;
uniform 	vec4 _ClipRect;
uniform 	float _MaskSoftnessX;
uniform 	float _MaskSoftnessY;
uniform 	float _GradientScale;
uniform 	float _ScaleX;
uniform 	float _ScaleY;
uniform 	float _PerspectiveFilter;
uniform 	float _Sharpness;
uniform 	vec4 _FaceTex_ST;
uniform 	vec4 _OutlineTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
out mediump vec4 vs_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD5;
vec3 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec3 u_xlat6;
vec2 u_xlat8;
bool u_xlatb8;
float u_xlat12;
bool u_xlatb12;
float u_xlat13;
void main()
{
    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
    gl_Position = u_xlat2;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat8.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;
    u_xlat8.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat8.xy;
    u_xlat8.xy = abs(u_xlat8.xy) * vec2(_ScaleX, _ScaleY);
    u_xlat8.xy = u_xlat2.ww / u_xlat8.xy;
    u_xlat13 = dot(u_xlat8.xy, u_xlat8.xy);
    u_xlat8.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) * vec2(0.25, 0.25) + u_xlat8.xy;
    vs_TEXCOORD2.zw = vec2(0.25, 0.25) / u_xlat8.xy;
    u_xlat8.x = inversesqrt(u_xlat13);
    u_xlat12 = abs(in_TEXCOORD1.y) * _GradientScale;
    u_xlat13 = _Sharpness + 1.0;
    u_xlat12 = u_xlat12 * u_xlat13;
    u_xlat13 = u_xlat12 * u_xlat8.x;
    u_xlat2.x = (-_PerspectiveFilter) + 1.0;
    u_xlat2.x = abs(u_xlat13) * u_xlat2.x;
    u_xlat8.x = u_xlat8.x * u_xlat12 + (-u_xlat2.x);
    u_xlat3.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat3.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat3.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat6.xyz = vec3(u_xlat12) * u_xlat3.xyz;
    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat3.xyz = vec3(u_xlat12) * u_xlat1.xyz;
    u_xlat12 = dot(u_xlat6.xyz, u_xlat3.xyz);
    u_xlat8.x = abs(u_xlat12) * u_xlat8.x + u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(hlslcc_mtx4x4glstate_matrix_projection[3].w==0.0);
#else
    u_xlatb12 = hlslcc_mtx4x4glstate_matrix_projection[3].w==0.0;
#endif
    u_xlat6.x = (u_xlatb12) ? u_xlat8.x : u_xlat13;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.0>=in_TEXCOORD1.y);
#else
    u_xlatb8 = 0.0>=in_TEXCOORD1.y;
#endif
    u_xlat8.x = u_xlatb8 ? 1.0 : float(0.0);
    u_xlat12 = (-_WeightNormal) + _WeightBold;
    u_xlat8.x = u_xlat8.x * u_xlat12 + _WeightNormal;
    u_xlat8.x = u_xlat8.x * 0.25 + _FaceDilate;
    u_xlat8.x = u_xlat8.x * _ScaleRatioA;
    u_xlat6.z = u_xlat8.x * 0.5;
    vs_TEXCOORD1.yw = u_xlat6.xz;
    u_xlat12 = 0.5 / u_xlat6.x;
    u_xlat13 = (-_OutlineWidth) * _ScaleRatioA + 1.0;
    u_xlat13 = (-_OutlineSoftness) * _ScaleRatioA + u_xlat13;
    u_xlat13 = u_xlat13 * 0.5 + (-u_xlat12);
    vs_TEXCOORD1.x = (-u_xlat8.x) * 0.5 + u_xlat13;
    u_xlat8.x = (-u_xlat8.x) * 0.5 + 0.5;
    vs_TEXCOORD1.z = u_xlat12 + u_xlat8.x;
    u_xlat2 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));
    u_xlat2 = min(u_xlat2, vec4(2e+10, 2e+10, 2e+10, 2e+10));
    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + (-u_xlat2.xy);
    vs_TEXCOORD2.xy = (-u_xlat2.zw) + u_xlat0.xy;
    u_xlat0.xyz = u_xlat1.yyy * hlslcc_mtx4x4_EnvMatrix[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4_EnvMatrix[0].xyz * u_xlat1.xxx + u_xlat0.xyz;
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4_EnvMatrix[2].xyz * u_xlat1.zzz + u_xlat0.xyz;
    u_xlat0.x = in_TEXCOORD1.x * 0.000244140625;
    u_xlat8.x = floor(u_xlat0.x);
    u_xlat8.y = (-u_xlat8.x) * 4096.0 + in_TEXCOORD1.x;
    u_xlat0.xy = u_xlat8.xy * vec2(0.001953125, 0.001953125);
    vs_TEXCOORD5.xy = u_xlat0.xy * _FaceTex_ST.xy + _FaceTex_ST.zw;
    vs_TEXCOORD5.zw = u_xlat0.xy * _OutlineTex_ST.xy + _OutlineTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _Time;
uniform 	float _FaceUVSpeedX;
uniform 	float _FaceUVSpeedY;
uniform 	mediump vec4 _FaceColor;
uniform 	float _OutlineSoftness;
uniform 	float _OutlineUVSpeedX;
uniform 	float _OutlineUVSpeedY;
uniform 	mediump vec4 _OutlineColor;
uniform 	float _OutlineWidth;
uniform 	float _ScaleRatioA;
uniform 	vec4 _ClipRect;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _FaceTex;
UNITY_LOCATION(2) uniform mediump sampler2D _OutlineTex;
in mediump vec4 vs_COLOR0;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
mediump float u_xlat16_1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump vec4 u_xlat16_4;
bool u_xlatb4;
float u_xlat5;
bool u_xlatb5;
mediump float u_xlat16_6;
float u_xlat9;
mediump float u_xlat16_11;
void main()
{
    u_xlat16_0.x = texture(_MainTex, vs_TEXCOORD0.xy).w;
    u_xlat5 = u_xlat16_0.x + (-vs_TEXCOORD1.x);
    u_xlat0.x = (-u_xlat16_0.x) + vs_TEXCOORD1.z;
#ifdef UNITY_ADRENO_ES3
    u_xlatb5 = !!(u_xlat5<0.0);
#else
    u_xlatb5 = u_xlat5<0.0;
#endif
    if(u_xlatb5){discard;}
    u_xlat5 = _OutlineWidth * _ScaleRatioA;
    u_xlat5 = u_xlat5 * vs_TEXCOORD1.y;
    u_xlat16_1 = min(u_xlat5, 1.0);
    u_xlat16_6 = u_xlat5 * 0.5;
    u_xlat16_1 = sqrt(u_xlat16_1);
    u_xlat16_11 = u_xlat0.x * vs_TEXCOORD1.y + u_xlat16_6;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_11 = min(max(u_xlat16_11, 0.0), 1.0);
#else
    u_xlat16_11 = clamp(u_xlat16_11, 0.0, 1.0);
#endif
    u_xlat16_6 = u_xlat0.x * vs_TEXCOORD1.y + (-u_xlat16_6);
    u_xlat16_1 = u_xlat16_1 * u_xlat16_11;
    u_xlat0.xy = vec2(_OutlineUVSpeedX, _OutlineUVSpeedY) * _Time.yy + vs_TEXCOORD5.zw;
    u_xlat16_0 = texture(_OutlineTex, u_xlat0.xy);
    u_xlat2 = u_xlat16_0 * _OutlineColor;
    u_xlat16_3.xyz = vs_COLOR0.xyz * _FaceColor.xyz;
    u_xlat0.xy = vec2(_FaceUVSpeedX, _FaceUVSpeedY) * _Time.yy + vs_TEXCOORD5.xy;
    u_xlat16_4 = texture(_FaceTex, u_xlat0.xy);
    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;
    u_xlat4.x = u_xlat16_4.w * _FaceColor.w;
    u_xlat16_3.xyz = u_xlat0.xyz * u_xlat4.xxx;
    u_xlat16_2.xyz = u_xlat2.xyz * u_xlat2.www + (-u_xlat16_3.xyz);
    u_xlat16_2.w = _OutlineColor.w * u_xlat16_0.w + (-u_xlat4.x);
    u_xlat16_2 = vec4(u_xlat16_1) * u_xlat16_2;
    u_xlat16_0.xyz = u_xlat0.xyz * u_xlat4.xxx + u_xlat16_2.xyz;
    u_xlat16_0.w = _FaceColor.w * u_xlat16_4.w + u_xlat16_2.w;
    u_xlat4.x = _OutlineSoftness * _ScaleRatioA;
    u_xlat9 = u_xlat4.x * vs_TEXCOORD1.y;
    u_xlat16_1 = u_xlat4.x * vs_TEXCOORD1.y + 1.0;
    u_xlat16_6 = u_xlat9 * 0.5 + u_xlat16_6;
    u_xlat16_1 = u_xlat16_6 / u_xlat16_1;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1 = min(max(u_xlat16_1, 0.0), 1.0);
#else
    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);
#endif
    u_xlat16_1 = (-u_xlat16_1) + 1.0;
    u_xlat16_0 = u_xlat16_0 * vec4(u_xlat16_1);
    u_xlat4.xy = (-_ClipRect.xy) + _ClipRect.zw;
    u_xlat4.xy = u_xlat4.xy + -abs(vs_TEXCOORD2.xy);
    u_xlat4.xy = u_xlat4.xy * vs_TEXCOORD2.zw;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.xy = min(max(u_xlat4.xy, 0.0), 1.0);
#else
    u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);
#endif
    u_xlat16_1 = u_xlat4.y * u_xlat4.x;
    u_xlat16_6 = u_xlat16_0.w * u_xlat16_1 + -0.00100000005;
    u_xlat16_0 = u_xlat16_0 * vec4(u_xlat16_1);
    SV_Target0 = u_xlat16_0 * vs_COLOR0.wwww;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(u_xlat16_6<0.0);
#else
    u_xlatb4 = u_xlat16_6<0.0;
#endif
    if(u_xlatb4){discard;}
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "UNITY_UI_ALPHACLIP" "UNITY_UI_CLIP_RECT" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _FaceDilate;
uniform 	float _OutlineSoftness;
uniform 	float _OutlineWidth;
uniform 	vec4 hlslcc_mtx4x4_EnvMatrix[4];
uniform 	float _WeightNormal;
uniform 	float _WeightBold;
uniform 	float _ScaleRatioA;
uniform 	float _VertexOffsetX;
uniform 	float _VertexOffsetY;
uniform 	vec4 _ClipRect;
uniform 	float _MaskSoftnessX;
uniform 	float _MaskSoftnessY;
uniform 	float _GradientScale;
uniform 	float _ScaleX;
uniform 	float _ScaleY;
uniform 	float _PerspectiveFilter;
uniform 	float _Sharpness;
uniform 	vec4 _FaceTex_ST;
uniform 	vec4 _OutlineTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
out mediump vec4 vs_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD5;
vec3 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec3 u_xlat6;
vec2 u_xlat8;
bool u_xlatb8;
float u_xlat12;
bool u_xlatb12;
float u_xlat13;
void main()
{
    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
    gl_Position = u_xlat2;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat8.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;
    u_xlat8.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat8.xy;
    u_xlat8.xy = abs(u_xlat8.xy) * vec2(_ScaleX, _ScaleY);
    u_xlat8.xy = u_xlat2.ww / u_xlat8.xy;
    u_xlat13 = dot(u_xlat8.xy, u_xlat8.xy);
    u_xlat8.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) * vec2(0.25, 0.25) + u_xlat8.xy;
    vs_TEXCOORD2.zw = vec2(0.25, 0.25) / u_xlat8.xy;
    u_xlat8.x = inversesqrt(u_xlat13);
    u_xlat12 = abs(in_TEXCOORD1.y) * _GradientScale;
    u_xlat13 = _Sharpness + 1.0;
    u_xlat12 = u_xlat12 * u_xlat13;
    u_xlat13 = u_xlat12 * u_xlat8.x;
    u_xlat2.x = (-_PerspectiveFilter) + 1.0;
    u_xlat2.x = abs(u_xlat13) * u_xlat2.x;
    u_xlat8.x = u_xlat8.x * u_xlat12 + (-u_xlat2.x);
    u_xlat3.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat3.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat3.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat6.xyz = vec3(u_xlat12) * u_xlat3.xyz;
    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat3.xyz = vec3(u_xlat12) * u_xlat1.xyz;
    u_xlat12 = dot(u_xlat6.xyz, u_xlat3.xyz);
    u_xlat8.x = abs(u_xlat12) * u_xlat8.x + u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(hlslcc_mtx4x4glstate_matrix_projection[3].w==0.0);
#else
    u_xlatb12 = hlslcc_mtx4x4glstate_matrix_projection[3].w==0.0;
#endif
    u_xlat6.x = (u_xlatb12) ? u_xlat8.x : u_xlat13;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.0>=in_TEXCOORD1.y);
#else
    u_xlatb8 = 0.0>=in_TEXCOORD1.y;
#endif
    u_xlat8.x = u_xlatb8 ? 1.0 : float(0.0);
    u_xlat12 = (-_WeightNormal) + _WeightBold;
    u_xlat8.x = u_xlat8.x * u_xlat12 + _WeightNormal;
    u_xlat8.x = u_xlat8.x * 0.25 + _FaceDilate;
    u_xlat8.x = u_xlat8.x * _ScaleRatioA;
    u_xlat6.z = u_xlat8.x * 0.5;
    vs_TEXCOORD1.yw = u_xlat6.xz;
    u_xlat12 = 0.5 / u_xlat6.x;
    u_xlat13 = (-_OutlineWidth) * _ScaleRatioA + 1.0;
    u_xlat13 = (-_OutlineSoftness) * _ScaleRatioA + u_xlat13;
    u_xlat13 = u_xlat13 * 0.5 + (-u_xlat12);
    vs_TEXCOORD1.x = (-u_xlat8.x) * 0.5 + u_xlat13;
    u_xlat8.x = (-u_xlat8.x) * 0.5 + 0.5;
    vs_TEXCOORD1.z = u_xlat12 + u_xlat8.x;
    u_xlat2 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));
    u_xlat2 = min(u_xlat2, vec4(2e+10, 2e+10, 2e+10, 2e+10));
    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + (-u_xlat2.xy);
    vs_TEXCOORD2.xy = (-u_xlat2.zw) + u_xlat0.xy;
    u_xlat0.xyz = u_xlat1.yyy * hlslcc_mtx4x4_EnvMatrix[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4_EnvMatrix[0].xyz * u_xlat1.xxx + u_xlat0.xyz;
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4_EnvMatrix[2].xyz * u_xlat1.zzz + u_xlat0.xyz;
    u_xlat0.x = in_TEXCOORD1.x * 0.000244140625;
    u_xlat8.x = floor(u_xlat0.x);
    u_xlat8.y = (-u_xlat8.x) * 4096.0 + in_TEXCOORD1.x;
    u_xlat0.xy = u_xlat8.xy * vec2(0.001953125, 0.001953125);
    vs_TEXCOORD5.xy = u_xlat0.xy * _FaceTex_ST.xy + _FaceTex_ST.zw;
    vs_TEXCOORD5.zw = u_xlat0.xy * _OutlineTex_ST.xy + _OutlineTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _Time;
uniform 	float _FaceUVSpeedX;
uniform 	float _FaceUVSpeedY;
uniform 	mediump vec4 _FaceColor;
uniform 	float _OutlineSoftness;
uniform 	float _OutlineUVSpeedX;
uniform 	float _OutlineUVSpeedY;
uniform 	mediump vec4 _OutlineColor;
uniform 	float _OutlineWidth;
uniform 	float _ScaleRatioA;
uniform 	vec4 _ClipRect;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _FaceTex;
UNITY_LOCATION(2) uniform mediump sampler2D _OutlineTex;
in mediump vec4 vs_COLOR0;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
mediump float u_xlat16_1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump vec4 u_xlat16_4;
bool u_xlatb4;
float u_xlat5;
bool u_xlatb5;
mediump float u_xlat16_6;
float u_xlat9;
mediump float u_xlat16_11;
void main()
{
    u_xlat16_0.x = texture(_MainTex, vs_TEXCOORD0.xy).w;
    u_xlat5 = u_xlat16_0.x + (-vs_TEXCOORD1.x);
    u_xlat0.x = (-u_xlat16_0.x) + vs_TEXCOORD1.z;
#ifdef UNITY_ADRENO_ES3
    u_xlatb5 = !!(u_xlat5<0.0);
#else
    u_xlatb5 = u_xlat5<0.0;
#endif
    if(u_xlatb5){discard;}
    u_xlat5 = _OutlineWidth * _ScaleRatioA;
    u_xlat5 = u_xlat5 * vs_TEXCOORD1.y;
    u_xlat16_1 = min(u_xlat5, 1.0);
    u_xlat16_6 = u_xlat5 * 0.5;
    u_xlat16_1 = sqrt(u_xlat16_1);
    u_xlat16_11 = u_xlat0.x * vs_TEXCOORD1.y + u_xlat16_6;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_11 = min(max(u_xlat16_11, 0.0), 1.0);
#else
    u_xlat16_11 = clamp(u_xlat16_11, 0.0, 1.0);
#endif
    u_xlat16_6 = u_xlat0.x * vs_TEXCOORD1.y + (-u_xlat16_6);
    u_xlat16_1 = u_xlat16_1 * u_xlat16_11;
    u_xlat0.xy = vec2(_OutlineUVSpeedX, _OutlineUVSpeedY) * _Time.yy + vs_TEXCOORD5.zw;
    u_xlat16_0 = texture(_OutlineTex, u_xlat0.xy);
    u_xlat2 = u_xlat16_0 * _OutlineColor;
    u_xlat16_3.xyz = vs_COLOR0.xyz * _FaceColor.xyz;
    u_xlat0.xy = vec2(_FaceUVSpeedX, _FaceUVSpeedY) * _Time.yy + vs_TEXCOORD5.xy;
    u_xlat16_4 = texture(_FaceTex, u_xlat0.xy);
    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;
    u_xlat4.x = u_xlat16_4.w * _FaceColor.w;
    u_xlat16_3.xyz = u_xlat0.xyz * u_xlat4.xxx;
    u_xlat16_2.xyz = u_xlat2.xyz * u_xlat2.www + (-u_xlat16_3.xyz);
    u_xlat16_2.w = _OutlineColor.w * u_xlat16_0.w + (-u_xlat4.x);
    u_xlat16_2 = vec4(u_xlat16_1) * u_xlat16_2;
    u_xlat16_0.xyz = u_xlat0.xyz * u_xlat4.xxx + u_xlat16_2.xyz;
    u_xlat16_0.w = _FaceColor.w * u_xlat16_4.w + u_xlat16_2.w;
    u_xlat4.x = _OutlineSoftness * _ScaleRatioA;
    u_xlat9 = u_xlat4.x * vs_TEXCOORD1.y;
    u_xlat16_1 = u_xlat4.x * vs_TEXCOORD1.y + 1.0;
    u_xlat16_6 = u_xlat9 * 0.5 + u_xlat16_6;
    u_xlat16_1 = u_xlat16_6 / u_xlat16_1;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1 = min(max(u_xlat16_1, 0.0), 1.0);
#else
    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);
#endif
    u_xlat16_1 = (-u_xlat16_1) + 1.0;
    u_xlat16_0 = u_xlat16_0 * vec4(u_xlat16_1);
    u_xlat4.xy = (-_ClipRect.xy) + _ClipRect.zw;
    u_xlat4.xy = u_xlat4.xy + -abs(vs_TEXCOORD2.xy);
    u_xlat4.xy = u_xlat4.xy * vs_TEXCOORD2.zw;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.xy = min(max(u_xlat4.xy, 0.0), 1.0);
#else
    u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);
#endif
    u_xlat16_1 = u_xlat4.y * u_xlat4.x;
    u_xlat16_6 = u_xlat16_0.w * u_xlat16_1 + -0.00100000005;
    u_xlat16_0 = u_xlat16_0 * vec4(u_xlat16_1);
    SV_Target0 = u_xlat16_0 * vs_COLOR0.wwww;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(u_xlat16_6<0.0);
#else
    u_xlatb4 = u_xlat16_6<0.0;
#endif
    if(u_xlatb4){discard;}
    return;
}

#endif
"
}
SubProgram "vulkan hw_tier00 " {
Keywords { "UNITY_UI_ALPHACLIP" "UNITY_UI_CLIP_RECT" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 517
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %12 %121 %125 %126 %129 %131 %183 %193 %236 %358 %452 %485 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpDecorate %12 Location 12 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpDecorate %19 ArrayStride 19 
                                                      OpDecorate %20 ArrayStride 20 
                                                      OpDecorate %21 ArrayStride 21 
                                                      OpDecorate %22 ArrayStride 22 
                                                      OpMemberDecorate %23 0 Offset 23 
                                                      OpMemberDecorate %23 1 Offset 23 
                                                      OpMemberDecorate %23 2 Offset 23 
                                                      OpMemberDecorate %23 3 Offset 23 
                                                      OpMemberDecorate %23 4 Offset 23 
                                                      OpMemberDecorate %23 5 Offset 23 
                                                      OpMemberDecorate %23 6 Offset 23 
                                                      OpMemberDecorate %23 7 Offset 23 
                                                      OpMemberDecorate %23 8 Offset 23 
                                                      OpMemberDecorate %23 9 Offset 23 
                                                      OpMemberDecorate %23 10 Offset 23 
                                                      OpMemberDecorate %23 11 Offset 23 
                                                      OpMemberDecorate %23 12 Offset 23 
                                                      OpMemberDecorate %23 13 Offset 23 
                                                      OpMemberDecorate %23 14 Offset 23 
                                                      OpMemberDecorate %23 15 Offset 23 
                                                      OpMemberDecorate %23 16 Offset 23 
                                                      OpMemberDecorate %23 17 Offset 23 
                                                      OpMemberDecorate %23 18 Offset 23 
                                                      OpMemberDecorate %23 19 Offset 23 
                                                      OpMemberDecorate %23 20 Offset 23 
                                                      OpMemberDecorate %23 21 Offset 23 
                                                      OpMemberDecorate %23 22 Offset 23 
                                                      OpMemberDecorate %23 23 Offset 23 
                                                      OpMemberDecorate %23 24 Offset 23 
                                                      OpDecorate %23 Block 
                                                      OpDecorate %25 DescriptorSet 25 
                                                      OpDecorate %25 Binding 25 
                                                      OpMemberDecorate %119 0 BuiltIn 119 
                                                      OpMemberDecorate %119 1 BuiltIn 119 
                                                      OpMemberDecorate %119 2 BuiltIn 119 
                                                      OpDecorate %119 Block 
                                                      OpDecorate %125 RelaxedPrecision 
                                                      OpDecorate %125 Location 125 
                                                      OpDecorate %126 RelaxedPrecision 
                                                      OpDecorate %126 Location 126 
                                                      OpDecorate %127 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD0 Location 129 
                                                      OpDecorate %131 Location 131 
                                                      OpDecorate vs_TEXCOORD2 Location 183 
                                                      OpDecorate %193 Location 193 
                                                      OpDecorate %236 Location 236 
                                                      OpDecorate vs_TEXCOORD1 Location 358 
                                                      OpDecorate vs_TEXCOORD3 Location 452 
                                                      OpDecorate vs_TEXCOORD5 Location 485 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 3 
                                               %8 = OpTypePointer Private %7 
                                Private f32_3* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 4 
                                              %11 = OpTypePointer Input %10 
                                 Input f32_4* %12 = OpVariable Input 
                                              %13 = OpTypeVector %6 2 
                                              %16 = OpTypeInt 32 0 
                                          u32 %17 = OpConstant 4 
                                              %18 = OpTypeArray %10 %17 
                                              %19 = OpTypeArray %10 %17 
                                              %20 = OpTypeArray %10 %17 
                                              %21 = OpTypeArray %10 %17 
                                              %22 = OpTypeArray %10 %17 
                                              %23 = OpTypeStruct %7 %10 %18 %19 %20 %21 %6 %6 %6 %22 %6 %6 %6 %6 %6 %10 %6 %6 %6 %6 %6 %6 %6 %10 %10 
                                              %24 = OpTypePointer Uniform %23 
Uniform struct {f32_3; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4[4]; f32; f32; f32; f32_4[4]; f32; f32; f32; f32; f32; f32_4; f32; f32; f32; f32; f32; f32; f32; f32_4; f32_4;}* %25 = OpVariable Uniform 
                                              %26 = OpTypeInt 32 1 
                                          i32 %27 = OpConstant 13 
                                              %28 = OpTypePointer Uniform %6 
                                          i32 %31 = OpConstant 14 
                                              %38 = OpTypePointer Private %10 
                               Private f32_4* %39 = OpVariable Private 
                                          i32 %42 = OpConstant 2 
                                          i32 %43 = OpConstant 1 
                                              %44 = OpTypePointer Uniform %10 
                                          i32 %48 = OpConstant 0 
                               Private f32_4* %63 = OpVariable Private 
                                          i32 %65 = OpConstant 3 
                                              %83 = OpTypePointer Uniform %7 
                               Private f32_4* %89 = OpVariable Private 
                                          i32 %92 = OpConstant 5 
                                         u32 %117 = OpConstant 1 
                                             %118 = OpTypeArray %6 %117 
                                             %119 = OpTypeStruct %10 %6 %118 
                                             %120 = OpTypePointer Output %119 
        Output struct {f32_4; f32; f32[1];}* %121 = OpVariable Output 
                                             %123 = OpTypePointer Output %10 
                               Output f32_4* %125 = OpVariable Output 
                                Input f32_4* %126 = OpVariable Input 
                                             %128 = OpTypePointer Output %13 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                             %130 = OpTypePointer Input %13 
                                Input f32_2* %131 = OpVariable Input 
                                             %133 = OpTypePointer Private %13 
                              Private f32_2* %134 = OpVariable Private 
                                         i32 %138 = OpConstant 4 
                                         i32 %154 = OpConstant 19 
                                         i32 %157 = OpConstant 20 
                                             %166 = OpTypePointer Private %6 
                                Private f32* %167 = OpVariable Private 
                                         i32 %171 = OpConstant 16 
                                         i32 %174 = OpConstant 17 
                                         f32 %178 = OpConstant 3.674022E-40 
                                       f32_2 %179 = OpConstantComposite %178 %178 
                       Output f32_4* vs_TEXCOORD2 = OpVariable Output 
                                         u32 %190 = OpConstant 0 
                                Private f32* %192 = OpVariable Private 
                                Input f32_2* %193 = OpVariable Input 
                                             %194 = OpTypePointer Input %6 
                                         i32 %198 = OpConstant 18 
                                         i32 %202 = OpConstant 22 
                                         f32 %205 = OpConstant 3.674022E-40 
                                         i32 %214 = OpConstant 21 
                                             %235 = OpTypePointer Input %7 
                                Input f32_3* %236 = OpVariable Input 
                                         u32 %254 = OpConstant 2 
                              Private f32_3* %263 = OpVariable Private 
                                             %296 = OpTypeBool 
                                             %297 = OpTypePointer Private %296 
                               Private bool* %298 = OpVariable Private 
                                         u32 %299 = OpConstant 3 
                                         f32 %302 = OpConstant 3.674022E-40 
                                             %305 = OpTypePointer Function %6 
                               Private bool* %315 = OpVariable Private 
                                         i32 %322 = OpConstant 10 
                                         i32 %326 = OpConstant 11 
                                         i32 %341 = OpConstant 6 
                                         i32 %348 = OpConstant 12 
                                         f32 %355 = OpConstant 3.674022E-40 
                       Output f32_4* vs_TEXCOORD1 = OpVariable Output 
                                         i32 %366 = OpConstant 8 
                                         i32 %374 = OpConstant 7 
                                             %394 = OpTypePointer Output %6 
                                         i32 %407 = OpConstant 15 
                                         f32 %410 = OpConstant 3.674022E-40 
                                       f32_4 %411 = OpConstantComposite %410 %410 %410 %410 
                                         f32 %414 = OpConstant 3.674022E-40 
                                       f32_4 %415 = OpConstantComposite %414 %414 %414 %414 
                                         f32 %419 = OpConstant 3.674022E-40 
                                       f32_2 %420 = OpConstantComposite %419 %419 
                                         i32 %438 = OpConstant 9 
                                             %451 = OpTypePointer Output %7 
                       Output f32_3* vs_TEXCOORD3 = OpVariable Output 
                                         f32 %463 = OpConstant 3.674022E-40 
                                         f32 %473 = OpConstant 3.674022E-40 
                                         f32 %480 = OpConstant 3.674022E-40 
                                       f32_2 %481 = OpConstantComposite %480 %480 
                       Output f32_4* vs_TEXCOORD5 = OpVariable Output 
                                         i32 %488 = OpConstant 23 
                                         i32 %501 = OpConstant 24 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                               Function f32* %306 = OpVariable Function 
                                        f32_4 %14 = OpLoad %12 
                                        f32_2 %15 = OpVectorShuffle %14 %14 0 1 
                                 Uniform f32* %29 = OpAccessChain %25 %27 
                                          f32 %30 = OpLoad %29 
                                 Uniform f32* %32 = OpAccessChain %25 %31 
                                          f32 %33 = OpLoad %32 
                                        f32_2 %34 = OpCompositeConstruct %30 %33 
                                        f32_2 %35 = OpFAdd %15 %34 
                                        f32_3 %36 = OpLoad %9 
                                        f32_3 %37 = OpVectorShuffle %36 %35 3 4 2 
                                                      OpStore %9 %37 
                                        f32_3 %40 = OpLoad %9 
                                        f32_4 %41 = OpVectorShuffle %40 %40 1 1 1 1 
                               Uniform f32_4* %45 = OpAccessChain %25 %42 %43 
                                        f32_4 %46 = OpLoad %45 
                                        f32_4 %47 = OpFMul %41 %46 
                                                      OpStore %39 %47 
                               Uniform f32_4* %49 = OpAccessChain %25 %42 %48 
                                        f32_4 %50 = OpLoad %49 
                                        f32_3 %51 = OpLoad %9 
                                        f32_4 %52 = OpVectorShuffle %51 %51 0 0 0 0 
                                        f32_4 %53 = OpFMul %50 %52 
                                        f32_4 %54 = OpLoad %39 
                                        f32_4 %55 = OpFAdd %53 %54 
                                                      OpStore %39 %55 
                               Uniform f32_4* %56 = OpAccessChain %25 %42 %42 
                                        f32_4 %57 = OpLoad %56 
                                        f32_4 %58 = OpLoad %12 
                                        f32_4 %59 = OpVectorShuffle %58 %58 2 2 2 2 
                                        f32_4 %60 = OpFMul %57 %59 
                                        f32_4 %61 = OpLoad %39 
                                        f32_4 %62 = OpFAdd %60 %61 
                                                      OpStore %39 %62 
                                        f32_4 %64 = OpLoad %39 
                               Uniform f32_4* %66 = OpAccessChain %25 %42 %65 
                                        f32_4 %67 = OpLoad %66 
                                        f32_4 %68 = OpFAdd %64 %67 
                                                      OpStore %63 %68 
                               Uniform f32_4* %69 = OpAccessChain %25 %42 %65 
                                        f32_4 %70 = OpLoad %69 
                                        f32_3 %71 = OpVectorShuffle %70 %70 0 1 2 
                                        f32_4 %72 = OpLoad %12 
                                        f32_3 %73 = OpVectorShuffle %72 %72 3 3 3 
                                        f32_3 %74 = OpFMul %71 %73 
                                        f32_4 %75 = OpLoad %39 
                                        f32_3 %76 = OpVectorShuffle %75 %75 0 1 2 
                                        f32_3 %77 = OpFAdd %74 %76 
                                        f32_4 %78 = OpLoad %39 
                                        f32_4 %79 = OpVectorShuffle %78 %77 4 5 6 3 
                                                      OpStore %39 %79 
                                        f32_4 %80 = OpLoad %39 
                                        f32_3 %81 = OpVectorShuffle %80 %80 0 1 2 
                                        f32_3 %82 = OpFNegate %81 
                               Uniform f32_3* %84 = OpAccessChain %25 %48 
                                        f32_3 %85 = OpLoad %84 
                                        f32_3 %86 = OpFAdd %82 %85 
                                        f32_4 %87 = OpLoad %39 
                                        f32_4 %88 = OpVectorShuffle %87 %86 4 5 6 3 
                                                      OpStore %39 %88 
                                        f32_4 %90 = OpLoad %63 
                                        f32_4 %91 = OpVectorShuffle %90 %90 1 1 1 1 
                               Uniform f32_4* %93 = OpAccessChain %25 %92 %43 
                                        f32_4 %94 = OpLoad %93 
                                        f32_4 %95 = OpFMul %91 %94 
                                                      OpStore %89 %95 
                               Uniform f32_4* %96 = OpAccessChain %25 %92 %48 
                                        f32_4 %97 = OpLoad %96 
                                        f32_4 %98 = OpLoad %63 
                                        f32_4 %99 = OpVectorShuffle %98 %98 0 0 0 0 
                                       f32_4 %100 = OpFMul %97 %99 
                                       f32_4 %101 = OpLoad %89 
                                       f32_4 %102 = OpFAdd %100 %101 
                                                      OpStore %89 %102 
                              Uniform f32_4* %103 = OpAccessChain %25 %92 %42 
                                       f32_4 %104 = OpLoad %103 
                                       f32_4 %105 = OpLoad %63 
                                       f32_4 %106 = OpVectorShuffle %105 %105 2 2 2 2 
                                       f32_4 %107 = OpFMul %104 %106 
                                       f32_4 %108 = OpLoad %89 
                                       f32_4 %109 = OpFAdd %107 %108 
                                                      OpStore %89 %109 
                              Uniform f32_4* %110 = OpAccessChain %25 %92 %65 
                                       f32_4 %111 = OpLoad %110 
                                       f32_4 %112 = OpLoad %63 
                                       f32_4 %113 = OpVectorShuffle %112 %112 3 3 3 3 
                                       f32_4 %114 = OpFMul %111 %113 
                                       f32_4 %115 = OpLoad %89 
                                       f32_4 %116 = OpFAdd %114 %115 
                                                      OpStore %63 %116 
                                       f32_4 %122 = OpLoad %63 
                               Output f32_4* %124 = OpAccessChain %121 %48 
                                                      OpStore %124 %122 
                                       f32_4 %127 = OpLoad %126 
                                                      OpStore %125 %127 
                                       f32_2 %132 = OpLoad %131 
                                                      OpStore vs_TEXCOORD0 %132 
                              Uniform f32_4* %135 = OpAccessChain %25 %43 
                                       f32_4 %136 = OpLoad %135 
                                       f32_2 %137 = OpVectorShuffle %136 %136 1 1 
                              Uniform f32_4* %139 = OpAccessChain %25 %138 %43 
                                       f32_4 %140 = OpLoad %139 
                                       f32_2 %141 = OpVectorShuffle %140 %140 0 1 
                                       f32_2 %142 = OpFMul %137 %141 
                                                      OpStore %134 %142 
                              Uniform f32_4* %143 = OpAccessChain %25 %138 %48 
                                       f32_4 %144 = OpLoad %143 
                                       f32_2 %145 = OpVectorShuffle %144 %144 0 1 
                              Uniform f32_4* %146 = OpAccessChain %25 %43 
                                       f32_4 %147 = OpLoad %146 
                                       f32_2 %148 = OpVectorShuffle %147 %147 0 0 
                                       f32_2 %149 = OpFMul %145 %148 
                                       f32_2 %150 = OpLoad %134 
                                       f32_2 %151 = OpFAdd %149 %150 
                                                      OpStore %134 %151 
                                       f32_2 %152 = OpLoad %134 
                                       f32_2 %153 = OpExtInst %1 4 %152 
                                Uniform f32* %155 = OpAccessChain %25 %154 
                                         f32 %156 = OpLoad %155 
                                Uniform f32* %158 = OpAccessChain %25 %157 
                                         f32 %159 = OpLoad %158 
                                       f32_2 %160 = OpCompositeConstruct %156 %159 
                                       f32_2 %161 = OpFMul %153 %160 
                                                      OpStore %134 %161 
                                       f32_4 %162 = OpLoad %63 
                                       f32_2 %163 = OpVectorShuffle %162 %162 3 3 
                                       f32_2 %164 = OpLoad %134 
                                       f32_2 %165 = OpFDiv %163 %164 
                                                      OpStore %134 %165 
                                       f32_2 %168 = OpLoad %134 
                                       f32_2 %169 = OpLoad %134 
                                         f32 %170 = OpDot %168 %169 
                                                      OpStore %167 %170 
                                Uniform f32* %172 = OpAccessChain %25 %171 
                                         f32 %173 = OpLoad %172 
                                Uniform f32* %175 = OpAccessChain %25 %174 
                                         f32 %176 = OpLoad %175 
                                       f32_2 %177 = OpCompositeConstruct %173 %176 
                                       f32_2 %180 = OpFMul %177 %179 
                                       f32_2 %181 = OpLoad %134 
                                       f32_2 %182 = OpFAdd %180 %181 
                                                      OpStore %134 %182 
                                       f32_2 %184 = OpLoad %134 
                                       f32_2 %185 = OpFDiv %179 %184 
                                       f32_4 %186 = OpLoad vs_TEXCOORD2 
                                       f32_4 %187 = OpVectorShuffle %186 %185 0 1 4 5 
                                                      OpStore vs_TEXCOORD2 %187 
                                         f32 %188 = OpLoad %167 
                                         f32 %189 = OpExtInst %1 32 %188 
                                Private f32* %191 = OpAccessChain %134 %190 
                                                      OpStore %191 %189 
                                  Input f32* %195 = OpAccessChain %193 %117 
                                         f32 %196 = OpLoad %195 
                                         f32 %197 = OpExtInst %1 4 %196 
                                Uniform f32* %199 = OpAccessChain %25 %198 
                                         f32 %200 = OpLoad %199 
                                         f32 %201 = OpFMul %197 %200 
                                                      OpStore %192 %201 
                                Uniform f32* %203 = OpAccessChain %25 %202 
                                         f32 %204 = OpLoad %203 
                                         f32 %206 = OpFAdd %204 %205 
                                                      OpStore %167 %206 
                                         f32 %207 = OpLoad %192 
                                         f32 %208 = OpLoad %167 
                                         f32 %209 = OpFMul %207 %208 
                                                      OpStore %192 %209 
                                         f32 %210 = OpLoad %192 
                                Private f32* %211 = OpAccessChain %134 %190 
                                         f32 %212 = OpLoad %211 
                                         f32 %213 = OpFMul %210 %212 
                                                      OpStore %167 %213 
                                Uniform f32* %215 = OpAccessChain %25 %214 
                                         f32 %216 = OpLoad %215 
                                         f32 %217 = OpFNegate %216 
                                         f32 %218 = OpFAdd %217 %205 
                                Private f32* %219 = OpAccessChain %63 %190 
                                                      OpStore %219 %218 
                                         f32 %220 = OpLoad %167 
                                         f32 %221 = OpExtInst %1 4 %220 
                                Private f32* %222 = OpAccessChain %63 %190 
                                         f32 %223 = OpLoad %222 
                                         f32 %224 = OpFMul %221 %223 
                                Private f32* %225 = OpAccessChain %63 %190 
                                                      OpStore %225 %224 
                                Private f32* %226 = OpAccessChain %134 %190 
                                         f32 %227 = OpLoad %226 
                                         f32 %228 = OpLoad %192 
                                         f32 %229 = OpFMul %227 %228 
                                Private f32* %230 = OpAccessChain %63 %190 
                                         f32 %231 = OpLoad %230 
                                         f32 %232 = OpFNegate %231 
                                         f32 %233 = OpFAdd %229 %232 
                                Private f32* %234 = OpAccessChain %134 %190 
                                                      OpStore %234 %233 
                                       f32_3 %237 = OpLoad %236 
                              Uniform f32_4* %238 = OpAccessChain %25 %65 %48 
                                       f32_4 %239 = OpLoad %238 
                                       f32_3 %240 = OpVectorShuffle %239 %239 0 1 2 
                                         f32 %241 = OpDot %237 %240 
                                Private f32* %242 = OpAccessChain %89 %190 
                                                      OpStore %242 %241 
                                       f32_3 %243 = OpLoad %236 
                              Uniform f32_4* %244 = OpAccessChain %25 %65 %43 
                                       f32_4 %245 = OpLoad %244 
                                       f32_3 %246 = OpVectorShuffle %245 %245 0 1 2 
                                         f32 %247 = OpDot %243 %246 
                                Private f32* %248 = OpAccessChain %89 %117 
                                                      OpStore %248 %247 
                                       f32_3 %249 = OpLoad %236 
                              Uniform f32_4* %250 = OpAccessChain %25 %65 %42 
                                       f32_4 %251 = OpLoad %250 
                                       f32_3 %252 = OpVectorShuffle %251 %251 0 1 2 
                                         f32 %253 = OpDot %249 %252 
                                Private f32* %255 = OpAccessChain %89 %254 
                                                      OpStore %255 %253 
                                       f32_4 %256 = OpLoad %89 
                                       f32_3 %257 = OpVectorShuffle %256 %256 0 1 2 
                                       f32_4 %258 = OpLoad %89 
                                       f32_3 %259 = OpVectorShuffle %258 %258 0 1 2 
                                         f32 %260 = OpDot %257 %259 
                                                      OpStore %192 %260 
                                         f32 %261 = OpLoad %192 
                                         f32 %262 = OpExtInst %1 32 %261 
                                                      OpStore %192 %262 
                                         f32 %264 = OpLoad %192 
                                       f32_3 %265 = OpCompositeConstruct %264 %264 %264 
                                       f32_4 %266 = OpLoad %89 
                                       f32_3 %267 = OpVectorShuffle %266 %266 0 1 2 
                                       f32_3 %268 = OpFMul %265 %267 
                                                      OpStore %263 %268 
                                       f32_4 %269 = OpLoad %39 
                                       f32_3 %270 = OpVectorShuffle %269 %269 0 1 2 
                                       f32_4 %271 = OpLoad %39 
                                       f32_3 %272 = OpVectorShuffle %271 %271 0 1 2 
                                         f32 %273 = OpDot %270 %272 
                                                      OpStore %192 %273 
                                         f32 %274 = OpLoad %192 
                                         f32 %275 = OpExtInst %1 32 %274 
                                                      OpStore %192 %275 
                                         f32 %276 = OpLoad %192 
                                       f32_3 %277 = OpCompositeConstruct %276 %276 %276 
                                       f32_4 %278 = OpLoad %39 
                                       f32_3 %279 = OpVectorShuffle %278 %278 0 1 2 
                                       f32_3 %280 = OpFMul %277 %279 
                                       f32_4 %281 = OpLoad %89 
                                       f32_4 %282 = OpVectorShuffle %281 %280 4 5 6 3 
                                                      OpStore %89 %282 
                                       f32_3 %283 = OpLoad %263 
                                       f32_4 %284 = OpLoad %89 
                                       f32_3 %285 = OpVectorShuffle %284 %284 0 1 2 
                                         f32 %286 = OpDot %283 %285 
                                                      OpStore %192 %286 
                                         f32 %287 = OpLoad %192 
                                         f32 %288 = OpExtInst %1 4 %287 
                                Private f32* %289 = OpAccessChain %134 %190 
                                         f32 %290 = OpLoad %289 
                                         f32 %291 = OpFMul %288 %290 
                                Private f32* %292 = OpAccessChain %63 %190 
                                         f32 %293 = OpLoad %292 
                                         f32 %294 = OpFAdd %291 %293 
                                Private f32* %295 = OpAccessChain %134 %190 
                                                      OpStore %295 %294 
                                Uniform f32* %300 = OpAccessChain %25 %138 %65 %299 
                                         f32 %301 = OpLoad %300 
                                        bool %303 = OpFOrdEqual %301 %302 
                                                      OpStore %298 %303 
                                        bool %304 = OpLoad %298 
                                                      OpSelectionMerge %308 None 
                                                      OpBranchConditional %304 %307 %311 
                                             %307 = OpLabel 
                                Private f32* %309 = OpAccessChain %134 %190 
                                         f32 %310 = OpLoad %309 
                                                      OpStore %306 %310 
                                                      OpBranch %308 
                                             %311 = OpLabel 
                                         f32 %312 = OpLoad %167 
                                                      OpStore %306 %312 
                                                      OpBranch %308 
                                             %308 = OpLabel 
                                         f32 %313 = OpLoad %306 
                                Private f32* %314 = OpAccessChain %263 %190 
                                                      OpStore %314 %313 
                                  Input f32* %316 = OpAccessChain %193 %117 
                                         f32 %317 = OpLoad %316 
                                        bool %318 = OpFOrdGreaterThanEqual %302 %317 
                                                      OpStore %315 %318 
                                        bool %319 = OpLoad %315 
                                         f32 %320 = OpSelect %319 %205 %302 
                                Private f32* %321 = OpAccessChain %134 %190 
                                                      OpStore %321 %320 
                                Uniform f32* %323 = OpAccessChain %25 %322 
                                         f32 %324 = OpLoad %323 
                                         f32 %325 = OpFNegate %324 
                                Uniform f32* %327 = OpAccessChain %25 %326 
                                         f32 %328 = OpLoad %327 
                                         f32 %329 = OpFAdd %325 %328 
                                                      OpStore %192 %329 
                                Private f32* %330 = OpAccessChain %134 %190 
                                         f32 %331 = OpLoad %330 
                                         f32 %332 = OpLoad %192 
                                         f32 %333 = OpFMul %331 %332 
                                Uniform f32* %334 = OpAccessChain %25 %322 
                                         f32 %335 = OpLoad %334 
                                         f32 %336 = OpFAdd %333 %335 
                                Private f32* %337 = OpAccessChain %134 %190 
                                                      OpStore %337 %336 
                                Private f32* %338 = OpAccessChain %134 %190 
                                         f32 %339 = OpLoad %338 
                                         f32 %340 = OpFMul %339 %178 
                                Uniform f32* %342 = OpAccessChain %25 %341 
                                         f32 %343 = OpLoad %342 
                                         f32 %344 = OpFAdd %340 %343 
                                Private f32* %345 = OpAccessChain %134 %190 
                                                      OpStore %345 %344 
                                Private f32* %346 = OpAccessChain %134 %190 
                                         f32 %347 = OpLoad %346 
                                Uniform f32* %349 = OpAccessChain %25 %348 
                                         f32 %350 = OpLoad %349 
                                         f32 %351 = OpFMul %347 %350 
                                Private f32* %352 = OpAccessChain %134 %190 
                                                      OpStore %352 %351 
                                Private f32* %353 = OpAccessChain %134 %190 
                                         f32 %354 = OpLoad %353 
                                         f32 %356 = OpFMul %354 %355 
                                Private f32* %357 = OpAccessChain %263 %254 
                                                      OpStore %357 %356 
                                       f32_3 %359 = OpLoad %263 
                                       f32_2 %360 = OpVectorShuffle %359 %359 0 2 
                                       f32_4 %361 = OpLoad vs_TEXCOORD1 
                                       f32_4 %362 = OpVectorShuffle %361 %360 0 4 2 5 
                                                      OpStore vs_TEXCOORD1 %362 
                                Private f32* %363 = OpAccessChain %263 %190 
                                         f32 %364 = OpLoad %363 
                                         f32 %365 = OpFDiv %355 %364 
                                                      OpStore %192 %365 
                                Uniform f32* %367 = OpAccessChain %25 %366 
                                         f32 %368 = OpLoad %367 
                                         f32 %369 = OpFNegate %368 
                                Uniform f32* %370 = OpAccessChain %25 %348 
                                         f32 %371 = OpLoad %370 
                                         f32 %372 = OpFMul %369 %371 
                                         f32 %373 = OpFAdd %372 %205 
                                                      OpStore %167 %373 
                                Uniform f32* %375 = OpAccessChain %25 %374 
                                         f32 %376 = OpLoad %375 
                                         f32 %377 = OpFNegate %376 
                                Uniform f32* %378 = OpAccessChain %25 %348 
                                         f32 %379 = OpLoad %378 
                                         f32 %380 = OpFMul %377 %379 
                                         f32 %381 = OpLoad %167 
                                         f32 %382 = OpFAdd %380 %381 
                                                      OpStore %167 %382 
                                         f32 %383 = OpLoad %167 
                                         f32 %384 = OpFMul %383 %355 
                                         f32 %385 = OpLoad %192 
                                         f32 %386 = OpFNegate %385 
                                         f32 %387 = OpFAdd %384 %386 
                                                      OpStore %167 %387 
                                Private f32* %388 = OpAccessChain %134 %190 
                                         f32 %389 = OpLoad %388 
                                         f32 %390 = OpFNegate %389 
                                         f32 %391 = OpFMul %390 %355 
                                         f32 %392 = OpLoad %167 
                                         f32 %393 = OpFAdd %391 %392 
                                 Output f32* %395 = OpAccessChain vs_TEXCOORD1 %190 
                                                      OpStore %395 %393 
                                Private f32* %396 = OpAccessChain %134 %190 
                                         f32 %397 = OpLoad %396 
                                         f32 %398 = OpFNegate %397 
                                         f32 %399 = OpFMul %398 %355 
                                         f32 %400 = OpFAdd %399 %355 
                                Private f32* %401 = OpAccessChain %134 %190 
                                                      OpStore %401 %400 
                                         f32 %402 = OpLoad %192 
                                Private f32* %403 = OpAccessChain %134 %190 
                                         f32 %404 = OpLoad %403 
                                         f32 %405 = OpFAdd %402 %404 
                                 Output f32* %406 = OpAccessChain vs_TEXCOORD1 %254 
                                                      OpStore %406 %405 
                              Uniform f32_4* %408 = OpAccessChain %25 %407 
                                       f32_4 %409 = OpLoad %408 
                                       f32_4 %412 = OpExtInst %1 40 %409 %411 
                                                      OpStore %63 %412 
                                       f32_4 %413 = OpLoad %63 
                                       f32_4 %416 = OpExtInst %1 37 %413 %415 
                                                      OpStore %63 %416 
                                       f32_3 %417 = OpLoad %9 
                                       f32_2 %418 = OpVectorShuffle %417 %417 0 1 
                                       f32_2 %421 = OpFMul %418 %420 
                                       f32_4 %422 = OpLoad %63 
                                       f32_2 %423 = OpVectorShuffle %422 %422 0 1 
                                       f32_2 %424 = OpFNegate %423 
                                       f32_2 %425 = OpFAdd %421 %424 
                                       f32_3 %426 = OpLoad %9 
                                       f32_3 %427 = OpVectorShuffle %426 %425 3 4 2 
                                                      OpStore %9 %427 
                                       f32_4 %428 = OpLoad %63 
                                       f32_2 %429 = OpVectorShuffle %428 %428 2 3 
                                       f32_2 %430 = OpFNegate %429 
                                       f32_3 %431 = OpLoad %9 
                                       f32_2 %432 = OpVectorShuffle %431 %431 0 1 
                                       f32_2 %433 = OpFAdd %430 %432 
                                       f32_4 %434 = OpLoad vs_TEXCOORD2 
                                       f32_4 %435 = OpVectorShuffle %434 %433 4 5 2 3 
                                                      OpStore vs_TEXCOORD2 %435 
                                       f32_4 %436 = OpLoad %39 
                                       f32_3 %437 = OpVectorShuffle %436 %436 1 1 1 
                              Uniform f32_4* %439 = OpAccessChain %25 %438 %43 
                                       f32_4 %440 = OpLoad %439 
                                       f32_3 %441 = OpVectorShuffle %440 %440 0 1 2 
                                       f32_3 %442 = OpFMul %437 %441 
                                                      OpStore %9 %442 
                              Uniform f32_4* %443 = OpAccessChain %25 %438 %48 
                                       f32_4 %444 = OpLoad %443 
                                       f32_3 %445 = OpVectorShuffle %444 %444 0 1 2 
                                       f32_4 %446 = OpLoad %39 
                                       f32_3 %447 = OpVectorShuffle %446 %446 0 0 0 
                                       f32_3 %448 = OpFMul %445 %447 
                                       f32_3 %449 = OpLoad %9 
                                       f32_3 %450 = OpFAdd %448 %449 
                                                      OpStore %9 %450 
                              Uniform f32_4* %453 = OpAccessChain %25 %438 %42 
                                       f32_4 %454 = OpLoad %453 
                                       f32_3 %455 = OpVectorShuffle %454 %454 0 1 2 
                                       f32_4 %456 = OpLoad %39 
                                       f32_3 %457 = OpVectorShuffle %456 %456 2 2 2 
                                       f32_3 %458 = OpFMul %455 %457 
                                       f32_3 %459 = OpLoad %9 
                                       f32_3 %460 = OpFAdd %458 %459 
                                                      OpStore vs_TEXCOORD3 %460 
                                  Input f32* %461 = OpAccessChain %193 %190 
                                         f32 %462 = OpLoad %461 
                                         f32 %464 = OpFMul %462 %463 
                                Private f32* %465 = OpAccessChain %9 %190 
                                                      OpStore %465 %464 
                                Private f32* %466 = OpAccessChain %9 %190 
                                         f32 %467 = OpLoad %466 
                                         f32 %468 = OpExtInst %1 8 %467 
                                Private f32* %469 = OpAccessChain %134 %190 
                                                      OpStore %469 %468 
                                Private f32* %470 = OpAccessChain %134 %190 
                                         f32 %471 = OpLoad %470 
                                         f32 %472 = OpFNegate %471 
                                         f32 %474 = OpFMul %472 %473 
                                  Input f32* %475 = OpAccessChain %193 %190 
                                         f32 %476 = OpLoad %475 
                                         f32 %477 = OpFAdd %474 %476 
                                Private f32* %478 = OpAccessChain %134 %117 
                                                      OpStore %478 %477 
                                       f32_2 %479 = OpLoad %134 
                                       f32_2 %482 = OpFMul %479 %481 
                                       f32_3 %483 = OpLoad %9 
                                       f32_3 %484 = OpVectorShuffle %483 %482 3 4 2 
                                                      OpStore %9 %484 
                                       f32_3 %486 = OpLoad %9 
                                       f32_2 %487 = OpVectorShuffle %486 %486 0 1 
                              Uniform f32_4* %489 = OpAccessChain %25 %488 
                                       f32_4 %490 = OpLoad %489 
                                       f32_2 %491 = OpVectorShuffle %490 %490 0 1 
                                       f32_2 %492 = OpFMul %487 %491 
                              Uniform f32_4* %493 = OpAccessChain %25 %488 
                                       f32_4 %494 = OpLoad %493 
                                       f32_2 %495 = OpVectorShuffle %494 %494 2 3 
                                       f32_2 %496 = OpFAdd %492 %495 
                                       f32_4 %497 = OpLoad vs_TEXCOORD5 
                                       f32_4 %498 = OpVectorShuffle %497 %496 4 5 2 3 
                                                      OpStore vs_TEXCOORD5 %498 
                                       f32_3 %499 = OpLoad %9 
                                       f32_2 %500 = OpVectorShuffle %499 %499 0 1 
                              Uniform f32_4* %502 = OpAccessChain %25 %501 
                                       f32_4 %503 = OpLoad %502 
                                       f32_2 %504 = OpVectorShuffle %503 %503 0 1 
                                       f32_2 %505 = OpFMul %500 %504 
                              Uniform f32_4* %506 = OpAccessChain %25 %501 
                                       f32_4 %507 = OpLoad %506 
                                       f32_2 %508 = OpVectorShuffle %507 %507 2 3 
                                       f32_2 %509 = OpFAdd %505 %508 
                                       f32_4 %510 = OpLoad vs_TEXCOORD5 
                                       f32_4 %511 = OpVectorShuffle %510 %509 0 1 4 5 
                                                      OpStore vs_TEXCOORD5 %511 
                                 Output f32* %512 = OpAccessChain %121 %48 %117 
                                         f32 %513 = OpLoad %512 
                                         f32 %514 = OpFNegate %513 
                                 Output f32* %515 = OpAccessChain %121 %48 %117 
                                                      OpStore %515 %514 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 332
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %22 %35 %128 %149 %286 %316 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpDecorate %9 RelaxedPrecision 
                                                      OpDecorate %12 RelaxedPrecision 
                                                      OpDecorate %12 DescriptorSet 12 
                                                      OpDecorate %12 Binding 12 
                                                      OpDecorate %13 RelaxedPrecision 
                                                      OpDecorate %16 RelaxedPrecision 
                                                      OpDecorate %16 DescriptorSet 16 
                                                      OpDecorate %16 Binding 16 
                                                      OpDecorate %17 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD0 Location 22 
                                                      OpDecorate %27 RelaxedPrecision 
                                                      OpDecorate %33 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD1 Location 35 
                                                      OpDecorate %45 RelaxedPrecision 
                                                      OpDecorate %46 RelaxedPrecision 
                                                      OpMemberDecorate %69 0 Offset 69 
                                                      OpMemberDecorate %69 1 Offset 69 
                                                      OpMemberDecorate %69 2 Offset 69 
                                                      OpMemberDecorate %69 3 RelaxedPrecision 
                                                      OpMemberDecorate %69 3 Offset 69 
                                                      OpMemberDecorate %69 4 Offset 69 
                                                      OpMemberDecorate %69 5 Offset 69 
                                                      OpMemberDecorate %69 6 Offset 69 
                                                      OpMemberDecorate %69 7 RelaxedPrecision 
                                                      OpMemberDecorate %69 7 Offset 69 
                                                      OpMemberDecorate %69 8 Offset 69 
                                                      OpMemberDecorate %69 9 Offset 69 
                                                      OpMemberDecorate %69 10 Offset 69 
                                                      OpDecorate %69 Block 
                                                      OpDecorate %71 DescriptorSet 71 
                                                      OpDecorate %71 Binding 71 
                                                      OpDecorate %85 RelaxedPrecision 
                                                      OpDecorate %89 RelaxedPrecision 
                                                      OpDecorate %93 RelaxedPrecision 
                                                      OpDecorate %94 RelaxedPrecision 
                                                      OpDecorate %95 RelaxedPrecision 
                                                      OpDecorate %101 RelaxedPrecision 
                                                      OpDecorate %103 RelaxedPrecision 
                                                      OpDecorate %104 RelaxedPrecision 
                                                      OpDecorate %110 RelaxedPrecision 
                                                      OpDecorate %111 RelaxedPrecision 
                                                      OpDecorate %113 RelaxedPrecision 
                                                      OpDecorate %114 RelaxedPrecision 
                                                      OpDecorate %115 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD5 Location 128 
                                                      OpDecorate %134 RelaxedPrecision 
                                                      OpDecorate %134 DescriptorSet 134 
                                                      OpDecorate %134 Binding 134 
                                                      OpDecorate %135 RelaxedPrecision 
                                                      OpDecorate %136 RelaxedPrecision 
                                                      OpDecorate %136 DescriptorSet 136 
                                                      OpDecorate %136 Binding 136 
                                                      OpDecorate %137 RelaxedPrecision 
                                                      OpDecorate %143 RelaxedPrecision 
                                                      OpDecorate %146 RelaxedPrecision 
                                                      OpDecorate %147 RelaxedPrecision 
                                                      OpDecorate %148 RelaxedPrecision 
                                                      OpDecorate %149 RelaxedPrecision 
                                                      OpDecorate %149 Location 149 
                                                      OpDecorate %150 RelaxedPrecision 
                                                      OpDecorate %151 RelaxedPrecision 
                                                      OpDecorate %154 RelaxedPrecision 
                                                      OpDecorate %155 RelaxedPrecision 
                                                      OpDecorate %156 RelaxedPrecision 
                                                      OpDecorate %172 RelaxedPrecision 
                                                      OpDecorate %173 RelaxedPrecision 
                                                      OpDecorate %173 DescriptorSet 173 
                                                      OpDecorate %173 Binding 173 
                                                      OpDecorate %174 RelaxedPrecision 
                                                      OpDecorate %175 RelaxedPrecision 
                                                      OpDecorate %175 DescriptorSet 175 
                                                      OpDecorate %175 Binding 175 
                                                      OpDecorate %176 RelaxedPrecision 
                                                      OpDecorate %181 RelaxedPrecision 
                                                      OpDecorate %182 RelaxedPrecision 
                                                      OpDecorate %183 RelaxedPrecision 
                                                      OpDecorate %184 RelaxedPrecision 
                                                      OpDecorate %188 RelaxedPrecision 
                                                      OpDecorate %190 RelaxedPrecision 
                                                      OpDecorate %191 RelaxedPrecision 
                                                      OpDecorate %197 RelaxedPrecision 
                                                      OpDecorate %203 RelaxedPrecision 
                                                      OpDecorate %204 RelaxedPrecision 
                                                      OpDecorate %209 RelaxedPrecision 
                                                      OpDecorate %211 RelaxedPrecision 
                                                      OpDecorate %212 RelaxedPrecision 
                                                      OpDecorate %218 RelaxedPrecision 
                                                      OpDecorate %219 RelaxedPrecision 
                                                      OpDecorate %220 RelaxedPrecision 
                                                      OpDecorate %221 RelaxedPrecision 
                                                      OpDecorate %222 RelaxedPrecision 
                                                      OpDecorate %227 RelaxedPrecision 
                                                      OpDecorate %228 RelaxedPrecision 
                                                      OpDecorate %233 RelaxedPrecision 
                                                      OpDecorate %235 RelaxedPrecision 
                                                      OpDecorate %236 RelaxedPrecision 
                                                      OpDecorate %238 RelaxedPrecision 
                                                      OpDecorate %239 RelaxedPrecision 
                                                      OpDecorate %262 RelaxedPrecision 
                                                      OpDecorate %264 RelaxedPrecision 
                                                      OpDecorate %265 RelaxedPrecision 
                                                      OpDecorate %266 RelaxedPrecision 
                                                      OpDecorate %267 RelaxedPrecision 
                                                      OpDecorate %268 RelaxedPrecision 
                                                      OpDecorate %269 RelaxedPrecision 
                                                      OpDecorate %270 RelaxedPrecision 
                                                      OpDecorate %271 RelaxedPrecision 
                                                      OpDecorate %272 RelaxedPrecision 
                                                      OpDecorate %273 RelaxedPrecision 
                                                      OpDecorate %274 RelaxedPrecision 
                                                      OpDecorate %275 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD2 Location 286 
                                                      OpDecorate %306 RelaxedPrecision 
                                                      OpDecorate %307 RelaxedPrecision 
                                                      OpDecorate %308 RelaxedPrecision 
                                                      OpDecorate %310 RelaxedPrecision 
                                                      OpDecorate %311 RelaxedPrecision 
                                                      OpDecorate %312 RelaxedPrecision 
                                                      OpDecorate %313 RelaxedPrecision 
                                                      OpDecorate %314 RelaxedPrecision 
                                                      OpDecorate %316 RelaxedPrecision 
                                                      OpDecorate %316 Location 316 
                                                      OpDecorate %317 RelaxedPrecision 
                                                      OpDecorate %318 RelaxedPrecision 
                                                      OpDecorate %319 RelaxedPrecision 
                                                      OpDecorate %320 RelaxedPrecision 
                                                      OpDecorate %322 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypePointer UniformConstant %10 
         UniformConstant read_only Texture2D* %12 = OpVariable UniformConstant 
                                              %14 = OpTypeSampler 
                                              %15 = OpTypePointer UniformConstant %14 
                     UniformConstant sampler* %16 = OpVariable UniformConstant 
                                              %18 = OpTypeSampledImage %10 
                                              %20 = OpTypeVector %6 2 
                                              %21 = OpTypePointer Input %20 
                        Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                              %25 = OpTypeInt 32 0 
                                          u32 %26 = OpConstant 3 
                                          u32 %28 = OpConstant 0 
                                              %29 = OpTypePointer Private %6 
                                 Private f32* %31 = OpVariable Private 
                                              %34 = OpTypePointer Input %7 
                        Input f32_4* vs_TEXCOORD1 = OpVariable Input 
                                              %36 = OpTypePointer Input %6 
                                              %41 = OpTypeVector %6 3 
                                              %42 = OpTypePointer Private %41 
                               Private f32_3* %43 = OpVariable Private 
                                          u32 %47 = OpConstant 2 
                                              %52 = OpTypeBool 
                                              %53 = OpTypePointer Private %52 
                                Private bool* %54 = OpVariable Private 
                                          f32 %56 = OpConstant 3.674022E-40 
                                              %59 = OpTypeInt 32 1 
                                          i32 %60 = OpConstant 0 
                                          i32 %61 = OpConstant 1 
                                          i32 %63 = OpConstant -1 
                                              %69 = OpTypeStruct %7 %6 %6 %7 %6 %6 %6 %7 %6 %6 %7 
                                              %70 = OpTypePointer Uniform %69 
Uniform struct {f32_4; f32; f32; f32_4; f32; f32; f32; f32_4; f32; f32; f32_4;}* %71 = OpVariable Uniform 
                                          i32 %72 = OpConstant 8 
                                              %73 = OpTypePointer Uniform %6 
                                          i32 %76 = OpConstant 9 
                                          u32 %81 = OpConstant 1 
                                 Private f32* %85 = OpVariable Private 
                                          f32 %87 = OpConstant 3.674022E-40 
                                 Private f32* %89 = OpVariable Private 
                                          f32 %91 = OpConstant 3.674022E-40 
                                 Private f32* %95 = OpVariable Private 
                                         i32 %116 = OpConstant 5 
                                         i32 %119 = OpConstant 6 
                                             %123 = OpTypePointer Uniform %7 
                        Input f32_4* vs_TEXCOORD5 = OpVariable Input 
        UniformConstant read_only Texture2D* %134 = OpVariable UniformConstant 
                    UniformConstant sampler* %136 = OpVariable UniformConstant 
                              Private f32_4* %142 = OpVariable Private 
                                         i32 %144 = OpConstant 7 
                              Private f32_3* %148 = OpVariable Private 
                                Input f32_4* %149 = OpVariable Input 
                                         i32 %152 = OpConstant 3 
                                         i32 %159 = OpConstant 2 
                              Private f32_4* %172 = OpVariable Private 
        UniformConstant read_only Texture2D* %173 = OpVariable UniformConstant 
                    UniformConstant sampler* %175 = OpVariable UniformConstant 
                                             %185 = OpTypePointer Private %20 
                              Private f32_2* %186 = OpVariable Private 
                              Private f32_4* %197 = OpVariable Private 
                              Private f32_4* %222 = OpVariable Private 
                                         i32 %241 = OpConstant 4 
                                Private f32* %248 = OpVariable Private 
                                         i32 %276 = OpConstant 10 
                        Input f32_4* vs_TEXCOORD2 = OpVariable Input 
                                         f32 %309 = OpConstant 3.674022E-40 
                                             %315 = OpTypePointer Output %7 
                               Output f32_4* %316 = OpVariable Output 
                               Private bool* %321 = OpVariable Private 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                          read_only Texture2D %13 = OpLoad %12 
                                      sampler %17 = OpLoad %16 
                   read_only Texture2DSampled %19 = OpSampledImage %13 %17 
                                        f32_2 %23 = OpLoad vs_TEXCOORD0 
                                        f32_4 %24 = OpImageSampleImplicitLod %19 %23 
                                          f32 %27 = OpCompositeExtract %24 3 
                                 Private f32* %30 = OpAccessChain %9 %28 
                                                      OpStore %30 %27 
                                 Private f32* %32 = OpAccessChain %9 %28 
                                          f32 %33 = OpLoad %32 
                                   Input f32* %37 = OpAccessChain vs_TEXCOORD1 %28 
                                          f32 %38 = OpLoad %37 
                                          f32 %39 = OpFNegate %38 
                                          f32 %40 = OpFAdd %33 %39 
                                                      OpStore %31 %40 
                                 Private f32* %44 = OpAccessChain %9 %28 
                                          f32 %45 = OpLoad %44 
                                          f32 %46 = OpFNegate %45 
                                   Input f32* %48 = OpAccessChain vs_TEXCOORD1 %47 
                                          f32 %49 = OpLoad %48 
                                          f32 %50 = OpFAdd %46 %49 
                                 Private f32* %51 = OpAccessChain %43 %28 
                                                      OpStore %51 %50 
                                          f32 %55 = OpLoad %31 
                                         bool %57 = OpFOrdLessThan %55 %56 
                                                      OpStore %54 %57 
                                         bool %58 = OpLoad %54 
                                          i32 %62 = OpSelect %58 %61 %60 
                                          i32 %64 = OpIMul %62 %63 
                                         bool %65 = OpINotEqual %64 %60 
                                                      OpSelectionMerge %67 None 
                                                      OpBranchConditional %65 %66 %67 
                                              %66 = OpLabel 
                                                      OpKill
                                              %67 = OpLabel 
                                 Uniform f32* %74 = OpAccessChain %71 %72 
                                          f32 %75 = OpLoad %74 
                                 Uniform f32* %77 = OpAccessChain %71 %76 
                                          f32 %78 = OpLoad %77 
                                          f32 %79 = OpFMul %75 %78 
                                                      OpStore %31 %79 
                                          f32 %80 = OpLoad %31 
                                   Input f32* %82 = OpAccessChain vs_TEXCOORD1 %81 
                                          f32 %83 = OpLoad %82 
                                          f32 %84 = OpFMul %80 %83 
                                                      OpStore %31 %84 
                                          f32 %86 = OpLoad %31 
                                          f32 %88 = OpExtInst %1 37 %86 %87 
                                                      OpStore %85 %88 
                                          f32 %90 = OpLoad %31 
                                          f32 %92 = OpFMul %90 %91 
                                                      OpStore %89 %92 
                                          f32 %93 = OpLoad %85 
                                          f32 %94 = OpExtInst %1 31 %93 
                                                      OpStore %85 %94 
                                 Private f32* %96 = OpAccessChain %43 %28 
                                          f32 %97 = OpLoad %96 
                                   Input f32* %98 = OpAccessChain vs_TEXCOORD1 %81 
                                          f32 %99 = OpLoad %98 
                                         f32 %100 = OpFMul %97 %99 
                                         f32 %101 = OpLoad %89 
                                         f32 %102 = OpFAdd %100 %101 
                                                      OpStore %95 %102 
                                         f32 %103 = OpLoad %95 
                                         f32 %104 = OpExtInst %1 43 %103 %56 %87 
                                                      OpStore %95 %104 
                                Private f32* %105 = OpAccessChain %43 %28 
                                         f32 %106 = OpLoad %105 
                                  Input f32* %107 = OpAccessChain vs_TEXCOORD1 %81 
                                         f32 %108 = OpLoad %107 
                                         f32 %109 = OpFMul %106 %108 
                                         f32 %110 = OpLoad %89 
                                         f32 %111 = OpFNegate %110 
                                         f32 %112 = OpFAdd %109 %111 
                                                      OpStore %89 %112 
                                         f32 %113 = OpLoad %85 
                                         f32 %114 = OpLoad %95 
                                         f32 %115 = OpFMul %113 %114 
                                                      OpStore %85 %115 
                                Uniform f32* %117 = OpAccessChain %71 %116 
                                         f32 %118 = OpLoad %117 
                                Uniform f32* %120 = OpAccessChain %71 %119 
                                         f32 %121 = OpLoad %120 
                                       f32_2 %122 = OpCompositeConstruct %118 %121 
                              Uniform f32_4* %124 = OpAccessChain %71 %60 
                                       f32_4 %125 = OpLoad %124 
                                       f32_2 %126 = OpVectorShuffle %125 %125 1 1 
                                       f32_2 %127 = OpFMul %122 %126 
                                       f32_4 %129 = OpLoad vs_TEXCOORD5 
                                       f32_2 %130 = OpVectorShuffle %129 %129 2 3 
                                       f32_2 %131 = OpFAdd %127 %130 
                                       f32_3 %132 = OpLoad %43 
                                       f32_3 %133 = OpVectorShuffle %132 %131 3 4 2 
                                                      OpStore %43 %133 
                         read_only Texture2D %135 = OpLoad %134 
                                     sampler %137 = OpLoad %136 
                  read_only Texture2DSampled %138 = OpSampledImage %135 %137 
                                       f32_3 %139 = OpLoad %43 
                                       f32_2 %140 = OpVectorShuffle %139 %139 0 1 
                                       f32_4 %141 = OpImageSampleImplicitLod %138 %140 
                                                      OpStore %9 %141 
                                       f32_4 %143 = OpLoad %9 
                              Uniform f32_4* %145 = OpAccessChain %71 %144 
                                       f32_4 %146 = OpLoad %145 
                                       f32_4 %147 = OpFMul %143 %146 
                                                      OpStore %142 %147 
                                       f32_4 %150 = OpLoad %149 
                                       f32_3 %151 = OpVectorShuffle %150 %150 0 1 2 
                              Uniform f32_4* %153 = OpAccessChain %71 %152 
                                       f32_4 %154 = OpLoad %153 
                                       f32_3 %155 = OpVectorShuffle %154 %154 0 1 2 
                                       f32_3 %156 = OpFMul %151 %155 
                                                      OpStore %148 %156 
                                Uniform f32* %157 = OpAccessChain %71 %61 
                                         f32 %158 = OpLoad %157 
                                Uniform f32* %160 = OpAccessChain %71 %159 
                                         f32 %161 = OpLoad %160 
                                       f32_2 %162 = OpCompositeConstruct %158 %161 
                              Uniform f32_4* %163 = OpAccessChain %71 %60 
                                       f32_4 %164 = OpLoad %163 
                                       f32_2 %165 = OpVectorShuffle %164 %164 1 1 
                                       f32_2 %166 = OpFMul %162 %165 
                                       f32_4 %167 = OpLoad vs_TEXCOORD5 
                                       f32_2 %168 = OpVectorShuffle %167 %167 0 1 
                                       f32_2 %169 = OpFAdd %166 %168 
                                       f32_3 %170 = OpLoad %43 
                                       f32_3 %171 = OpVectorShuffle %170 %169 3 4 2 
                                                      OpStore %43 %171 
                         read_only Texture2D %174 = OpLoad %173 
                                     sampler %176 = OpLoad %175 
                  read_only Texture2DSampled %177 = OpSampledImage %174 %176 
                                       f32_3 %178 = OpLoad %43 
                                       f32_2 %179 = OpVectorShuffle %178 %178 0 1 
                                       f32_4 %180 = OpImageSampleImplicitLod %177 %179 
                                                      OpStore %172 %180 
                                       f32_3 %181 = OpLoad %148 
                                       f32_4 %182 = OpLoad %172 
                                       f32_3 %183 = OpVectorShuffle %182 %182 0 1 2 
                                       f32_3 %184 = OpFMul %181 %183 
                                                      OpStore %43 %184 
                                Private f32* %187 = OpAccessChain %172 %26 
                                         f32 %188 = OpLoad %187 
                                Uniform f32* %189 = OpAccessChain %71 %152 %26 
                                         f32 %190 = OpLoad %189 
                                         f32 %191 = OpFMul %188 %190 
                                Private f32* %192 = OpAccessChain %186 %28 
                                                      OpStore %192 %191 
                                       f32_3 %193 = OpLoad %43 
                                       f32_2 %194 = OpLoad %186 
                                       f32_3 %195 = OpVectorShuffle %194 %194 0 0 0 
                                       f32_3 %196 = OpFMul %193 %195 
                                                      OpStore %148 %196 
                                       f32_4 %198 = OpLoad %142 
                                       f32_3 %199 = OpVectorShuffle %198 %198 0 1 2 
                                       f32_4 %200 = OpLoad %142 
                                       f32_3 %201 = OpVectorShuffle %200 %200 3 3 3 
                                       f32_3 %202 = OpFMul %199 %201 
                                       f32_3 %203 = OpLoad %148 
                                       f32_3 %204 = OpFNegate %203 
                                       f32_3 %205 = OpFAdd %202 %204 
                                       f32_4 %206 = OpLoad %197 
                                       f32_4 %207 = OpVectorShuffle %206 %205 4 5 6 3 
                                                      OpStore %197 %207 
                                Uniform f32* %208 = OpAccessChain %71 %144 %26 
                                         f32 %209 = OpLoad %208 
                                Private f32* %210 = OpAccessChain %9 %26 
                                         f32 %211 = OpLoad %210 
                                         f32 %212 = OpFMul %209 %211 
                                Private f32* %213 = OpAccessChain %186 %28 
                                         f32 %214 = OpLoad %213 
                                         f32 %215 = OpFNegate %214 
                                         f32 %216 = OpFAdd %212 %215 
                                Private f32* %217 = OpAccessChain %197 %26 
                                                      OpStore %217 %216 
                                         f32 %218 = OpLoad %85 
                                       f32_4 %219 = OpCompositeConstruct %218 %218 %218 %218 
                                       f32_4 %220 = OpLoad %197 
                                       f32_4 %221 = OpFMul %219 %220 
                                                      OpStore %197 %221 
                                       f32_3 %223 = OpLoad %43 
                                       f32_2 %224 = OpLoad %186 
                                       f32_3 %225 = OpVectorShuffle %224 %224 0 0 0 
                                       f32_3 %226 = OpFMul %223 %225 
                                       f32_4 %227 = OpLoad %197 
                                       f32_3 %228 = OpVectorShuffle %227 %227 0 1 2 
                                       f32_3 %229 = OpFAdd %226 %228 
                                       f32_4 %230 = OpLoad %222 
                                       f32_4 %231 = OpVectorShuffle %230 %229 4 5 6 3 
                                                      OpStore %222 %231 
                                Uniform f32* %232 = OpAccessChain %71 %152 %26 
                                         f32 %233 = OpLoad %232 
                                Private f32* %234 = OpAccessChain %172 %26 
                                         f32 %235 = OpLoad %234 
                                         f32 %236 = OpFMul %233 %235 
                                Private f32* %237 = OpAccessChain %197 %26 
                                         f32 %238 = OpLoad %237 
                                         f32 %239 = OpFAdd %236 %238 
                                Private f32* %240 = OpAccessChain %222 %26 
                                                      OpStore %240 %239 
                                Uniform f32* %242 = OpAccessChain %71 %241 
                                         f32 %243 = OpLoad %242 
                                Uniform f32* %244 = OpAccessChain %71 %76 
                                         f32 %245 = OpLoad %244 
                                         f32 %246 = OpFMul %243 %245 
                                Private f32* %247 = OpAccessChain %186 %28 
                                                      OpStore %247 %246 
                                Private f32* %249 = OpAccessChain %186 %28 
                                         f32 %250 = OpLoad %249 
                                  Input f32* %251 = OpAccessChain vs_TEXCOORD1 %81 
                                         f32 %252 = OpLoad %251 
                                         f32 %253 = OpFMul %250 %252 
                                                      OpStore %248 %253 
                                Private f32* %254 = OpAccessChain %186 %28 
                                         f32 %255 = OpLoad %254 
                                  Input f32* %256 = OpAccessChain vs_TEXCOORD1 %81 
                                         f32 %257 = OpLoad %256 
                                         f32 %258 = OpFMul %255 %257 
                                         f32 %259 = OpFAdd %258 %87 
                                                      OpStore %85 %259 
                                         f32 %260 = OpLoad %248 
                                         f32 %261 = OpFMul %260 %91 
                                         f32 %262 = OpLoad %89 
                                         f32 %263 = OpFAdd %261 %262 
                                                      OpStore %89 %263 
                                         f32 %264 = OpLoad %89 
                                         f32 %265 = OpLoad %85 
                                         f32 %266 = OpFDiv %264 %265 
                                                      OpStore %85 %266 
                                         f32 %267 = OpLoad %85 
                                         f32 %268 = OpExtInst %1 43 %267 %56 %87 
                                                      OpStore %85 %268 
                                         f32 %269 = OpLoad %85 
                                         f32 %270 = OpFNegate %269 
                                         f32 %271 = OpFAdd %270 %87 
                                                      OpStore %85 %271 
                                       f32_4 %272 = OpLoad %222 
                                         f32 %273 = OpLoad %85 
                                       f32_4 %274 = OpCompositeConstruct %273 %273 %273 %273 
                                       f32_4 %275 = OpFMul %272 %274 
                                                      OpStore %222 %275 
                              Uniform f32_4* %277 = OpAccessChain %71 %276 
                                       f32_4 %278 = OpLoad %277 
                                       f32_2 %279 = OpVectorShuffle %278 %278 0 1 
                                       f32_2 %280 = OpFNegate %279 
                              Uniform f32_4* %281 = OpAccessChain %71 %276 
                                       f32_4 %282 = OpLoad %281 
                                       f32_2 %283 = OpVectorShuffle %282 %282 2 3 
                                       f32_2 %284 = OpFAdd %280 %283 
                                                      OpStore %186 %284 
                                       f32_2 %285 = OpLoad %186 
                                       f32_4 %287 = OpLoad vs_TEXCOORD2 
                                       f32_2 %288 = OpVectorShuffle %287 %287 0 1 
                                       f32_2 %289 = OpExtInst %1 4 %288 
                                       f32_2 %290 = OpFNegate %289 
                                       f32_2 %291 = OpFAdd %285 %290 
                                                      OpStore %186 %291 
                                       f32_2 %292 = OpLoad %186 
                                       f32_4 %293 = OpLoad vs_TEXCOORD2 
                                       f32_2 %294 = OpVectorShuffle %293 %293 2 3 
                                       f32_2 %295 = OpFMul %292 %294 
                                                      OpStore %186 %295 
                                       f32_2 %296 = OpLoad %186 
                                       f32_2 %297 = OpCompositeConstruct %56 %56 
                                       f32_2 %298 = OpCompositeConstruct %87 %87 
                                       f32_2 %299 = OpExtInst %1 43 %296 %297 %298 
                                                      OpStore %186 %299 
                                Private f32* %300 = OpAccessChain %186 %81 
                                         f32 %301 = OpLoad %300 
                                Private f32* %302 = OpAccessChain %186 %28 
                                         f32 %303 = OpLoad %302 
                                         f32 %304 = OpFMul %301 %303 
                                                      OpStore %85 %304 
                                Private f32* %305 = OpAccessChain %222 %26 
                                         f32 %306 = OpLoad %305 
                                         f32 %307 = OpLoad %85 
                                         f32 %308 = OpFMul %306 %307 
                                         f32 %310 = OpFAdd %308 %309 
                                                      OpStore %89 %310 
                                       f32_4 %311 = OpLoad %222 
                                         f32 %312 = OpLoad %85 
                                       f32_4 %313 = OpCompositeConstruct %312 %312 %312 %312 
                                       f32_4 %314 = OpFMul %311 %313 
                                                      OpStore %222 %314 
                                       f32_4 %317 = OpLoad %222 
                                       f32_4 %318 = OpLoad %149 
                                       f32_4 %319 = OpVectorShuffle %318 %318 3 3 3 3 
                                       f32_4 %320 = OpFMul %317 %319 
                                                      OpStore %316 %320 
                                         f32 %322 = OpLoad %89 
                                        bool %323 = OpFOrdLessThan %322 %56 
                                                      OpStore %321 %323 
                                        bool %324 = OpLoad %321 
                                         i32 %325 = OpSelect %324 %61 %60 
                                         i32 %326 = OpIMul %325 %63 
                                        bool %327 = OpINotEqual %326 %60 
                                                      OpSelectionMerge %329 None 
                                                      OpBranchConditional %327 %328 %329 
                                             %328 = OpLabel 
                                                      OpKill
                                             %329 = OpLabel 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "vulkan hw_tier01 " {
Keywords { "UNITY_UI_ALPHACLIP" "UNITY_UI_CLIP_RECT" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 517
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %12 %121 %125 %126 %129 %131 %183 %193 %236 %358 %452 %485 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpDecorate %12 Location 12 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpDecorate %19 ArrayStride 19 
                                                      OpDecorate %20 ArrayStride 20 
                                                      OpDecorate %21 ArrayStride 21 
                                                      OpDecorate %22 ArrayStride 22 
                                                      OpMemberDecorate %23 0 Offset 23 
                                                      OpMemberDecorate %23 1 Offset 23 
                                                      OpMemberDecorate %23 2 Offset 23 
                                                      OpMemberDecorate %23 3 Offset 23 
                                                      OpMemberDecorate %23 4 Offset 23 
                                                      OpMemberDecorate %23 5 Offset 23 
                                                      OpMemberDecorate %23 6 Offset 23 
                                                      OpMemberDecorate %23 7 Offset 23 
                                                      OpMemberDecorate %23 8 Offset 23 
                                                      OpMemberDecorate %23 9 Offset 23 
                                                      OpMemberDecorate %23 10 Offset 23 
                                                      OpMemberDecorate %23 11 Offset 23 
                                                      OpMemberDecorate %23 12 Offset 23 
                                                      OpMemberDecorate %23 13 Offset 23 
                                                      OpMemberDecorate %23 14 Offset 23 
                                                      OpMemberDecorate %23 15 Offset 23 
                                                      OpMemberDecorate %23 16 Offset 23 
                                                      OpMemberDecorate %23 17 Offset 23 
                                                      OpMemberDecorate %23 18 Offset 23 
                                                      OpMemberDecorate %23 19 Offset 23 
                                                      OpMemberDecorate %23 20 Offset 23 
                                                      OpMemberDecorate %23 21 Offset 23 
                                                      OpMemberDecorate %23 22 Offset 23 
                                                      OpMemberDecorate %23 23 Offset 23 
                                                      OpMemberDecorate %23 24 Offset 23 
                                                      OpDecorate %23 Block 
                                                      OpDecorate %25 DescriptorSet 25 
                                                      OpDecorate %25 Binding 25 
                                                      OpMemberDecorate %119 0 BuiltIn 119 
                                                      OpMemberDecorate %119 1 BuiltIn 119 
                                                      OpMemberDecorate %119 2 BuiltIn 119 
                                                      OpDecorate %119 Block 
                                                      OpDecorate %125 RelaxedPrecision 
                                                      OpDecorate %125 Location 125 
                                                      OpDecorate %126 RelaxedPrecision 
                                                      OpDecorate %126 Location 126 
                                                      OpDecorate %127 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD0 Location 129 
                                                      OpDecorate %131 Location 131 
                                                      OpDecorate vs_TEXCOORD2 Location 183 
                                                      OpDecorate %193 Location 193 
                                                      OpDecorate %236 Location 236 
                                                      OpDecorate vs_TEXCOORD1 Location 358 
                                                      OpDecorate vs_TEXCOORD3 Location 452 
                                                      OpDecorate vs_TEXCOORD5 Location 485 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 3 
                                               %8 = OpTypePointer Private %7 
                                Private f32_3* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 4 
                                              %11 = OpTypePointer Input %10 
                                 Input f32_4* %12 = OpVariable Input 
                                              %13 = OpTypeVector %6 2 
                                              %16 = OpTypeInt 32 0 
                                          u32 %17 = OpConstant 4 
                                              %18 = OpTypeArray %10 %17 
                                              %19 = OpTypeArray %10 %17 
                                              %20 = OpTypeArray %10 %17 
                                              %21 = OpTypeArray %10 %17 
                                              %22 = OpTypeArray %10 %17 
                                              %23 = OpTypeStruct %7 %10 %18 %19 %20 %21 %6 %6 %6 %22 %6 %6 %6 %6 %6 %10 %6 %6 %6 %6 %6 %6 %6 %10 %10 
                                              %24 = OpTypePointer Uniform %23 
Uniform struct {f32_3; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4[4]; f32; f32; f32; f32_4[4]; f32; f32; f32; f32; f32; f32_4; f32; f32; f32; f32; f32; f32; f32; f32_4; f32_4;}* %25 = OpVariable Uniform 
                                              %26 = OpTypeInt 32 1 
                                          i32 %27 = OpConstant 13 
                                              %28 = OpTypePointer Uniform %6 
                                          i32 %31 = OpConstant 14 
                                              %38 = OpTypePointer Private %10 
                               Private f32_4* %39 = OpVariable Private 
                                          i32 %42 = OpConstant 2 
                                          i32 %43 = OpConstant 1 
                                              %44 = OpTypePointer Uniform %10 
                                          i32 %48 = OpConstant 0 
                               Private f32_4* %63 = OpVariable Private 
                                          i32 %65 = OpConstant 3 
                                              %83 = OpTypePointer Uniform %7 
                               Private f32_4* %89 = OpVariable Private 
                                          i32 %92 = OpConstant 5 
                                         u32 %117 = OpConstant 1 
                                             %118 = OpTypeArray %6 %117 
                                             %119 = OpTypeStruct %10 %6 %118 
                                             %120 = OpTypePointer Output %119 
        Output struct {f32_4; f32; f32[1];}* %121 = OpVariable Output 
                                             %123 = OpTypePointer Output %10 
                               Output f32_4* %125 = OpVariable Output 
                                Input f32_4* %126 = OpVariable Input 
                                             %128 = OpTypePointer Output %13 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                             %130 = OpTypePointer Input %13 
                                Input f32_2* %131 = OpVariable Input 
                                             %133 = OpTypePointer Private %13 
                              Private f32_2* %134 = OpVariable Private 
                                         i32 %138 = OpConstant 4 
                                         i32 %154 = OpConstant 19 
                                         i32 %157 = OpConstant 20 
                                             %166 = OpTypePointer Private %6 
                                Private f32* %167 = OpVariable Private 
                                         i32 %171 = OpConstant 16 
                                         i32 %174 = OpConstant 17 
                                         f32 %178 = OpConstant 3.674022E-40 
                                       f32_2 %179 = OpConstantComposite %178 %178 
                       Output f32_4* vs_TEXCOORD2 = OpVariable Output 
                                         u32 %190 = OpConstant 0 
                                Private f32* %192 = OpVariable Private 
                                Input f32_2* %193 = OpVariable Input 
                                             %194 = OpTypePointer Input %6 
                                         i32 %198 = OpConstant 18 
                                         i32 %202 = OpConstant 22 
                                         f32 %205 = OpConstant 3.674022E-40 
                                         i32 %214 = OpConstant 21 
                                             %235 = OpTypePointer Input %7 
                                Input f32_3* %236 = OpVariable Input 
                                         u32 %254 = OpConstant 2 
                              Private f32_3* %263 = OpVariable Private 
                                             %296 = OpTypeBool 
                                             %297 = OpTypePointer Private %296 
                               Private bool* %298 = OpVariable Private 
                                         u32 %299 = OpConstant 3 
                                         f32 %302 = OpConstant 3.674022E-40 
                                             %305 = OpTypePointer Function %6 
                               Private bool* %315 = OpVariable Private 
                                         i32 %322 = OpConstant 10 
                                         i32 %326 = OpConstant 11 
                                         i32 %341 = OpConstant 6 
                                         i32 %348 = OpConstant 12 
                                         f32 %355 = OpConstant 3.674022E-40 
                       Output f32_4* vs_TEXCOORD1 = OpVariable Output 
                                         i32 %366 = OpConstant 8 
                                         i32 %374 = OpConstant 7 
                                             %394 = OpTypePointer Output %6 
                                         i32 %407 = OpConstant 15 
                                         f32 %410 = OpConstant 3.674022E-40 
                                       f32_4 %411 = OpConstantComposite %410 %410 %410 %410 
                                         f32 %414 = OpConstant 3.674022E-40 
                                       f32_4 %415 = OpConstantComposite %414 %414 %414 %414 
                                         f32 %419 = OpConstant 3.674022E-40 
                                       f32_2 %420 = OpConstantComposite %419 %419 
                                         i32 %438 = OpConstant 9 
                                             %451 = OpTypePointer Output %7 
                       Output f32_3* vs_TEXCOORD3 = OpVariable Output 
                                         f32 %463 = OpConstant 3.674022E-40 
                                         f32 %473 = OpConstant 3.674022E-40 
                                         f32 %480 = OpConstant 3.674022E-40 
                                       f32_2 %481 = OpConstantComposite %480 %480 
                       Output f32_4* vs_TEXCOORD5 = OpVariable Output 
                                         i32 %488 = OpConstant 23 
                                         i32 %501 = OpConstant 24 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                               Function f32* %306 = OpVariable Function 
                                        f32_4 %14 = OpLoad %12 
                                        f32_2 %15 = OpVectorShuffle %14 %14 0 1 
                                 Uniform f32* %29 = OpAccessChain %25 %27 
                                          f32 %30 = OpLoad %29 
                                 Uniform f32* %32 = OpAccessChain %25 %31 
                                          f32 %33 = OpLoad %32 
                                        f32_2 %34 = OpCompositeConstruct %30 %33 
                                        f32_2 %35 = OpFAdd %15 %34 
                                        f32_3 %36 = OpLoad %9 
                                        f32_3 %37 = OpVectorShuffle %36 %35 3 4 2 
                                                      OpStore %9 %37 
                                        f32_3 %40 = OpLoad %9 
                                        f32_4 %41 = OpVectorShuffle %40 %40 1 1 1 1 
                               Uniform f32_4* %45 = OpAccessChain %25 %42 %43 
                                        f32_4 %46 = OpLoad %45 
                                        f32_4 %47 = OpFMul %41 %46 
                                                      OpStore %39 %47 
                               Uniform f32_4* %49 = OpAccessChain %25 %42 %48 
                                        f32_4 %50 = OpLoad %49 
                                        f32_3 %51 = OpLoad %9 
                                        f32_4 %52 = OpVectorShuffle %51 %51 0 0 0 0 
                                        f32_4 %53 = OpFMul %50 %52 
                                        f32_4 %54 = OpLoad %39 
                                        f32_4 %55 = OpFAdd %53 %54 
                                                      OpStore %39 %55 
                               Uniform f32_4* %56 = OpAccessChain %25 %42 %42 
                                        f32_4 %57 = OpLoad %56 
                                        f32_4 %58 = OpLoad %12 
                                        f32_4 %59 = OpVectorShuffle %58 %58 2 2 2 2 
                                        f32_4 %60 = OpFMul %57 %59 
                                        f32_4 %61 = OpLoad %39 
                                        f32_4 %62 = OpFAdd %60 %61 
                                                      OpStore %39 %62 
                                        f32_4 %64 = OpLoad %39 
                               Uniform f32_4* %66 = OpAccessChain %25 %42 %65 
                                        f32_4 %67 = OpLoad %66 
                                        f32_4 %68 = OpFAdd %64 %67 
                                                      OpStore %63 %68 
                               Uniform f32_4* %69 = OpAccessChain %25 %42 %65 
                                        f32_4 %70 = OpLoad %69 
                                        f32_3 %71 = OpVectorShuffle %70 %70 0 1 2 
                                        f32_4 %72 = OpLoad %12 
                                        f32_3 %73 = OpVectorShuffle %72 %72 3 3 3 
                                        f32_3 %74 = OpFMul %71 %73 
                                        f32_4 %75 = OpLoad %39 
                                        f32_3 %76 = OpVectorShuffle %75 %75 0 1 2 
                                        f32_3 %77 = OpFAdd %74 %76 
                                        f32_4 %78 = OpLoad %39 
                                        f32_4 %79 = OpVectorShuffle %78 %77 4 5 6 3 
                                                      OpStore %39 %79 
                                        f32_4 %80 = OpLoad %39 
                                        f32_3 %81 = OpVectorShuffle %80 %80 0 1 2 
                                        f32_3 %82 = OpFNegate %81 
                               Uniform f32_3* %84 = OpAccessChain %25 %48 
                                        f32_3 %85 = OpLoad %84 
                                        f32_3 %86 = OpFAdd %82 %85 
                                        f32_4 %87 = OpLoad %39 
                                        f32_4 %88 = OpVectorShuffle %87 %86 4 5 6 3 
                                                      OpStore %39 %88 
                                        f32_4 %90 = OpLoad %63 
                                        f32_4 %91 = OpVectorShuffle %90 %90 1 1 1 1 
                               Uniform f32_4* %93 = OpAccessChain %25 %92 %43 
                                        f32_4 %94 = OpLoad %93 
                                        f32_4 %95 = OpFMul %91 %94 
                                                      OpStore %89 %95 
                               Uniform f32_4* %96 = OpAccessChain %25 %92 %48 
                                        f32_4 %97 = OpLoad %96 
                                        f32_4 %98 = OpLoad %63 
                                        f32_4 %99 = OpVectorShuffle %98 %98 0 0 0 0 
                                       f32_4 %100 = OpFMul %97 %99 
                                       f32_4 %101 = OpLoad %89 
                                       f32_4 %102 = OpFAdd %100 %101 
                                                      OpStore %89 %102 
                              Uniform f32_4* %103 = OpAccessChain %25 %92 %42 
                                       f32_4 %104 = OpLoad %103 
                                       f32_4 %105 = OpLoad %63 
                                       f32_4 %106 = OpVectorShuffle %105 %105 2 2 2 2 
                                       f32_4 %107 = OpFMul %104 %106 
                                       f32_4 %108 = OpLoad %89 
                                       f32_4 %109 = OpFAdd %107 %108 
                                                      OpStore %89 %109 
                              Uniform f32_4* %110 = OpAccessChain %25 %92 %65 
                                       f32_4 %111 = OpLoad %110 
                                       f32_4 %112 = OpLoad %63 
                                       f32_4 %113 = OpVectorShuffle %112 %112 3 3 3 3 
                                       f32_4 %114 = OpFMul %111 %113 
                                       f32_4 %115 = OpLoad %89 
                                       f32_4 %116 = OpFAdd %114 %115 
                                                      OpStore %63 %116 
                                       f32_4 %122 = OpLoad %63 
                               Output f32_4* %124 = OpAccessChain %121 %48 
                                                      OpStore %124 %122 
                                       f32_4 %127 = OpLoad %126 
                                                      OpStore %125 %127 
                                       f32_2 %132 = OpLoad %131 
                                                      OpStore vs_TEXCOORD0 %132 
                              Uniform f32_4* %135 = OpAccessChain %25 %43 
                                       f32_4 %136 = OpLoad %135 
                                       f32_2 %137 = OpVectorShuffle %136 %136 1 1 
                              Uniform f32_4* %139 = OpAccessChain %25 %138 %43 
                                       f32_4 %140 = OpLoad %139 
                                       f32_2 %141 = OpVectorShuffle %140 %140 0 1 
                                       f32_2 %142 = OpFMul %137 %141 
                                                      OpStore %134 %142 
                              Uniform f32_4* %143 = OpAccessChain %25 %138 %48 
                                       f32_4 %144 = OpLoad %143 
                                       f32_2 %145 = OpVectorShuffle %144 %144 0 1 
                              Uniform f32_4* %146 = OpAccessChain %25 %43 
                                       f32_4 %147 = OpLoad %146 
                                       f32_2 %148 = OpVectorShuffle %147 %147 0 0 
                                       f32_2 %149 = OpFMul %145 %148 
                                       f32_2 %150 = OpLoad %134 
                                       f32_2 %151 = OpFAdd %149 %150 
                                                      OpStore %134 %151 
                                       f32_2 %152 = OpLoad %134 
                                       f32_2 %153 = OpExtInst %1 4 %152 
                                Uniform f32* %155 = OpAccessChain %25 %154 
                                         f32 %156 = OpLoad %155 
                                Uniform f32* %158 = OpAccessChain %25 %157 
                                         f32 %159 = OpLoad %158 
                                       f32_2 %160 = OpCompositeConstruct %156 %159 
                                       f32_2 %161 = OpFMul %153 %160 
                                                      OpStore %134 %161 
                                       f32_4 %162 = OpLoad %63 
                                       f32_2 %163 = OpVectorShuffle %162 %162 3 3 
                                       f32_2 %164 = OpLoad %134 
                                       f32_2 %165 = OpFDiv %163 %164 
                                                      OpStore %134 %165 
                                       f32_2 %168 = OpLoad %134 
                                       f32_2 %169 = OpLoad %134 
                                         f32 %170 = OpDot %168 %169 
                                                      OpStore %167 %170 
                                Uniform f32* %172 = OpAccessChain %25 %171 
                                         f32 %173 = OpLoad %172 
                                Uniform f32* %175 = OpAccessChain %25 %174 
                                         f32 %176 = OpLoad %175 
                                       f32_2 %177 = OpCompositeConstruct %173 %176 
                                       f32_2 %180 = OpFMul %177 %179 
                                       f32_2 %181 = OpLoad %134 
                                       f32_2 %182 = OpFAdd %180 %181 
                                                      OpStore %134 %182 
                                       f32_2 %184 = OpLoad %134 
                                       f32_2 %185 = OpFDiv %179 %184 
                                       f32_4 %186 = OpLoad vs_TEXCOORD2 
                                       f32_4 %187 = OpVectorShuffle %186 %185 0 1 4 5 
                                                      OpStore vs_TEXCOORD2 %187 
                                         f32 %188 = OpLoad %167 
                                         f32 %189 = OpExtInst %1 32 %188 
                                Private f32* %191 = OpAccessChain %134 %190 
                                                      OpStore %191 %189 
                                  Input f32* %195 = OpAccessChain %193 %117 
                                         f32 %196 = OpLoad %195 
                                         f32 %197 = OpExtInst %1 4 %196 
                                Uniform f32* %199 = OpAccessChain %25 %198 
                                         f32 %200 = OpLoad %199 
                                         f32 %201 = OpFMul %197 %200 
                                                      OpStore %192 %201 
                                Uniform f32* %203 = OpAccessChain %25 %202 
                                         f32 %204 = OpLoad %203 
                                         f32 %206 = OpFAdd %204 %205 
                                                      OpStore %167 %206 
                                         f32 %207 = OpLoad %192 
                                         f32 %208 = OpLoad %167 
                                         f32 %209 = OpFMul %207 %208 
                                                      OpStore %192 %209 
                                         f32 %210 = OpLoad %192 
                                Private f32* %211 = OpAccessChain %134 %190 
                                         f32 %212 = OpLoad %211 
                                         f32 %213 = OpFMul %210 %212 
                                                      OpStore %167 %213 
                                Uniform f32* %215 = OpAccessChain %25 %214 
                                         f32 %216 = OpLoad %215 
                                         f32 %217 = OpFNegate %216 
                                         f32 %218 = OpFAdd %217 %205 
                                Private f32* %219 = OpAccessChain %63 %190 
                                                      OpStore %219 %218 
                                         f32 %220 = OpLoad %167 
                                         f32 %221 = OpExtInst %1 4 %220 
                                Private f32* %222 = OpAccessChain %63 %190 
                                         f32 %223 = OpLoad %222 
                                         f32 %224 = OpFMul %221 %223 
                                Private f32* %225 = OpAccessChain %63 %190 
                                                      OpStore %225 %224 
                                Private f32* %226 = OpAccessChain %134 %190 
                                         f32 %227 = OpLoad %226 
                                         f32 %228 = OpLoad %192 
                                         f32 %229 = OpFMul %227 %228 
                                Private f32* %230 = OpAccessChain %63 %190 
                                         f32 %231 = OpLoad %230 
                                         f32 %232 = OpFNegate %231 
                                         f32 %233 = OpFAdd %229 %232 
                                Private f32* %234 = OpAccessChain %134 %190 
                                                      OpStore %234 %233 
                                       f32_3 %237 = OpLoad %236 
                              Uniform f32_4* %238 = OpAccessChain %25 %65 %48 
                                       f32_4 %239 = OpLoad %238 
                                       f32_3 %240 = OpVectorShuffle %239 %239 0 1 2 
                                         f32 %241 = OpDot %237 %240 
                                Private f32* %242 = OpAccessChain %89 %190 
                                                      OpStore %242 %241 
                                       f32_3 %243 = OpLoad %236 
                              Uniform f32_4* %244 = OpAccessChain %25 %65 %43 
                                       f32_4 %245 = OpLoad %244 
                                       f32_3 %246 = OpVectorShuffle %245 %245 0 1 2 
                                         f32 %247 = OpDot %243 %246 
                                Private f32* %248 = OpAccessChain %89 %117 
                                                      OpStore %248 %247 
                                       f32_3 %249 = OpLoad %236 
                              Uniform f32_4* %250 = OpAccessChain %25 %65 %42 
                                       f32_4 %251 = OpLoad %250 
                                       f32_3 %252 = OpVectorShuffle %251 %251 0 1 2 
                                         f32 %253 = OpDot %249 %252 
                                Private f32* %255 = OpAccessChain %89 %254 
                                                      OpStore %255 %253 
                                       f32_4 %256 = OpLoad %89 
                                       f32_3 %257 = OpVectorShuffle %256 %256 0 1 2 
                                       f32_4 %258 = OpLoad %89 
                                       f32_3 %259 = OpVectorShuffle %258 %258 0 1 2 
                                         f32 %260 = OpDot %257 %259 
                                                      OpStore %192 %260 
                                         f32 %261 = OpLoad %192 
                                         f32 %262 = OpExtInst %1 32 %261 
                                                      OpStore %192 %262 
                                         f32 %264 = OpLoad %192 
                                       f32_3 %265 = OpCompositeConstruct %264 %264 %264 
                                       f32_4 %266 = OpLoad %89 
                                       f32_3 %267 = OpVectorShuffle %266 %266 0 1 2 
                                       f32_3 %268 = OpFMul %265 %267 
                                                      OpStore %263 %268 
                                       f32_4 %269 = OpLoad %39 
                                       f32_3 %270 = OpVectorShuffle %269 %269 0 1 2 
                                       f32_4 %271 = OpLoad %39 
                                       f32_3 %272 = OpVectorShuffle %271 %271 0 1 2 
                                         f32 %273 = OpDot %270 %272 
                                                      OpStore %192 %273 
                                         f32 %274 = OpLoad %192 
                                         f32 %275 = OpExtInst %1 32 %274 
                                                      OpStore %192 %275 
                                         f32 %276 = OpLoad %192 
                                       f32_3 %277 = OpCompositeConstruct %276 %276 %276 
                                       f32_4 %278 = OpLoad %39 
                                       f32_3 %279 = OpVectorShuffle %278 %278 0 1 2 
                                       f32_3 %280 = OpFMul %277 %279 
                                       f32_4 %281 = OpLoad %89 
                                       f32_4 %282 = OpVectorShuffle %281 %280 4 5 6 3 
                                                      OpStore %89 %282 
                                       f32_3 %283 = OpLoad %263 
                                       f32_4 %284 = OpLoad %89 
                                       f32_3 %285 = OpVectorShuffle %284 %284 0 1 2 
                                         f32 %286 = OpDot %283 %285 
                                                      OpStore %192 %286 
                                         f32 %287 = OpLoad %192 
                                         f32 %288 = OpExtInst %1 4 %287 
                                Private f32* %289 = OpAccessChain %134 %190 
                                         f32 %290 = OpLoad %289 
                                         f32 %291 = OpFMul %288 %290 
                                Private f32* %292 = OpAccessChain %63 %190 
                                         f32 %293 = OpLoad %292 
                                         f32 %294 = OpFAdd %291 %293 
                                Private f32* %295 = OpAccessChain %134 %190 
                                                      OpStore %295 %294 
                                Uniform f32* %300 = OpAccessChain %25 %138 %65 %299 
                                         f32 %301 = OpLoad %300 
                                        bool %303 = OpFOrdEqual %301 %302 
                                                      OpStore %298 %303 
                                        bool %304 = OpLoad %298 
                                                      OpSelectionMerge %308 None 
                                                      OpBranchConditional %304 %307 %311 
                                             %307 = OpLabel 
                                Private f32* %309 = OpAccessChain %134 %190 
                                         f32 %310 = OpLoad %309 
                                                      OpStore %306 %310 
                                                      OpBranch %308 
                                             %311 = OpLabel 
                                         f32 %312 = OpLoad %167 
                                                      OpStore %306 %312 
                                                      OpBranch %308 
                                             %308 = OpLabel 
                                         f32 %313 = OpLoad %306 
                                Private f32* %314 = OpAccessChain %263 %190 
                                                      OpStore %314 %313 
                                  Input f32* %316 = OpAccessChain %193 %117 
                                         f32 %317 = OpLoad %316 
                                        bool %318 = OpFOrdGreaterThanEqual %302 %317 
                                                      OpStore %315 %318 
                                        bool %319 = OpLoad %315 
                                         f32 %320 = OpSelect %319 %205 %302 
                                Private f32* %321 = OpAccessChain %134 %190 
                                                      OpStore %321 %320 
                                Uniform f32* %323 = OpAccessChain %25 %322 
                                         f32 %324 = OpLoad %323 
                                         f32 %325 = OpFNegate %324 
                                Uniform f32* %327 = OpAccessChain %25 %326 
                                         f32 %328 = OpLoad %327 
                                         f32 %329 = OpFAdd %325 %328 
                                                      OpStore %192 %329 
                                Private f32* %330 = OpAccessChain %134 %190 
                                         f32 %331 = OpLoad %330 
                                         f32 %332 = OpLoad %192 
                                         f32 %333 = OpFMul %331 %332 
                                Uniform f32* %334 = OpAccessChain %25 %322 
                                         f32 %335 = OpLoad %334 
                                         f32 %336 = OpFAdd %333 %335 
                                Private f32* %337 = OpAccessChain %134 %190 
                                                      OpStore %337 %336 
                                Private f32* %338 = OpAccessChain %134 %190 
                                         f32 %339 = OpLoad %338 
                                         f32 %340 = OpFMul %339 %178 
                                Uniform f32* %342 = OpAccessChain %25 %341 
                                         f32 %343 = OpLoad %342 
                                         f32 %344 = OpFAdd %340 %343 
                                Private f32* %345 = OpAccessChain %134 %190 
                                                      OpStore %345 %344 
                                Private f32* %346 = OpAccessChain %134 %190 
                                         f32 %347 = OpLoad %346 
                                Uniform f32* %349 = OpAccessChain %25 %348 
                                         f32 %350 = OpLoad %349 
                                         f32 %351 = OpFMul %347 %350 
                                Private f32* %352 = OpAccessChain %134 %190 
                                                      OpStore %352 %351 
                                Private f32* %353 = OpAccessChain %134 %190 
                                         f32 %354 = OpLoad %353 
                                         f32 %356 = OpFMul %354 %355 
                                Private f32* %357 = OpAccessChain %263 %254 
                                                      OpStore %357 %356 
                                       f32_3 %359 = OpLoad %263 
                                       f32_2 %360 = OpVectorShuffle %359 %359 0 2 
                                       f32_4 %361 = OpLoad vs_TEXCOORD1 
                                       f32_4 %362 = OpVectorShuffle %361 %360 0 4 2 5 
                                                      OpStore vs_TEXCOORD1 %362 
                                Private f32* %363 = OpAccessChain %263 %190 
                                         f32 %364 = OpLoad %363 
                                         f32 %365 = OpFDiv %355 %364 
                                                      OpStore %192 %365 
                                Uniform f32* %367 = OpAccessChain %25 %366 
                                         f32 %368 = OpLoad %367 
                                         f32 %369 = OpFNegate %368 
                                Uniform f32* %370 = OpAccessChain %25 %348 
                                         f32 %371 = OpLoad %370 
                                         f32 %372 = OpFMul %369 %371 
                                         f32 %373 = OpFAdd %372 %205 
                                                      OpStore %167 %373 
                                Uniform f32* %375 = OpAccessChain %25 %374 
                                         f32 %376 = OpLoad %375 
                                         f32 %377 = OpFNegate %376 
                                Uniform f32* %378 = OpAccessChain %25 %348 
                                         f32 %379 = OpLoad %378 
                                         f32 %380 = OpFMul %377 %379 
                                         f32 %381 = OpLoad %167 
                                         f32 %382 = OpFAdd %380 %381 
                                                      OpStore %167 %382 
                                         f32 %383 = OpLoad %167 
                                         f32 %384 = OpFMul %383 %355 
                                         f32 %385 = OpLoad %192 
                                         f32 %386 = OpFNegate %385 
                                         f32 %387 = OpFAdd %384 %386 
                                                      OpStore %167 %387 
                                Private f32* %388 = OpAccessChain %134 %190 
                                         f32 %389 = OpLoad %388 
                                         f32 %390 = OpFNegate %389 
                                         f32 %391 = OpFMul %390 %355 
                                         f32 %392 = OpLoad %167 
                                         f32 %393 = OpFAdd %391 %392 
                                 Output f32* %395 = OpAccessChain vs_TEXCOORD1 %190 
                                                      OpStore %395 %393 
                                Private f32* %396 = OpAccessChain %134 %190 
                                         f32 %397 = OpLoad %396 
                                         f32 %398 = OpFNegate %397 
                                         f32 %399 = OpFMul %398 %355 
                                         f32 %400 = OpFAdd %399 %355 
                                Private f32* %401 = OpAccessChain %134 %190 
                                                      OpStore %401 %400 
                                         f32 %402 = OpLoad %192 
                                Private f32* %403 = OpAccessChain %134 %190 
                                         f32 %404 = OpLoad %403 
                                         f32 %405 = OpFAdd %402 %404 
                                 Output f32* %406 = OpAccessChain vs_TEXCOORD1 %254 
                                                      OpStore %406 %405 
                              Uniform f32_4* %408 = OpAccessChain %25 %407 
                                       f32_4 %409 = OpLoad %408 
                                       f32_4 %412 = OpExtInst %1 40 %409 %411 
                                                      OpStore %63 %412 
                                       f32_4 %413 = OpLoad %63 
                                       f32_4 %416 = OpExtInst %1 37 %413 %415 
                                                      OpStore %63 %416 
                                       f32_3 %417 = OpLoad %9 
                                       f32_2 %418 = OpVectorShuffle %417 %417 0 1 
                                       f32_2 %421 = OpFMul %418 %420 
                                       f32_4 %422 = OpLoad %63 
                                       f32_2 %423 = OpVectorShuffle %422 %422 0 1 
                                       f32_2 %424 = OpFNegate %423 
                                       f32_2 %425 = OpFAdd %421 %424 
                                       f32_3 %426 = OpLoad %9 
                                       f32_3 %427 = OpVectorShuffle %426 %425 3 4 2 
                                                      OpStore %9 %427 
                                       f32_4 %428 = OpLoad %63 
                                       f32_2 %429 = OpVectorShuffle %428 %428 2 3 
                                       f32_2 %430 = OpFNegate %429 
                                       f32_3 %431 = OpLoad %9 
                                       f32_2 %432 = OpVectorShuffle %431 %431 0 1 
                                       f32_2 %433 = OpFAdd %430 %432 
                                       f32_4 %434 = OpLoad vs_TEXCOORD2 
                                       f32_4 %435 = OpVectorShuffle %434 %433 4 5 2 3 
                                                      OpStore vs_TEXCOORD2 %435 
                                       f32_4 %436 = OpLoad %39 
                                       f32_3 %437 = OpVectorShuffle %436 %436 1 1 1 
                              Uniform f32_4* %439 = OpAccessChain %25 %438 %43 
                                       f32_4 %440 = OpLoad %439 
                                       f32_3 %441 = OpVectorShuffle %440 %440 0 1 2 
                                       f32_3 %442 = OpFMul %437 %441 
                                                      OpStore %9 %442 
                              Uniform f32_4* %443 = OpAccessChain %25 %438 %48 
                                       f32_4 %444 = OpLoad %443 
                                       f32_3 %445 = OpVectorShuffle %444 %444 0 1 2 
                                       f32_4 %446 = OpLoad %39 
                                       f32_3 %447 = OpVectorShuffle %446 %446 0 0 0 
                                       f32_3 %448 = OpFMul %445 %447 
                                       f32_3 %449 = OpLoad %9 
                                       f32_3 %450 = OpFAdd %448 %449 
                                                      OpStore %9 %450 
                              Uniform f32_4* %453 = OpAccessChain %25 %438 %42 
                                       f32_4 %454 = OpLoad %453 
                                       f32_3 %455 = OpVectorShuffle %454 %454 0 1 2 
                                       f32_4 %456 = OpLoad %39 
                                       f32_3 %457 = OpVectorShuffle %456 %456 2 2 2 
                                       f32_3 %458 = OpFMul %455 %457 
                                       f32_3 %459 = OpLoad %9 
                                       f32_3 %460 = OpFAdd %458 %459 
                                                      OpStore vs_TEXCOORD3 %460 
                                  Input f32* %461 = OpAccessChain %193 %190 
                                         f32 %462 = OpLoad %461 
                                         f32 %464 = OpFMul %462 %463 
                                Private f32* %465 = OpAccessChain %9 %190 
                                                      OpStore %465 %464 
                                Private f32* %466 = OpAccessChain %9 %190 
                                         f32 %467 = OpLoad %466 
                                         f32 %468 = OpExtInst %1 8 %467 
                                Private f32* %469 = OpAccessChain %134 %190 
                                                      OpStore %469 %468 
                                Private f32* %470 = OpAccessChain %134 %190 
                                         f32 %471 = OpLoad %470 
                                         f32 %472 = OpFNegate %471 
                                         f32 %474 = OpFMul %472 %473 
                                  Input f32* %475 = OpAccessChain %193 %190 
                                         f32 %476 = OpLoad %475 
                                         f32 %477 = OpFAdd %474 %476 
                                Private f32* %478 = OpAccessChain %134 %117 
                                                      OpStore %478 %477 
                                       f32_2 %479 = OpLoad %134 
                                       f32_2 %482 = OpFMul %479 %481 
                                       f32_3 %483 = OpLoad %9 
                                       f32_3 %484 = OpVectorShuffle %483 %482 3 4 2 
                                                      OpStore %9 %484 
                                       f32_3 %486 = OpLoad %9 
                                       f32_2 %487 = OpVectorShuffle %486 %486 0 1 
                              Uniform f32_4* %489 = OpAccessChain %25 %488 
                                       f32_4 %490 = OpLoad %489 
                                       f32_2 %491 = OpVectorShuffle %490 %490 0 1 
                                       f32_2 %492 = OpFMul %487 %491 
                              Uniform f32_4* %493 = OpAccessChain %25 %488 
                                       f32_4 %494 = OpLoad %493 
                                       f32_2 %495 = OpVectorShuffle %494 %494 2 3 
                                       f32_2 %496 = OpFAdd %492 %495 
                                       f32_4 %497 = OpLoad vs_TEXCOORD5 
                                       f32_4 %498 = OpVectorShuffle %497 %496 4 5 2 3 
                                                      OpStore vs_TEXCOORD5 %498 
                                       f32_3 %499 = OpLoad %9 
                                       f32_2 %500 = OpVectorShuffle %499 %499 0 1 
                              Uniform f32_4* %502 = OpAccessChain %25 %501 
                                       f32_4 %503 = OpLoad %502 
                                       f32_2 %504 = OpVectorShuffle %503 %503 0 1 
                                       f32_2 %505 = OpFMul %500 %504 
                              Uniform f32_4* %506 = OpAccessChain %25 %501 
                                       f32_4 %507 = OpLoad %506 
                                       f32_2 %508 = OpVectorShuffle %507 %507 2 3 
                                       f32_2 %509 = OpFAdd %505 %508 
                                       f32_4 %510 = OpLoad vs_TEXCOORD5 
                                       f32_4 %511 = OpVectorShuffle %510 %509 0 1 4 5 
                                                      OpStore vs_TEXCOORD5 %511 
                                 Output f32* %512 = OpAccessChain %121 %48 %117 
                                         f32 %513 = OpLoad %512 
                                         f32 %514 = OpFNegate %513 
                                 Output f32* %515 = OpAccessChain %121 %48 %117 
                                                      OpStore %515 %514 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 332
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %22 %35 %128 %149 %286 %316 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpDecorate %9 RelaxedPrecision 
                                                      OpDecorate %12 RelaxedPrecision 
                                                      OpDecorate %12 DescriptorSet 12 
                                                      OpDecorate %12 Binding 12 
                                                      OpDecorate %13 RelaxedPrecision 
                                                      OpDecorate %16 RelaxedPrecision 
                                                      OpDecorate %16 DescriptorSet 16 
                                                      OpDecorate %16 Binding 16 
                                                      OpDecorate %17 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD0 Location 22 
                                                      OpDecorate %27 RelaxedPrecision 
                                                      OpDecorate %33 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD1 Location 35 
                                                      OpDecorate %45 RelaxedPrecision 
                                                      OpDecorate %46 RelaxedPrecision 
                                                      OpMemberDecorate %69 0 Offset 69 
                                                      OpMemberDecorate %69 1 Offset 69 
                                                      OpMemberDecorate %69 2 Offset 69 
                                                      OpMemberDecorate %69 3 RelaxedPrecision 
                                                      OpMemberDecorate %69 3 Offset 69 
                                                      OpMemberDecorate %69 4 Offset 69 
                                                      OpMemberDecorate %69 5 Offset 69 
                                                      OpMemberDecorate %69 6 Offset 69 
                                                      OpMemberDecorate %69 7 RelaxedPrecision 
                                                      OpMemberDecorate %69 7 Offset 69 
                                                      OpMemberDecorate %69 8 Offset 69 
                                                      OpMemberDecorate %69 9 Offset 69 
                                                      OpMemberDecorate %69 10 Offset 69 
                                                      OpDecorate %69 Block 
                                                      OpDecorate %71 DescriptorSet 71 
                                                      OpDecorate %71 Binding 71 
                                                      OpDecorate %85 RelaxedPrecision 
                                                      OpDecorate %89 RelaxedPrecision 
                                                      OpDecorate %93 RelaxedPrecision 
                                                      OpDecorate %94 RelaxedPrecision 
                                                      OpDecorate %95 RelaxedPrecision 
                                                      OpDecorate %101 RelaxedPrecision 
                                                      OpDecorate %103 RelaxedPrecision 
                                                      OpDecorate %104 RelaxedPrecision 
                                                      OpDecorate %110 RelaxedPrecision 
                                                      OpDecorate %111 RelaxedPrecision 
                                                      OpDecorate %113 RelaxedPrecision 
                                                      OpDecorate %114 RelaxedPrecision 
                                                      OpDecorate %115 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD5 Location 128 
                                                      OpDecorate %134 RelaxedPrecision 
                                                      OpDecorate %134 DescriptorSet 134 
                                                      OpDecorate %134 Binding 134 
                                                      OpDecorate %135 RelaxedPrecision 
                                                      OpDecorate %136 RelaxedPrecision 
                                                      OpDecorate %136 DescriptorSet 136 
                                                      OpDecorate %136 Binding 136 
                                                      OpDecorate %137 RelaxedPrecision 
                                                      OpDecorate %143 RelaxedPrecision 
                                                      OpDecorate %146 RelaxedPrecision 
                                                      OpDecorate %147 RelaxedPrecision 
                                                      OpDecorate %148 RelaxedPrecision 
                                                      OpDecorate %149 RelaxedPrecision 
                                                      OpDecorate %149 Location 149 
                                                      OpDecorate %150 RelaxedPrecision 
                                                      OpDecorate %151 RelaxedPrecision 
                                                      OpDecorate %154 RelaxedPrecision 
                                                      OpDecorate %155 RelaxedPrecision 
                                                      OpDecorate %156 RelaxedPrecision 
                                                      OpDecorate %172 RelaxedPrecision 
                                                      OpDecorate %173 RelaxedPrecision 
                                                      OpDecorate %173 DescriptorSet 173 
                                                      OpDecorate %173 Binding 173 
                                                      OpDecorate %174 RelaxedPrecision 
                                                      OpDecorate %175 RelaxedPrecision 
                                                      OpDecorate %175 DescriptorSet 175 
                                                      OpDecorate %175 Binding 175 
                                                      OpDecorate %176 RelaxedPrecision 
                                                      OpDecorate %181 RelaxedPrecision 
                                                      OpDecorate %182 RelaxedPrecision 
                                                      OpDecorate %183 RelaxedPrecision 
                                                      OpDecorate %184 RelaxedPrecision 
                                                      OpDecorate %188 RelaxedPrecision 
                                                      OpDecorate %190 RelaxedPrecision 
                                                      OpDecorate %191 RelaxedPrecision 
                                                      OpDecorate %197 RelaxedPrecision 
                                                      OpDecorate %203 RelaxedPrecision 
                                                      OpDecorate %204 RelaxedPrecision 
                                                      OpDecorate %209 RelaxedPrecision 
                                                      OpDecorate %211 RelaxedPrecision 
                                                      OpDecorate %212 RelaxedPrecision 
                                                      OpDecorate %218 RelaxedPrecision 
                                                      OpDecorate %219 RelaxedPrecision 
                                                      OpDecorate %220 RelaxedPrecision 
                                                      OpDecorate %221 RelaxedPrecision 
                                                      OpDecorate %222 RelaxedPrecision 
                                                      OpDecorate %227 RelaxedPrecision 
                                                      OpDecorate %228 RelaxedPrecision 
                                                      OpDecorate %233 RelaxedPrecision 
                                                      OpDecorate %235 RelaxedPrecision 
                                                      OpDecorate %236 RelaxedPrecision 
                                                      OpDecorate %238 RelaxedPrecision 
                                                      OpDecorate %239 RelaxedPrecision 
                                                      OpDecorate %262 RelaxedPrecision 
                                                      OpDecorate %264 RelaxedPrecision 
                                                      OpDecorate %265 RelaxedPrecision 
                                                      OpDecorate %266 RelaxedPrecision 
                                                      OpDecorate %267 RelaxedPrecision 
                                                      OpDecorate %268 RelaxedPrecision 
                                                      OpDecorate %269 RelaxedPrecision 
                                                      OpDecorate %270 RelaxedPrecision 
                                                      OpDecorate %271 RelaxedPrecision 
                                                      OpDecorate %272 RelaxedPrecision 
                                                      OpDecorate %273 RelaxedPrecision 
                                                      OpDecorate %274 RelaxedPrecision 
                                                      OpDecorate %275 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD2 Location 286 
                                                      OpDecorate %306 RelaxedPrecision 
                                                      OpDecorate %307 RelaxedPrecision 
                                                      OpDecorate %308 RelaxedPrecision 
                                                      OpDecorate %310 RelaxedPrecision 
                                                      OpDecorate %311 RelaxedPrecision 
                                                      OpDecorate %312 RelaxedPrecision 
                                                      OpDecorate %313 RelaxedPrecision 
                                                      OpDecorate %314 RelaxedPrecision 
                                                      OpDecorate %316 RelaxedPrecision 
                                                      OpDecorate %316 Location 316 
                                                      OpDecorate %317 RelaxedPrecision 
                                                      OpDecorate %318 RelaxedPrecision 
                                                      OpDecorate %319 RelaxedPrecision 
                                                      OpDecorate %320 RelaxedPrecision 
                                                      OpDecorate %322 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypePointer UniformConstant %10 
         UniformConstant read_only Texture2D* %12 = OpVariable UniformConstant 
                                              %14 = OpTypeSampler 
                                              %15 = OpTypePointer UniformConstant %14 
                     UniformConstant sampler* %16 = OpVariable UniformConstant 
                                              %18 = OpTypeSampledImage %10 
                                              %20 = OpTypeVector %6 2 
                                              %21 = OpTypePointer Input %20 
                        Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                              %25 = OpTypeInt 32 0 
                                          u32 %26 = OpConstant 3 
                                          u32 %28 = OpConstant 0 
                                              %29 = OpTypePointer Private %6 
                                 Private f32* %31 = OpVariable Private 
                                              %34 = OpTypePointer Input %7 
                        Input f32_4* vs_TEXCOORD1 = OpVariable Input 
                                              %36 = OpTypePointer Input %6 
                                              %41 = OpTypeVector %6 3 
                                              %42 = OpTypePointer Private %41 
                               Private f32_3* %43 = OpVariable Private 
                                          u32 %47 = OpConstant 2 
                                              %52 = OpTypeBool 
                                              %53 = OpTypePointer Private %52 
                                Private bool* %54 = OpVariable Private 
                                          f32 %56 = OpConstant 3.674022E-40 
                                              %59 = OpTypeInt 32 1 
                                          i32 %60 = OpConstant 0 
                                          i32 %61 = OpConstant 1 
                                          i32 %63 = OpConstant -1 
                                              %69 = OpTypeStruct %7 %6 %6 %7 %6 %6 %6 %7 %6 %6 %7 
                                              %70 = OpTypePointer Uniform %69 
Uniform struct {f32_4; f32; f32; f32_4; f32; f32; f32; f32_4; f32; f32; f32_4;}* %71 = OpVariable Uniform 
                                          i32 %72 = OpConstant 8 
                                              %73 = OpTypePointer Uniform %6 
                                          i32 %76 = OpConstant 9 
                                          u32 %81 = OpConstant 1 
                                 Private f32* %85 = OpVariable Private 
                                          f32 %87 = OpConstant 3.674022E-40 
                                 Private f32* %89 = OpVariable Private 
                                          f32 %91 = OpConstant 3.674022E-40 
                                 Private f32* %95 = OpVariable Private 
                                         i32 %116 = OpConstant 5 
                                         i32 %119 = OpConstant 6 
                                             %123 = OpTypePointer Uniform %7 
                        Input f32_4* vs_TEXCOORD5 = OpVariable Input 
        UniformConstant read_only Texture2D* %134 = OpVariable UniformConstant 
                    UniformConstant sampler* %136 = OpVariable UniformConstant 
                              Private f32_4* %142 = OpVariable Private 
                                         i32 %144 = OpConstant 7 
                              Private f32_3* %148 = OpVariable Private 
                                Input f32_4* %149 = OpVariable Input 
                                         i32 %152 = OpConstant 3 
                                         i32 %159 = OpConstant 2 
                              Private f32_4* %172 = OpVariable Private 
        UniformConstant read_only Texture2D* %173 = OpVariable UniformConstant 
                    UniformConstant sampler* %175 = OpVariable UniformConstant 
                                             %185 = OpTypePointer Private %20 
                              Private f32_2* %186 = OpVariable Private 
                              Private f32_4* %197 = OpVariable Private 
                              Private f32_4* %222 = OpVariable Private 
                                         i32 %241 = OpConstant 4 
                                Private f32* %248 = OpVariable Private 
                                         i32 %276 = OpConstant 10 
                        Input f32_4* vs_TEXCOORD2 = OpVariable Input 
                                         f32 %309 = OpConstant 3.674022E-40 
                                             %315 = OpTypePointer Output %7 
                               Output f32_4* %316 = OpVariable Output 
                               Private bool* %321 = OpVariable Private 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                          read_only Texture2D %13 = OpLoad %12 
                                      sampler %17 = OpLoad %16 
                   read_only Texture2DSampled %19 = OpSampledImage %13 %17 
                                        f32_2 %23 = OpLoad vs_TEXCOORD0 
                                        f32_4 %24 = OpImageSampleImplicitLod %19 %23 
                                          f32 %27 = OpCompositeExtract %24 3 
                                 Private f32* %30 = OpAccessChain %9 %28 
                                                      OpStore %30 %27 
                                 Private f32* %32 = OpAccessChain %9 %28 
                                          f32 %33 = OpLoad %32 
                                   Input f32* %37 = OpAccessChain vs_TEXCOORD1 %28 
                                          f32 %38 = OpLoad %37 
                                          f32 %39 = OpFNegate %38 
                                          f32 %40 = OpFAdd %33 %39 
                                                      OpStore %31 %40 
                                 Private f32* %44 = OpAccessChain %9 %28 
                                          f32 %45 = OpLoad %44 
                                          f32 %46 = OpFNegate %45 
                                   Input f32* %48 = OpAccessChain vs_TEXCOORD1 %47 
                                          f32 %49 = OpLoad %48 
                                          f32 %50 = OpFAdd %46 %49 
                                 Private f32* %51 = OpAccessChain %43 %28 
                                                      OpStore %51 %50 
                                          f32 %55 = OpLoad %31 
                                         bool %57 = OpFOrdLessThan %55 %56 
                                                      OpStore %54 %57 
                                         bool %58 = OpLoad %54 
                                          i32 %62 = OpSelect %58 %61 %60 
                                          i32 %64 = OpIMul %62 %63 
                                         bool %65 = OpINotEqual %64 %60 
                                                      OpSelectionMerge %67 None 
                                                      OpBranchConditional %65 %66 %67 
                                              %66 = OpLabel 
                                                      OpKill
                                              %67 = OpLabel 
                                 Uniform f32* %74 = OpAccessChain %71 %72 
                                          f32 %75 = OpLoad %74 
                                 Uniform f32* %77 = OpAccessChain %71 %76 
                                          f32 %78 = OpLoad %77 
                                          f32 %79 = OpFMul %75 %78 
                                                      OpStore %31 %79 
                                          f32 %80 = OpLoad %31 
                                   Input f32* %82 = OpAccessChain vs_TEXCOORD1 %81 
                                          f32 %83 = OpLoad %82 
                                          f32 %84 = OpFMul %80 %83 
                                                      OpStore %31 %84 
                                          f32 %86 = OpLoad %31 
                                          f32 %88 = OpExtInst %1 37 %86 %87 
                                                      OpStore %85 %88 
                                          f32 %90 = OpLoad %31 
                                          f32 %92 = OpFMul %90 %91 
                                                      OpStore %89 %92 
                                          f32 %93 = OpLoad %85 
                                          f32 %94 = OpExtInst %1 31 %93 
                                                      OpStore %85 %94 
                                 Private f32* %96 = OpAccessChain %43 %28 
                                          f32 %97 = OpLoad %96 
                                   Input f32* %98 = OpAccessChain vs_TEXCOORD1 %81 
                                          f32 %99 = OpLoad %98 
                                         f32 %100 = OpFMul %97 %99 
                                         f32 %101 = OpLoad %89 
                                         f32 %102 = OpFAdd %100 %101 
                                                      OpStore %95 %102 
                                         f32 %103 = OpLoad %95 
                                         f32 %104 = OpExtInst %1 43 %103 %56 %87 
                                                      OpStore %95 %104 
                                Private f32* %105 = OpAccessChain %43 %28 
                                         f32 %106 = OpLoad %105 
                                  Input f32* %107 = OpAccessChain vs_TEXCOORD1 %81 
                                         f32 %108 = OpLoad %107 
                                         f32 %109 = OpFMul %106 %108 
                                         f32 %110 = OpLoad %89 
                                         f32 %111 = OpFNegate %110 
                                         f32 %112 = OpFAdd %109 %111 
                                                      OpStore %89 %112 
                                         f32 %113 = OpLoad %85 
                                         f32 %114 = OpLoad %95 
                                         f32 %115 = OpFMul %113 %114 
                                                      OpStore %85 %115 
                                Uniform f32* %117 = OpAccessChain %71 %116 
                                         f32 %118 = OpLoad %117 
                                Uniform f32* %120 = OpAccessChain %71 %119 
                                         f32 %121 = OpLoad %120 
                                       f32_2 %122 = OpCompositeConstruct %118 %121 
                              Uniform f32_4* %124 = OpAccessChain %71 %60 
                                       f32_4 %125 = OpLoad %124 
                                       f32_2 %126 = OpVectorShuffle %125 %125 1 1 
                                       f32_2 %127 = OpFMul %122 %126 
                                       f32_4 %129 = OpLoad vs_TEXCOORD5 
                                       f32_2 %130 = OpVectorShuffle %129 %129 2 3 
                                       f32_2 %131 = OpFAdd %127 %130 
                                       f32_3 %132 = OpLoad %43 
                                       f32_3 %133 = OpVectorShuffle %132 %131 3 4 2 
                                                      OpStore %43 %133 
                         read_only Texture2D %135 = OpLoad %134 
                                     sampler %137 = OpLoad %136 
                  read_only Texture2DSampled %138 = OpSampledImage %135 %137 
                                       f32_3 %139 = OpLoad %43 
                                       f32_2 %140 = OpVectorShuffle %139 %139 0 1 
                                       f32_4 %141 = OpImageSampleImplicitLod %138 %140 
                                                      OpStore %9 %141 
                                       f32_4 %143 = OpLoad %9 
                              Uniform f32_4* %145 = OpAccessChain %71 %144 
                                       f32_4 %146 = OpLoad %145 
                                       f32_4 %147 = OpFMul %143 %146 
                                                      OpStore %142 %147 
                                       f32_4 %150 = OpLoad %149 
                                       f32_3 %151 = OpVectorShuffle %150 %150 0 1 2 
                              Uniform f32_4* %153 = OpAccessChain %71 %152 
                                       f32_4 %154 = OpLoad %153 
                                       f32_3 %155 = OpVectorShuffle %154 %154 0 1 2 
                                       f32_3 %156 = OpFMul %151 %155 
                                                      OpStore %148 %156 
                                Uniform f32* %157 = OpAccessChain %71 %61 
                                         f32 %158 = OpLoad %157 
                                Uniform f32* %160 = OpAccessChain %71 %159 
                                         f32 %161 = OpLoad %160 
                                       f32_2 %162 = OpCompositeConstruct %158 %161 
                              Uniform f32_4* %163 = OpAccessChain %71 %60 
                                       f32_4 %164 = OpLoad %163 
                                       f32_2 %165 = OpVectorShuffle %164 %164 1 1 
                                       f32_2 %166 = OpFMul %162 %165 
                                       f32_4 %167 = OpLoad vs_TEXCOORD5 
                                       f32_2 %168 = OpVectorShuffle %167 %167 0 1 
                                       f32_2 %169 = OpFAdd %166 %168 
                                       f32_3 %170 = OpLoad %43 
                                       f32_3 %171 = OpVectorShuffle %170 %169 3 4 2 
                                                      OpStore %43 %171 
                         read_only Texture2D %174 = OpLoad %173 
                                     sampler %176 = OpLoad %175 
                  read_only Texture2DSampled %177 = OpSampledImage %174 %176 
                                       f32_3 %178 = OpLoad %43 
                                       f32_2 %179 = OpVectorShuffle %178 %178 0 1 
                                       f32_4 %180 = OpImageSampleImplicitLod %177 %179 
                                                      OpStore %172 %180 
                                       f32_3 %181 = OpLoad %148 
                                       f32_4 %182 = OpLoad %172 
                                       f32_3 %183 = OpVectorShuffle %182 %182 0 1 2 
                                       f32_3 %184 = OpFMul %181 %183 
                                                      OpStore %43 %184 
                                Private f32* %187 = OpAccessChain %172 %26 
                                         f32 %188 = OpLoad %187 
                                Uniform f32* %189 = OpAccessChain %71 %152 %26 
                                         f32 %190 = OpLoad %189 
                                         f32 %191 = OpFMul %188 %190 
                                Private f32* %192 = OpAccessChain %186 %28 
                                                      OpStore %192 %191 
                                       f32_3 %193 = OpLoad %43 
                                       f32_2 %194 = OpLoad %186 
                                       f32_3 %195 = OpVectorShuffle %194 %194 0 0 0 
                                       f32_3 %196 = OpFMul %193 %195 
                                                      OpStore %148 %196 
                                       f32_4 %198 = OpLoad %142 
                                       f32_3 %199 = OpVectorShuffle %198 %198 0 1 2 
                                       f32_4 %200 = OpLoad %142 
                                       f32_3 %201 = OpVectorShuffle %200 %200 3 3 3 
                                       f32_3 %202 = OpFMul %199 %201 
                                       f32_3 %203 = OpLoad %148 
                                       f32_3 %204 = OpFNegate %203 
                                       f32_3 %205 = OpFAdd %202 %204 
                                       f32_4 %206 = OpLoad %197 
                                       f32_4 %207 = OpVectorShuffle %206 %205 4 5 6 3 
                                                      OpStore %197 %207 
                                Uniform f32* %208 = OpAccessChain %71 %144 %26 
                                         f32 %209 = OpLoad %208 
                                Private f32* %210 = OpAccessChain %9 %26 
                                         f32 %211 = OpLoad %210 
                                         f32 %212 = OpFMul %209 %211 
                                Private f32* %213 = OpAccessChain %186 %28 
                                         f32 %214 = OpLoad %213 
                                         f32 %215 = OpFNegate %214 
                                         f32 %216 = OpFAdd %212 %215 
                                Private f32* %217 = OpAccessChain %197 %26 
                                                      OpStore %217 %216 
                                         f32 %218 = OpLoad %85 
                                       f32_4 %219 = OpCompositeConstruct %218 %218 %218 %218 
                                       f32_4 %220 = OpLoad %197 
                                       f32_4 %221 = OpFMul %219 %220 
                                                      OpStore %197 %221 
                                       f32_3 %223 = OpLoad %43 
                                       f32_2 %224 = OpLoad %186 
                                       f32_3 %225 = OpVectorShuffle %224 %224 0 0 0 
                                       f32_3 %226 = OpFMul %223 %225 
                                       f32_4 %227 = OpLoad %197 
                                       f32_3 %228 = OpVectorShuffle %227 %227 0 1 2 
                                       f32_3 %229 = OpFAdd %226 %228 
                                       f32_4 %230 = OpLoad %222 
                                       f32_4 %231 = OpVectorShuffle %230 %229 4 5 6 3 
                                                      OpStore %222 %231 
                                Uniform f32* %232 = OpAccessChain %71 %152 %26 
                                         f32 %233 = OpLoad %232 
                                Private f32* %234 = OpAccessChain %172 %26 
                                         f32 %235 = OpLoad %234 
                                         f32 %236 = OpFMul %233 %235 
                                Private f32* %237 = OpAccessChain %197 %26 
                                         f32 %238 = OpLoad %237 
                                         f32 %239 = OpFAdd %236 %238 
                                Private f32* %240 = OpAccessChain %222 %26 
                                                      OpStore %240 %239 
                                Uniform f32* %242 = OpAccessChain %71 %241 
                                         f32 %243 = OpLoad %242 
                                Uniform f32* %244 = OpAccessChain %71 %76 
                                         f32 %245 = OpLoad %244 
                                         f32 %246 = OpFMul %243 %245 
                                Private f32* %247 = OpAccessChain %186 %28 
                                                      OpStore %247 %246 
                                Private f32* %249 = OpAccessChain %186 %28 
                                         f32 %250 = OpLoad %249 
                                  Input f32* %251 = OpAccessChain vs_TEXCOORD1 %81 
                                         f32 %252 = OpLoad %251 
                                         f32 %253 = OpFMul %250 %252 
                                                      OpStore %248 %253 
                                Private f32* %254 = OpAccessChain %186 %28 
                                         f32 %255 = OpLoad %254 
                                  Input f32* %256 = OpAccessChain vs_TEXCOORD1 %81 
                                         f32 %257 = OpLoad %256 
                                         f32 %258 = OpFMul %255 %257 
                                         f32 %259 = OpFAdd %258 %87 
                                                      OpStore %85 %259 
                                         f32 %260 = OpLoad %248 
                                         f32 %261 = OpFMul %260 %91 
                                         f32 %262 = OpLoad %89 
                                         f32 %263 = OpFAdd %261 %262 
                                                      OpStore %89 %263 
                                         f32 %264 = OpLoad %89 
                                         f32 %265 = OpLoad %85 
                                         f32 %266 = OpFDiv %264 %265 
                                                      OpStore %85 %266 
                                         f32 %267 = OpLoad %85 
                                         f32 %268 = OpExtInst %1 43 %267 %56 %87 
                                                      OpStore %85 %268 
                                         f32 %269 = OpLoad %85 
                                         f32 %270 = OpFNegate %269 
                                         f32 %271 = OpFAdd %270 %87 
                                                      OpStore %85 %271 
                                       f32_4 %272 = OpLoad %222 
                                         f32 %273 = OpLoad %85 
                                       f32_4 %274 = OpCompositeConstruct %273 %273 %273 %273 
                                       f32_4 %275 = OpFMul %272 %274 
                                                      OpStore %222 %275 
                              Uniform f32_4* %277 = OpAccessChain %71 %276 
                                       f32_4 %278 = OpLoad %277 
                                       f32_2 %279 = OpVectorShuffle %278 %278 0 1 
                                       f32_2 %280 = OpFNegate %279 
                              Uniform f32_4* %281 = OpAccessChain %71 %276 
                                       f32_4 %282 = OpLoad %281 
                                       f32_2 %283 = OpVectorShuffle %282 %282 2 3 
                                       f32_2 %284 = OpFAdd %280 %283 
                                                      OpStore %186 %284 
                                       f32_2 %285 = OpLoad %186 
                                       f32_4 %287 = OpLoad vs_TEXCOORD2 
                                       f32_2 %288 = OpVectorShuffle %287 %287 0 1 
                                       f32_2 %289 = OpExtInst %1 4 %288 
                                       f32_2 %290 = OpFNegate %289 
                                       f32_2 %291 = OpFAdd %285 %290 
                                                      OpStore %186 %291 
                                       f32_2 %292 = OpLoad %186 
                                       f32_4 %293 = OpLoad vs_TEXCOORD2 
                                       f32_2 %294 = OpVectorShuffle %293 %293 2 3 
                                       f32_2 %295 = OpFMul %292 %294 
                                                      OpStore %186 %295 
                                       f32_2 %296 = OpLoad %186 
                                       f32_2 %297 = OpCompositeConstruct %56 %56 
                                       f32_2 %298 = OpCompositeConstruct %87 %87 
                                       f32_2 %299 = OpExtInst %1 43 %296 %297 %298 
                                                      OpStore %186 %299 
                                Private f32* %300 = OpAccessChain %186 %81 
                                         f32 %301 = OpLoad %300 
                                Private f32* %302 = OpAccessChain %186 %28 
                                         f32 %303 = OpLoad %302 
                                         f32 %304 = OpFMul %301 %303 
                                                      OpStore %85 %304 
                                Private f32* %305 = OpAccessChain %222 %26 
                                         f32 %306 = OpLoad %305 
                                         f32 %307 = OpLoad %85 
                                         f32 %308 = OpFMul %306 %307 
                                         f32 %310 = OpFAdd %308 %309 
                                                      OpStore %89 %310 
                                       f32_4 %311 = OpLoad %222 
                                         f32 %312 = OpLoad %85 
                                       f32_4 %313 = OpCompositeConstruct %312 %312 %312 %312 
                                       f32_4 %314 = OpFMul %311 %313 
                                                      OpStore %222 %314 
                                       f32_4 %317 = OpLoad %222 
                                       f32_4 %318 = OpLoad %149 
                                       f32_4 %319 = OpVectorShuffle %318 %318 3 3 3 3 
                                       f32_4 %320 = OpFMul %317 %319 
                                                      OpStore %316 %320 
                                         f32 %322 = OpLoad %89 
                                        bool %323 = OpFOrdLessThan %322 %56 
                                                      OpStore %321 %323 
                                        bool %324 = OpLoad %321 
                                         i32 %325 = OpSelect %324 %61 %60 
                                         i32 %326 = OpIMul %325 %63 
                                        bool %327 = OpINotEqual %326 %60 
                                                      OpSelectionMerge %329 None 
                                                      OpBranchConditional %327 %328 %329 
                                             %328 = OpLabel 
                                                      OpKill
                                             %329 = OpLabel 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "vulkan hw_tier02 " {
Keywords { "UNITY_UI_ALPHACLIP" "UNITY_UI_CLIP_RECT" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 517
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %12 %121 %125 %126 %129 %131 %183 %193 %236 %358 %452 %485 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpDecorate %12 Location 12 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpDecorate %19 ArrayStride 19 
                                                      OpDecorate %20 ArrayStride 20 
                                                      OpDecorate %21 ArrayStride 21 
                                                      OpDecorate %22 ArrayStride 22 
                                                      OpMemberDecorate %23 0 Offset 23 
                                                      OpMemberDecorate %23 1 Offset 23 
                                                      OpMemberDecorate %23 2 Offset 23 
                                                      OpMemberDecorate %23 3 Offset 23 
                                                      OpMemberDecorate %23 4 Offset 23 
                                                      OpMemberDecorate %23 5 Offset 23 
                                                      OpMemberDecorate %23 6 Offset 23 
                                                      OpMemberDecorate %23 7 Offset 23 
                                                      OpMemberDecorate %23 8 Offset 23 
                                                      OpMemberDecorate %23 9 Offset 23 
                                                      OpMemberDecorate %23 10 Offset 23 
                                                      OpMemberDecorate %23 11 Offset 23 
                                                      OpMemberDecorate %23 12 Offset 23 
                                                      OpMemberDecorate %23 13 Offset 23 
                                                      OpMemberDecorate %23 14 Offset 23 
                                                      OpMemberDecorate %23 15 Offset 23 
                                                      OpMemberDecorate %23 16 Offset 23 
                                                      OpMemberDecorate %23 17 Offset 23 
                                                      OpMemberDecorate %23 18 Offset 23 
                                                      OpMemberDecorate %23 19 Offset 23 
                                                      OpMemberDecorate %23 20 Offset 23 
                                                      OpMemberDecorate %23 21 Offset 23 
                                                      OpMemberDecorate %23 22 Offset 23 
                                                      OpMemberDecorate %23 23 Offset 23 
                                                      OpMemberDecorate %23 24 Offset 23 
                                                      OpDecorate %23 Block 
                                                      OpDecorate %25 DescriptorSet 25 
                                                      OpDecorate %25 Binding 25 
                                                      OpMemberDecorate %119 0 BuiltIn 119 
                                                      OpMemberDecorate %119 1 BuiltIn 119 
                                                      OpMemberDecorate %119 2 BuiltIn 119 
                                                      OpDecorate %119 Block 
                                                      OpDecorate %125 RelaxedPrecision 
                                                      OpDecorate %125 Location 125 
                                                      OpDecorate %126 RelaxedPrecision 
                                                      OpDecorate %126 Location 126 
                                                      OpDecorate %127 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD0 Location 129 
                                                      OpDecorate %131 Location 131 
                                                      OpDecorate vs_TEXCOORD2 Location 183 
                                                      OpDecorate %193 Location 193 
                                                      OpDecorate %236 Location 236 
                                                      OpDecorate vs_TEXCOORD1 Location 358 
                                                      OpDecorate vs_TEXCOORD3 Location 452 
                                                      OpDecorate vs_TEXCOORD5 Location 485 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 3 
                                               %8 = OpTypePointer Private %7 
                                Private f32_3* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 4 
                                              %11 = OpTypePointer Input %10 
                                 Input f32_4* %12 = OpVariable Input 
                                              %13 = OpTypeVector %6 2 
                                              %16 = OpTypeInt 32 0 
                                          u32 %17 = OpConstant 4 
                                              %18 = OpTypeArray %10 %17 
                                              %19 = OpTypeArray %10 %17 
                                              %20 = OpTypeArray %10 %17 
                                              %21 = OpTypeArray %10 %17 
                                              %22 = OpTypeArray %10 %17 
                                              %23 = OpTypeStruct %7 %10 %18 %19 %20 %21 %6 %6 %6 %22 %6 %6 %6 %6 %6 %10 %6 %6 %6 %6 %6 %6 %6 %10 %10 
                                              %24 = OpTypePointer Uniform %23 
Uniform struct {f32_3; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4[4]; f32; f32; f32; f32_4[4]; f32; f32; f32; f32; f32; f32_4; f32; f32; f32; f32; f32; f32; f32; f32_4; f32_4;}* %25 = OpVariable Uniform 
                                              %26 = OpTypeInt 32 1 
                                          i32 %27 = OpConstant 13 
                                              %28 = OpTypePointer Uniform %6 
                                          i32 %31 = OpConstant 14 
                                              %38 = OpTypePointer Private %10 
                               Private f32_4* %39 = OpVariable Private 
                                          i32 %42 = OpConstant 2 
                                          i32 %43 = OpConstant 1 
                                              %44 = OpTypePointer Uniform %10 
                                          i32 %48 = OpConstant 0 
                               Private f32_4* %63 = OpVariable Private 
                                          i32 %65 = OpConstant 3 
                                              %83 = OpTypePointer Uniform %7 
                               Private f32_4* %89 = OpVariable Private 
                                          i32 %92 = OpConstant 5 
                                         u32 %117 = OpConstant 1 
                                             %118 = OpTypeArray %6 %117 
                                             %119 = OpTypeStruct %10 %6 %118 
                                             %120 = OpTypePointer Output %119 
        Output struct {f32_4; f32; f32[1];}* %121 = OpVariable Output 
                                             %123 = OpTypePointer Output %10 
                               Output f32_4* %125 = OpVariable Output 
                                Input f32_4* %126 = OpVariable Input 
                                             %128 = OpTypePointer Output %13 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                             %130 = OpTypePointer Input %13 
                                Input f32_2* %131 = OpVariable Input 
                                             %133 = OpTypePointer Private %13 
                              Private f32_2* %134 = OpVariable Private 
                                         i32 %138 = OpConstant 4 
                                         i32 %154 = OpConstant 19 
                                         i32 %157 = OpConstant 20 
                                             %166 = OpTypePointer Private %6 
                                Private f32* %167 = OpVariable Private 
                                         i32 %171 = OpConstant 16 
                                         i32 %174 = OpConstant 17 
                                         f32 %178 = OpConstant 3.674022E-40 
                                       f32_2 %179 = OpConstantComposite %178 %178 
                       Output f32_4* vs_TEXCOORD2 = OpVariable Output 
                                         u32 %190 = OpConstant 0 
                                Private f32* %192 = OpVariable Private 
                                Input f32_2* %193 = OpVariable Input 
                                             %194 = OpTypePointer Input %6 
                                         i32 %198 = OpConstant 18 
                                         i32 %202 = OpConstant 22 
                                         f32 %205 = OpConstant 3.674022E-40 
                                         i32 %214 = OpConstant 21 
                                             %235 = OpTypePointer Input %7 
                                Input f32_3* %236 = OpVariable Input 
                                         u32 %254 = OpConstant 2 
                              Private f32_3* %263 = OpVariable Private 
                                             %296 = OpTypeBool 
                                             %297 = OpTypePointer Private %296 
                               Private bool* %298 = OpVariable Private 
                                         u32 %299 = OpConstant 3 
                                         f32 %302 = OpConstant 3.674022E-40 
                                             %305 = OpTypePointer Function %6 
                               Private bool* %315 = OpVariable Private 
                                         i32 %322 = OpConstant 10 
                                         i32 %326 = OpConstant 11 
                                         i32 %341 = OpConstant 6 
                                         i32 %348 = OpConstant 12 
                                         f32 %355 = OpConstant 3.674022E-40 
                       Output f32_4* vs_TEXCOORD1 = OpVariable Output 
                                         i32 %366 = OpConstant 8 
                                         i32 %374 = OpConstant 7 
                                             %394 = OpTypePointer Output %6 
                                         i32 %407 = OpConstant 15 
                                         f32 %410 = OpConstant 3.674022E-40 
                                       f32_4 %411 = OpConstantComposite %410 %410 %410 %410 
                                         f32 %414 = OpConstant 3.674022E-40 
                                       f32_4 %415 = OpConstantComposite %414 %414 %414 %414 
                                         f32 %419 = OpConstant 3.674022E-40 
                                       f32_2 %420 = OpConstantComposite %419 %419 
                                         i32 %438 = OpConstant 9 
                                             %451 = OpTypePointer Output %7 
                       Output f32_3* vs_TEXCOORD3 = OpVariable Output 
                                         f32 %463 = OpConstant 3.674022E-40 
                                         f32 %473 = OpConstant 3.674022E-40 
                                         f32 %480 = OpConstant 3.674022E-40 
                                       f32_2 %481 = OpConstantComposite %480 %480 
                       Output f32_4* vs_TEXCOORD5 = OpVariable Output 
                                         i32 %488 = OpConstant 23 
                                         i32 %501 = OpConstant 24 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                               Function f32* %306 = OpVariable Function 
                                        f32_4 %14 = OpLoad %12 
                                        f32_2 %15 = OpVectorShuffle %14 %14 0 1 
                                 Uniform f32* %29 = OpAccessChain %25 %27 
                                          f32 %30 = OpLoad %29 
                                 Uniform f32* %32 = OpAccessChain %25 %31 
                                          f32 %33 = OpLoad %32 
                                        f32_2 %34 = OpCompositeConstruct %30 %33 
                                        f32_2 %35 = OpFAdd %15 %34 
                                        f32_3 %36 = OpLoad %9 
                                        f32_3 %37 = OpVectorShuffle %36 %35 3 4 2 
                                                      OpStore %9 %37 
                                        f32_3 %40 = OpLoad %9 
                                        f32_4 %41 = OpVectorShuffle %40 %40 1 1 1 1 
                               Uniform f32_4* %45 = OpAccessChain %25 %42 %43 
                                        f32_4 %46 = OpLoad %45 
                                        f32_4 %47 = OpFMul %41 %46 
                                                      OpStore %39 %47 
                               Uniform f32_4* %49 = OpAccessChain %25 %42 %48 
                                        f32_4 %50 = OpLoad %49 
                                        f32_3 %51 = OpLoad %9 
                                        f32_4 %52 = OpVectorShuffle %51 %51 0 0 0 0 
                                        f32_4 %53 = OpFMul %50 %52 
                                        f32_4 %54 = OpLoad %39 
                                        f32_4 %55 = OpFAdd %53 %54 
                                                      OpStore %39 %55 
                               Uniform f32_4* %56 = OpAccessChain %25 %42 %42 
                                        f32_4 %57 = OpLoad %56 
                                        f32_4 %58 = OpLoad %12 
                                        f32_4 %59 = OpVectorShuffle %58 %58 2 2 2 2 
                                        f32_4 %60 = OpFMul %57 %59 
                                        f32_4 %61 = OpLoad %39 
                                        f32_4 %62 = OpFAdd %60 %61 
                                                      OpStore %39 %62 
                                        f32_4 %64 = OpLoad %39 
                               Uniform f32_4* %66 = OpAccessChain %25 %42 %65 
                                        f32_4 %67 = OpLoad %66 
                                        f32_4 %68 = OpFAdd %64 %67 
                                                      OpStore %63 %68 
                               Uniform f32_4* %69 = OpAccessChain %25 %42 %65 
                                        f32_4 %70 = OpLoad %69 
                                        f32_3 %71 = OpVectorShuffle %70 %70 0 1 2 
                                        f32_4 %72 = OpLoad %12 
                                        f32_3 %73 = OpVectorShuffle %72 %72 3 3 3 
                                        f32_3 %74 = OpFMul %71 %73 
                                        f32_4 %75 = OpLoad %39 
                                        f32_3 %76 = OpVectorShuffle %75 %75 0 1 2 
                                        f32_3 %77 = OpFAdd %74 %76 
                                        f32_4 %78 = OpLoad %39 
                                        f32_4 %79 = OpVectorShuffle %78 %77 4 5 6 3 
                                                      OpStore %39 %79 
                                        f32_4 %80 = OpLoad %39 
                                        f32_3 %81 = OpVectorShuffle %80 %80 0 1 2 
                                        f32_3 %82 = OpFNegate %81 
                               Uniform f32_3* %84 = OpAccessChain %25 %48 
                                        f32_3 %85 = OpLoad %84 
                                        f32_3 %86 = OpFAdd %82 %85 
                                        f32_4 %87 = OpLoad %39 
                                        f32_4 %88 = OpVectorShuffle %87 %86 4 5 6 3 
                                                      OpStore %39 %88 
                                        f32_4 %90 = OpLoad %63 
                                        f32_4 %91 = OpVectorShuffle %90 %90 1 1 1 1 
                               Uniform f32_4* %93 = OpAccessChain %25 %92 %43 
                                        f32_4 %94 = OpLoad %93 
                                        f32_4 %95 = OpFMul %91 %94 
                                                      OpStore %89 %95 
                               Uniform f32_4* %96 = OpAccessChain %25 %92 %48 
                                        f32_4 %97 = OpLoad %96 
                                        f32_4 %98 = OpLoad %63 
                                        f32_4 %99 = OpVectorShuffle %98 %98 0 0 0 0 
                                       f32_4 %100 = OpFMul %97 %99 
                                       f32_4 %101 = OpLoad %89 
                                       f32_4 %102 = OpFAdd %100 %101 
                                                      OpStore %89 %102 
                              Uniform f32_4* %103 = OpAccessChain %25 %92 %42 
                                       f32_4 %104 = OpLoad %103 
                                       f32_4 %105 = OpLoad %63 
                                       f32_4 %106 = OpVectorShuffle %105 %105 2 2 2 2 
                                       f32_4 %107 = OpFMul %104 %106 
                                       f32_4 %108 = OpLoad %89 
                                       f32_4 %109 = OpFAdd %107 %108 
                                                      OpStore %89 %109 
                              Uniform f32_4* %110 = OpAccessChain %25 %92 %65 
                                       f32_4 %111 = OpLoad %110 
                                       f32_4 %112 = OpLoad %63 
                                       f32_4 %113 = OpVectorShuffle %112 %112 3 3 3 3 
                                       f32_4 %114 = OpFMul %111 %113 
                                       f32_4 %115 = OpLoad %89 
                                       f32_4 %116 = OpFAdd %114 %115 
                                                      OpStore %63 %116 
                                       f32_4 %122 = OpLoad %63 
                               Output f32_4* %124 = OpAccessChain %121 %48 
                                                      OpStore %124 %122 
                                       f32_4 %127 = OpLoad %126 
                                                      OpStore %125 %127 
                                       f32_2 %132 = OpLoad %131 
                                                      OpStore vs_TEXCOORD0 %132 
                              Uniform f32_4* %135 = OpAccessChain %25 %43 
                                       f32_4 %136 = OpLoad %135 
                                       f32_2 %137 = OpVectorShuffle %136 %136 1 1 
                              Uniform f32_4* %139 = OpAccessChain %25 %138 %43 
                                       f32_4 %140 = OpLoad %139 
                                       f32_2 %141 = OpVectorShuffle %140 %140 0 1 
                                       f32_2 %142 = OpFMul %137 %141 
                                                      OpStore %134 %142 
                              Uniform f32_4* %143 = OpAccessChain %25 %138 %48 
                                       f32_4 %144 = OpLoad %143 
                                       f32_2 %145 = OpVectorShuffle %144 %144 0 1 
                              Uniform f32_4* %146 = OpAccessChain %25 %43 
                                       f32_4 %147 = OpLoad %146 
                                       f32_2 %148 = OpVectorShuffle %147 %147 0 0 
                                       f32_2 %149 = OpFMul %145 %148 
                                       f32_2 %150 = OpLoad %134 
                                       f32_2 %151 = OpFAdd %149 %150 
                                                      OpStore %134 %151 
                                       f32_2 %152 = OpLoad %134 
                                       f32_2 %153 = OpExtInst %1 4 %152 
                                Uniform f32* %155 = OpAccessChain %25 %154 
                                         f32 %156 = OpLoad %155 
                                Uniform f32* %158 = OpAccessChain %25 %157 
                                         f32 %159 = OpLoad %158 
                                       f32_2 %160 = OpCompositeConstruct %156 %159 
                                       f32_2 %161 = OpFMul %153 %160 
                                                      OpStore %134 %161 
                                       f32_4 %162 = OpLoad %63 
                                       f32_2 %163 = OpVectorShuffle %162 %162 3 3 
                                       f32_2 %164 = OpLoad %134 
                                       f32_2 %165 = OpFDiv %163 %164 
                                                      OpStore %134 %165 
                                       f32_2 %168 = OpLoad %134 
                                       f32_2 %169 = OpLoad %134 
                                         f32 %170 = OpDot %168 %169 
                                                      OpStore %167 %170 
                                Uniform f32* %172 = OpAccessChain %25 %171 
                                         f32 %173 = OpLoad %172 
                                Uniform f32* %175 = OpAccessChain %25 %174 
                                         f32 %176 = OpLoad %175 
                                       f32_2 %177 = OpCompositeConstruct %173 %176 
                                       f32_2 %180 = OpFMul %177 %179 
                                       f32_2 %181 = OpLoad %134 
                                       f32_2 %182 = OpFAdd %180 %181 
                                                      OpStore %134 %182 
                                       f32_2 %184 = OpLoad %134 
                                       f32_2 %185 = OpFDiv %179 %184 
                                       f32_4 %186 = OpLoad vs_TEXCOORD2 
                                       f32_4 %187 = OpVectorShuffle %186 %185 0 1 4 5 
                                                      OpStore vs_TEXCOORD2 %187 
                                         f32 %188 = OpLoad %167 
                                         f32 %189 = OpExtInst %1 32 %188 
                                Private f32* %191 = OpAccessChain %134 %190 
                                                      OpStore %191 %189 
                                  Input f32* %195 = OpAccessChain %193 %117 
                                         f32 %196 = OpLoad %195 
                                         f32 %197 = OpExtInst %1 4 %196 
                                Uniform f32* %199 = OpAccessChain %25 %198 
                                         f32 %200 = OpLoad %199 
                                         f32 %201 = OpFMul %197 %200 
                                                      OpStore %192 %201 
                                Uniform f32* %203 = OpAccessChain %25 %202 
                                         f32 %204 = OpLoad %203 
                                         f32 %206 = OpFAdd %204 %205 
                                                      OpStore %167 %206 
                                         f32 %207 = OpLoad %192 
                                         f32 %208 = OpLoad %167 
                                         f32 %209 = OpFMul %207 %208 
                                                      OpStore %192 %209 
                                         f32 %210 = OpLoad %192 
                                Private f32* %211 = OpAccessChain %134 %190 
                                         f32 %212 = OpLoad %211 
                                         f32 %213 = OpFMul %210 %212 
                                                      OpStore %167 %213 
                                Uniform f32* %215 = OpAccessChain %25 %214 
                                         f32 %216 = OpLoad %215 
                                         f32 %217 = OpFNegate %216 
                                         f32 %218 = OpFAdd %217 %205 
                                Private f32* %219 = OpAccessChain %63 %190 
                                                      OpStore %219 %218 
                                         f32 %220 = OpLoad %167 
                                         f32 %221 = OpExtInst %1 4 %220 
                                Private f32* %222 = OpAccessChain %63 %190 
                                         f32 %223 = OpLoad %222 
                                         f32 %224 = OpFMul %221 %223 
                                Private f32* %225 = OpAccessChain %63 %190 
                                                      OpStore %225 %224 
                                Private f32* %226 = OpAccessChain %134 %190 
                                         f32 %227 = OpLoad %226 
                                         f32 %228 = OpLoad %192 
                                         f32 %229 = OpFMul %227 %228 
                                Private f32* %230 = OpAccessChain %63 %190 
                                         f32 %231 = OpLoad %230 
                                         f32 %232 = OpFNegate %231 
                                         f32 %233 = OpFAdd %229 %232 
                                Private f32* %234 = OpAccessChain %134 %190 
                                                      OpStore %234 %233 
                                       f32_3 %237 = OpLoad %236 
                              Uniform f32_4* %238 = OpAccessChain %25 %65 %48 
                                       f32_4 %239 = OpLoad %238 
                                       f32_3 %240 = OpVectorShuffle %239 %239 0 1 2 
                                         f32 %241 = OpDot %237 %240 
                                Private f32* %242 = OpAccessChain %89 %190 
                                                      OpStore %242 %241 
                                       f32_3 %243 = OpLoad %236 
                              Uniform f32_4* %244 = OpAccessChain %25 %65 %43 
                                       f32_4 %245 = OpLoad %244 
                                       f32_3 %246 = OpVectorShuffle %245 %245 0 1 2 
                                         f32 %247 = OpDot %243 %246 
                                Private f32* %248 = OpAccessChain %89 %117 
                                                      OpStore %248 %247 
                                       f32_3 %249 = OpLoad %236 
                              Uniform f32_4* %250 = OpAccessChain %25 %65 %42 
                                       f32_4 %251 = OpLoad %250 
                                       f32_3 %252 = OpVectorShuffle %251 %251 0 1 2 
                                         f32 %253 = OpDot %249 %252 
                                Private f32* %255 = OpAccessChain %89 %254 
                                                      OpStore %255 %253 
                                       f32_4 %256 = OpLoad %89 
                                       f32_3 %257 = OpVectorShuffle %256 %256 0 1 2 
                                       f32_4 %258 = OpLoad %89 
                                       f32_3 %259 = OpVectorShuffle %258 %258 0 1 2 
                                         f32 %260 = OpDot %257 %259 
                                                      OpStore %192 %260 
                                         f32 %261 = OpLoad %192 
                                         f32 %262 = OpExtInst %1 32 %261 
                                                      OpStore %192 %262 
                                         f32 %264 = OpLoad %192 
                                       f32_3 %265 = OpCompositeConstruct %264 %264 %264 
                                       f32_4 %266 = OpLoad %89 
                                       f32_3 %267 = OpVectorShuffle %266 %266 0 1 2 
                                       f32_3 %268 = OpFMul %265 %267 
                                                      OpStore %263 %268 
                                       f32_4 %269 = OpLoad %39 
                                       f32_3 %270 = OpVectorShuffle %269 %269 0 1 2 
                                       f32_4 %271 = OpLoad %39 
                                       f32_3 %272 = OpVectorShuffle %271 %271 0 1 2 
                                         f32 %273 = OpDot %270 %272 
                                                      OpStore %192 %273 
                                         f32 %274 = OpLoad %192 
                                         f32 %275 = OpExtInst %1 32 %274 
                                                      OpStore %192 %275 
                                         f32 %276 = OpLoad %192 
                                       f32_3 %277 = OpCompositeConstruct %276 %276 %276 
                                       f32_4 %278 = OpLoad %39 
                                       f32_3 %279 = OpVectorShuffle %278 %278 0 1 2 
                                       f32_3 %280 = OpFMul %277 %279 
                                       f32_4 %281 = OpLoad %89 
                                       f32_4 %282 = OpVectorShuffle %281 %280 4 5 6 3 
                                                      OpStore %89 %282 
                                       f32_3 %283 = OpLoad %263 
                                       f32_4 %284 = OpLoad %89 
                                       f32_3 %285 = OpVectorShuffle %284 %284 0 1 2 
                                         f32 %286 = OpDot %283 %285 
                                                      OpStore %192 %286 
                                         f32 %287 = OpLoad %192 
                                         f32 %288 = OpExtInst %1 4 %287 
                                Private f32* %289 = OpAccessChain %134 %190 
                                         f32 %290 = OpLoad %289 
                                         f32 %291 = OpFMul %288 %290 
                                Private f32* %292 = OpAccessChain %63 %190 
                                         f32 %293 = OpLoad %292 
                                         f32 %294 = OpFAdd %291 %293 
                                Private f32* %295 = OpAccessChain %134 %190 
                                                      OpStore %295 %294 
                                Uniform f32* %300 = OpAccessChain %25 %138 %65 %299 
                                         f32 %301 = OpLoad %300 
                                        bool %303 = OpFOrdEqual %301 %302 
                                                      OpStore %298 %303 
                                        bool %304 = OpLoad %298 
                                                      OpSelectionMerge %308 None 
                                                      OpBranchConditional %304 %307 %311 
                                             %307 = OpLabel 
                                Private f32* %309 = OpAccessChain %134 %190 
                                         f32 %310 = OpLoad %309 
                                                      OpStore %306 %310 
                                                      OpBranch %308 
                                             %311 = OpLabel 
                                         f32 %312 = OpLoad %167 
                                                      OpStore %306 %312 
                                                      OpBranch %308 
                                             %308 = OpLabel 
                                         f32 %313 = OpLoad %306 
                                Private f32* %314 = OpAccessChain %263 %190 
                                                      OpStore %314 %313 
                                  Input f32* %316 = OpAccessChain %193 %117 
                                         f32 %317 = OpLoad %316 
                                        bool %318 = OpFOrdGreaterThanEqual %302 %317 
                                                      OpStore %315 %318 
                                        bool %319 = OpLoad %315 
                                         f32 %320 = OpSelect %319 %205 %302 
                                Private f32* %321 = OpAccessChain %134 %190 
                                                      OpStore %321 %320 
                                Uniform f32* %323 = OpAccessChain %25 %322 
                                         f32 %324 = OpLoad %323 
                                         f32 %325 = OpFNegate %324 
                                Uniform f32* %327 = OpAccessChain %25 %326 
                                         f32 %328 = OpLoad %327 
                                         f32 %329 = OpFAdd %325 %328 
                                                      OpStore %192 %329 
                                Private f32* %330 = OpAccessChain %134 %190 
                                         f32 %331 = OpLoad %330 
                                         f32 %332 = OpLoad %192 
                                         f32 %333 = OpFMul %331 %332 
                                Uniform f32* %334 = OpAccessChain %25 %322 
                                         f32 %335 = OpLoad %334 
                                         f32 %336 = OpFAdd %333 %335 
                                Private f32* %337 = OpAccessChain %134 %190 
                                                      OpStore %337 %336 
                                Private f32* %338 = OpAccessChain %134 %190 
                                         f32 %339 = OpLoad %338 
                                         f32 %340 = OpFMul %339 %178 
                                Uniform f32* %342 = OpAccessChain %25 %341 
                                         f32 %343 = OpLoad %342 
                                         f32 %344 = OpFAdd %340 %343 
                                Private f32* %345 = OpAccessChain %134 %190 
                                                      OpStore %345 %344 
                                Private f32* %346 = OpAccessChain %134 %190 
                                         f32 %347 = OpLoad %346 
                                Uniform f32* %349 = OpAccessChain %25 %348 
                                         f32 %350 = OpLoad %349 
                                         f32 %351 = OpFMul %347 %350 
                                Private f32* %352 = OpAccessChain %134 %190 
                                                      OpStore %352 %351 
                                Private f32* %353 = OpAccessChain %134 %190 
                                         f32 %354 = OpLoad %353 
                                         f32 %356 = OpFMul %354 %355 
                                Private f32* %357 = OpAccessChain %263 %254 
                                                      OpStore %357 %356 
                                       f32_3 %359 = OpLoad %263 
                                       f32_2 %360 = OpVectorShuffle %359 %359 0 2 
                                       f32_4 %361 = OpLoad vs_TEXCOORD1 
                                       f32_4 %362 = OpVectorShuffle %361 %360 0 4 2 5 
                                                      OpStore vs_TEXCOORD1 %362 
                                Private f32* %363 = OpAccessChain %263 %190 
                                         f32 %364 = OpLoad %363 
                                         f32 %365 = OpFDiv %355 %364 
                                                      OpStore %192 %365 
                                Uniform f32* %367 = OpAccessChain %25 %366 
                                         f32 %368 = OpLoad %367 
                                         f32 %369 = OpFNegate %368 
                                Uniform f32* %370 = OpAccessChain %25 %348 
                                         f32 %371 = OpLoad %370 
                                         f32 %372 = OpFMul %369 %371 
                                         f32 %373 = OpFAdd %372 %205 
                                                      OpStore %167 %373 
                                Uniform f32* %375 = OpAccessChain %25 %374 
                                         f32 %376 = OpLoad %375 
                                         f32 %377 = OpFNegate %376 
                                Uniform f32* %378 = OpAccessChain %25 %348 
                                         f32 %379 = OpLoad %378 
                                         f32 %380 = OpFMul %377 %379 
                                         f32 %381 = OpLoad %167 
                                         f32 %382 = OpFAdd %380 %381 
                                                      OpStore %167 %382 
                                         f32 %383 = OpLoad %167 
                                         f32 %384 = OpFMul %383 %355 
                                         f32 %385 = OpLoad %192 
                                         f32 %386 = OpFNegate %385 
                                         f32 %387 = OpFAdd %384 %386 
                                                      OpStore %167 %387 
                                Private f32* %388 = OpAccessChain %134 %190 
                                         f32 %389 = OpLoad %388 
                                         f32 %390 = OpFNegate %389 
                                         f32 %391 = OpFMul %390 %355 
                                         f32 %392 = OpLoad %167 
                                         f32 %393 = OpFAdd %391 %392 
                                 Output f32* %395 = OpAccessChain vs_TEXCOORD1 %190 
                                                      OpStore %395 %393 
                                Private f32* %396 = OpAccessChain %134 %190 
                                         f32 %397 = OpLoad %396 
                                         f32 %398 = OpFNegate %397 
                                         f32 %399 = OpFMul %398 %355 
                                         f32 %400 = OpFAdd %399 %355 
                                Private f32* %401 = OpAccessChain %134 %190 
                                                      OpStore %401 %400 
                                         f32 %402 = OpLoad %192 
                                Private f32* %403 = OpAccessChain %134 %190 
                                         f32 %404 = OpLoad %403 
                                         f32 %405 = OpFAdd %402 %404 
                                 Output f32* %406 = OpAccessChain vs_TEXCOORD1 %254 
                                                      OpStore %406 %405 
                              Uniform f32_4* %408 = OpAccessChain %25 %407 
                                       f32_4 %409 = OpLoad %408 
                                       f32_4 %412 = OpExtInst %1 40 %409 %411 
                                                      OpStore %63 %412 
                                       f32_4 %413 = OpLoad %63 
                                       f32_4 %416 = OpExtInst %1 37 %413 %415 
                                                      OpStore %63 %416 
                                       f32_3 %417 = OpLoad %9 
                                       f32_2 %418 = OpVectorShuffle %417 %417 0 1 
                                       f32_2 %421 = OpFMul %418 %420 
                                       f32_4 %422 = OpLoad %63 
                                       f32_2 %423 = OpVectorShuffle %422 %422 0 1 
                                       f32_2 %424 = OpFNegate %423 
                                       f32_2 %425 = OpFAdd %421 %424 
                                       f32_3 %426 = OpLoad %9 
                                       f32_3 %427 = OpVectorShuffle %426 %425 3 4 2 
                                                      OpStore %9 %427 
                                       f32_4 %428 = OpLoad %63 
                                       f32_2 %429 = OpVectorShuffle %428 %428 2 3 
                                       f32_2 %430 = OpFNegate %429 
                                       f32_3 %431 = OpLoad %9 
                                       f32_2 %432 = OpVectorShuffle %431 %431 0 1 
                                       f32_2 %433 = OpFAdd %430 %432 
                                       f32_4 %434 = OpLoad vs_TEXCOORD2 
                                       f32_4 %435 = OpVectorShuffle %434 %433 4 5 2 3 
                                                      OpStore vs_TEXCOORD2 %435 
                                       f32_4 %436 = OpLoad %39 
                                       f32_3 %437 = OpVectorShuffle %436 %436 1 1 1 
                              Uniform f32_4* %439 = OpAccessChain %25 %438 %43 
                                       f32_4 %440 = OpLoad %439 
                                       f32_3 %441 = OpVectorShuffle %440 %440 0 1 2 
                                       f32_3 %442 = OpFMul %437 %441 
                                                      OpStore %9 %442 
                              Uniform f32_4* %443 = OpAccessChain %25 %438 %48 
                                       f32_4 %444 = OpLoad %443 
                                       f32_3 %445 = OpVectorShuffle %444 %444 0 1 2 
                                       f32_4 %446 = OpLoad %39 
                                       f32_3 %447 = OpVectorShuffle %446 %446 0 0 0 
                                       f32_3 %448 = OpFMul %445 %447 
                                       f32_3 %449 = OpLoad %9 
                                       f32_3 %450 = OpFAdd %448 %449 
                                                      OpStore %9 %450 
                              Uniform f32_4* %453 = OpAccessChain %25 %438 %42 
                                       f32_4 %454 = OpLoad %453 
                                       f32_3 %455 = OpVectorShuffle %454 %454 0 1 2 
                                       f32_4 %456 = OpLoad %39 
                                       f32_3 %457 = OpVectorShuffle %456 %456 2 2 2 
                                       f32_3 %458 = OpFMul %455 %457 
                                       f32_3 %459 = OpLoad %9 
                                       f32_3 %460 = OpFAdd %458 %459 
                                                      OpStore vs_TEXCOORD3 %460 
                                  Input f32* %461 = OpAccessChain %193 %190 
                                         f32 %462 = OpLoad %461 
                                         f32 %464 = OpFMul %462 %463 
                                Private f32* %465 = OpAccessChain %9 %190 
                                                      OpStore %465 %464 
                                Private f32* %466 = OpAccessChain %9 %190 
                                         f32 %467 = OpLoad %466 
                                         f32 %468 = OpExtInst %1 8 %467 
                                Private f32* %469 = OpAccessChain %134 %190 
                                                      OpStore %469 %468 
                                Private f32* %470 = OpAccessChain %134 %190 
                                         f32 %471 = OpLoad %470 
                                         f32 %472 = OpFNegate %471 
                                         f32 %474 = OpFMul %472 %473 
                                  Input f32* %475 = OpAccessChain %193 %190 
                                         f32 %476 = OpLoad %475 
                                         f32 %477 = OpFAdd %474 %476 
                                Private f32* %478 = OpAccessChain %134 %117 
                                                      OpStore %478 %477 
                                       f32_2 %479 = OpLoad %134 
                                       f32_2 %482 = OpFMul %479 %481 
                                       f32_3 %483 = OpLoad %9 
                                       f32_3 %484 = OpVectorShuffle %483 %482 3 4 2 
                                                      OpStore %9 %484 
                                       f32_3 %486 = OpLoad %9 
                                       f32_2 %487 = OpVectorShuffle %486 %486 0 1 
                              Uniform f32_4* %489 = OpAccessChain %25 %488 
                                       f32_4 %490 = OpLoad %489 
                                       f32_2 %491 = OpVectorShuffle %490 %490 0 1 
                                       f32_2 %492 = OpFMul %487 %491 
                              Uniform f32_4* %493 = OpAccessChain %25 %488 
                                       f32_4 %494 = OpLoad %493 
                                       f32_2 %495 = OpVectorShuffle %494 %494 2 3 
                                       f32_2 %496 = OpFAdd %492 %495 
                                       f32_4 %497 = OpLoad vs_TEXCOORD5 
                                       f32_4 %498 = OpVectorShuffle %497 %496 4 5 2 3 
                                                      OpStore vs_TEXCOORD5 %498 
                                       f32_3 %499 = OpLoad %9 
                                       f32_2 %500 = OpVectorShuffle %499 %499 0 1 
                              Uniform f32_4* %502 = OpAccessChain %25 %501 
                                       f32_4 %503 = OpLoad %502 
                                       f32_2 %504 = OpVectorShuffle %503 %503 0 1 
                                       f32_2 %505 = OpFMul %500 %504 
                              Uniform f32_4* %506 = OpAccessChain %25 %501 
                                       f32_4 %507 = OpLoad %506 
                                       f32_2 %508 = OpVectorShuffle %507 %507 2 3 
                                       f32_2 %509 = OpFAdd %505 %508 
                                       f32_4 %510 = OpLoad vs_TEXCOORD5 
                                       f32_4 %511 = OpVectorShuffle %510 %509 0 1 4 5 
                                                      OpStore vs_TEXCOORD5 %511 
                                 Output f32* %512 = OpAccessChain %121 %48 %117 
                                         f32 %513 = OpLoad %512 
                                         f32 %514 = OpFNegate %513 
                                 Output f32* %515 = OpAccessChain %121 %48 %117 
                                                      OpStore %515 %514 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 332
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %22 %35 %128 %149 %286 %316 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpDecorate %9 RelaxedPrecision 
                                                      OpDecorate %12 RelaxedPrecision 
                                                      OpDecorate %12 DescriptorSet 12 
                                                      OpDecorate %12 Binding 12 
                                                      OpDecorate %13 RelaxedPrecision 
                                                      OpDecorate %16 RelaxedPrecision 
                                                      OpDecorate %16 DescriptorSet 16 
                                                      OpDecorate %16 Binding 16 
                                                      OpDecorate %17 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD0 Location 22 
                                                      OpDecorate %27 RelaxedPrecision 
                                                      OpDecorate %33 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD1 Location 35 
                                                      OpDecorate %45 RelaxedPrecision 
                                                      OpDecorate %46 RelaxedPrecision 
                                                      OpMemberDecorate %69 0 Offset 69 
                                                      OpMemberDecorate %69 1 Offset 69 
                                                      OpMemberDecorate %69 2 Offset 69 
                                                      OpMemberDecorate %69 3 RelaxedPrecision 
                                                      OpMemberDecorate %69 3 Offset 69 
                                                      OpMemberDecorate %69 4 Offset 69 
                                                      OpMemberDecorate %69 5 Offset 69 
                                                      OpMemberDecorate %69 6 Offset 69 
                                                      OpMemberDecorate %69 7 RelaxedPrecision 
                                                      OpMemberDecorate %69 7 Offset 69 
                                                      OpMemberDecorate %69 8 Offset 69 
                                                      OpMemberDecorate %69 9 Offset 69 
                                                      OpMemberDecorate %69 10 Offset 69 
                                                      OpDecorate %69 Block 
                                                      OpDecorate %71 DescriptorSet 71 
                                                      OpDecorate %71 Binding 71 
                                                      OpDecorate %85 RelaxedPrecision 
                                                      OpDecorate %89 RelaxedPrecision 
                                                      OpDecorate %93 RelaxedPrecision 
                                                      OpDecorate %94 RelaxedPrecision 
                                                      OpDecorate %95 RelaxedPrecision 
                                                      OpDecorate %101 RelaxedPrecision 
                                                      OpDecorate %103 RelaxedPrecision 
                                                      OpDecorate %104 RelaxedPrecision 
                                                      OpDecorate %110 RelaxedPrecision 
                                                      OpDecorate %111 RelaxedPrecision 
                                                      OpDecorate %113 RelaxedPrecision 
                                                      OpDecorate %114 RelaxedPrecision 
                                                      OpDecorate %115 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD5 Location 128 
                                                      OpDecorate %134 RelaxedPrecision 
                                                      OpDecorate %134 DescriptorSet 134 
                                                      OpDecorate %134 Binding 134 
                                                      OpDecorate %135 RelaxedPrecision 
                                                      OpDecorate %136 RelaxedPrecision 
                                                      OpDecorate %136 DescriptorSet 136 
                                                      OpDecorate %136 Binding 136 
                                                      OpDecorate %137 RelaxedPrecision 
                                                      OpDecorate %143 RelaxedPrecision 
                                                      OpDecorate %146 RelaxedPrecision 
                                                      OpDecorate %147 RelaxedPrecision 
                                                      OpDecorate %148 RelaxedPrecision 
                                                      OpDecorate %149 RelaxedPrecision 
                                                      OpDecorate %149 Location 149 
                                                      OpDecorate %150 RelaxedPrecision 
                                                      OpDecorate %151 RelaxedPrecision 
                                                      OpDecorate %154 RelaxedPrecision 
                                                      OpDecorate %155 RelaxedPrecision 
                                                      OpDecorate %156 RelaxedPrecision 
                                                      OpDecorate %172 RelaxedPrecision 
                                                      OpDecorate %173 RelaxedPrecision 
                                                      OpDecorate %173 DescriptorSet 173 
                                                      OpDecorate %173 Binding 173 
                                                      OpDecorate %174 RelaxedPrecision 
                                                      OpDecorate %175 RelaxedPrecision 
                                                      OpDecorate %175 DescriptorSet 175 
                                                      OpDecorate %175 Binding 175 
                                                      OpDecorate %176 RelaxedPrecision 
                                                      OpDecorate %181 RelaxedPrecision 
                                                      OpDecorate %182 RelaxedPrecision 
                                                      OpDecorate %183 RelaxedPrecision 
                                                      OpDecorate %184 RelaxedPrecision 
                                                      OpDecorate %188 RelaxedPrecision 
                                                      OpDecorate %190 RelaxedPrecision 
                                                      OpDecorate %191 RelaxedPrecision 
                                                      OpDecorate %197 RelaxedPrecision 
                                                      OpDecorate %203 RelaxedPrecision 
                                                      OpDecorate %204 RelaxedPrecision 
                                                      OpDecorate %209 RelaxedPrecision 
                                                      OpDecorate %211 RelaxedPrecision 
                                                      OpDecorate %212 RelaxedPrecision 
                                                      OpDecorate %218 RelaxedPrecision 
                                                      OpDecorate %219 RelaxedPrecision 
                                                      OpDecorate %220 RelaxedPrecision 
                                                      OpDecorate %221 RelaxedPrecision 
                                                      OpDecorate %222 RelaxedPrecision 
                                                      OpDecorate %227 RelaxedPrecision 
                                                      OpDecorate %228 RelaxedPrecision 
                                                      OpDecorate %233 RelaxedPrecision 
                                                      OpDecorate %235 RelaxedPrecision 
                                                      OpDecorate %236 RelaxedPrecision 
                                                      OpDecorate %238 RelaxedPrecision 
                                                      OpDecorate %239 RelaxedPrecision 
                                                      OpDecorate %262 RelaxedPrecision 
                                                      OpDecorate %264 RelaxedPrecision 
                                                      OpDecorate %265 RelaxedPrecision 
                                                      OpDecorate %266 RelaxedPrecision 
                                                      OpDecorate %267 RelaxedPrecision 
                                                      OpDecorate %268 RelaxedPrecision 
                                                      OpDecorate %269 RelaxedPrecision 
                                                      OpDecorate %270 RelaxedPrecision 
                                                      OpDecorate %271 RelaxedPrecision 
                                                      OpDecorate %272 RelaxedPrecision 
                                                      OpDecorate %273 RelaxedPrecision 
                                                      OpDecorate %274 RelaxedPrecision 
                                                      OpDecorate %275 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD2 Location 286 
                                                      OpDecorate %306 RelaxedPrecision 
                                                      OpDecorate %307 RelaxedPrecision 
                                                      OpDecorate %308 RelaxedPrecision 
                                                      OpDecorate %310 RelaxedPrecision 
                                                      OpDecorate %311 RelaxedPrecision 
                                                      OpDecorate %312 RelaxedPrecision 
                                                      OpDecorate %313 RelaxedPrecision 
                                                      OpDecorate %314 RelaxedPrecision 
                                                      OpDecorate %316 RelaxedPrecision 
                                                      OpDecorate %316 Location 316 
                                                      OpDecorate %317 RelaxedPrecision 
                                                      OpDecorate %318 RelaxedPrecision 
                                                      OpDecorate %319 RelaxedPrecision 
                                                      OpDecorate %320 RelaxedPrecision 
                                                      OpDecorate %322 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypePointer UniformConstant %10 
         UniformConstant read_only Texture2D* %12 = OpVariable UniformConstant 
                                              %14 = OpTypeSampler 
                                              %15 = OpTypePointer UniformConstant %14 
                     UniformConstant sampler* %16 = OpVariable UniformConstant 
                                              %18 = OpTypeSampledImage %10 
                                              %20 = OpTypeVector %6 2 
                                              %21 = OpTypePointer Input %20 
                        Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                              %25 = OpTypeInt 32 0 
                                          u32 %26 = OpConstant 3 
                                          u32 %28 = OpConstant 0 
                                              %29 = OpTypePointer Private %6 
                                 Private f32* %31 = OpVariable Private 
                                              %34 = OpTypePointer Input %7 
                        Input f32_4* vs_TEXCOORD1 = OpVariable Input 
                                              %36 = OpTypePointer Input %6 
                                              %41 = OpTypeVector %6 3 
                                              %42 = OpTypePointer Private %41 
                               Private f32_3* %43 = OpVariable Private 
                                          u32 %47 = OpConstant 2 
                                              %52 = OpTypeBool 
                                              %53 = OpTypePointer Private %52 
                                Private bool* %54 = OpVariable Private 
                                          f32 %56 = OpConstant 3.674022E-40 
                                              %59 = OpTypeInt 32 1 
                                          i32 %60 = OpConstant 0 
                                          i32 %61 = OpConstant 1 
                                          i32 %63 = OpConstant -1 
                                              %69 = OpTypeStruct %7 %6 %6 %7 %6 %6 %6 %7 %6 %6 %7 
                                              %70 = OpTypePointer Uniform %69 
Uniform struct {f32_4; f32; f32; f32_4; f32; f32; f32; f32_4; f32; f32; f32_4;}* %71 = OpVariable Uniform 
                                          i32 %72 = OpConstant 8 
                                              %73 = OpTypePointer Uniform %6 
                                          i32 %76 = OpConstant 9 
                                          u32 %81 = OpConstant 1 
                                 Private f32* %85 = OpVariable Private 
                                          f32 %87 = OpConstant 3.674022E-40 
                                 Private f32* %89 = OpVariable Private 
                                          f32 %91 = OpConstant 3.674022E-40 
                                 Private f32* %95 = OpVariable Private 
                                         i32 %116 = OpConstant 5 
                                         i32 %119 = OpConstant 6 
                                             %123 = OpTypePointer Uniform %7 
                        Input f32_4* vs_TEXCOORD5 = OpVariable Input 
        UniformConstant read_only Texture2D* %134 = OpVariable UniformConstant 
                    UniformConstant sampler* %136 = OpVariable UniformConstant 
                              Private f32_4* %142 = OpVariable Private 
                                         i32 %144 = OpConstant 7 
                              Private f32_3* %148 = OpVariable Private 
                                Input f32_4* %149 = OpVariable Input 
                                         i32 %152 = OpConstant 3 
                                         i32 %159 = OpConstant 2 
                              Private f32_4* %172 = OpVariable Private 
        UniformConstant read_only Texture2D* %173 = OpVariable UniformConstant 
                    UniformConstant sampler* %175 = OpVariable UniformConstant 
                                             %185 = OpTypePointer Private %20 
                              Private f32_2* %186 = OpVariable Private 
                              Private f32_4* %197 = OpVariable Private 
                              Private f32_4* %222 = OpVariable Private 
                                         i32 %241 = OpConstant 4 
                                Private f32* %248 = OpVariable Private 
                                         i32 %276 = OpConstant 10 
                        Input f32_4* vs_TEXCOORD2 = OpVariable Input 
                                         f32 %309 = OpConstant 3.674022E-40 
                                             %315 = OpTypePointer Output %7 
                               Output f32_4* %316 = OpVariable Output 
                               Private bool* %321 = OpVariable Private 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                          read_only Texture2D %13 = OpLoad %12 
                                      sampler %17 = OpLoad %16 
                   read_only Texture2DSampled %19 = OpSampledImage %13 %17 
                                        f32_2 %23 = OpLoad vs_TEXCOORD0 
                                        f32_4 %24 = OpImageSampleImplicitLod %19 %23 
                                          f32 %27 = OpCompositeExtract %24 3 
                                 Private f32* %30 = OpAccessChain %9 %28 
                                                      OpStore %30 %27 
                                 Private f32* %32 = OpAccessChain %9 %28 
                                          f32 %33 = OpLoad %32 
                                   Input f32* %37 = OpAccessChain vs_TEXCOORD1 %28 
                                          f32 %38 = OpLoad %37 
                                          f32 %39 = OpFNegate %38 
                                          f32 %40 = OpFAdd %33 %39 
                                                      OpStore %31 %40 
                                 Private f32* %44 = OpAccessChain %9 %28 
                                          f32 %45 = OpLoad %44 
                                          f32 %46 = OpFNegate %45 
                                   Input f32* %48 = OpAccessChain vs_TEXCOORD1 %47 
                                          f32 %49 = OpLoad %48 
                                          f32 %50 = OpFAdd %46 %49 
                                 Private f32* %51 = OpAccessChain %43 %28 
                                                      OpStore %51 %50 
                                          f32 %55 = OpLoad %31 
                                         bool %57 = OpFOrdLessThan %55 %56 
                                                      OpStore %54 %57 
                                         bool %58 = OpLoad %54 
                                          i32 %62 = OpSelect %58 %61 %60 
                                          i32 %64 = OpIMul %62 %63 
                                         bool %65 = OpINotEqual %64 %60 
                                                      OpSelectionMerge %67 None 
                                                      OpBranchConditional %65 %66 %67 
                                              %66 = OpLabel 
                                                      OpKill
                                              %67 = OpLabel 
                                 Uniform f32* %74 = OpAccessChain %71 %72 
                                          f32 %75 = OpLoad %74 
                                 Uniform f32* %77 = OpAccessChain %71 %76 
                                          f32 %78 = OpLoad %77 
                                          f32 %79 = OpFMul %75 %78 
                                                      OpStore %31 %79 
                                          f32 %80 = OpLoad %31 
                                   Input f32* %82 = OpAccessChain vs_TEXCOORD1 %81 
                                          f32 %83 = OpLoad %82 
                                          f32 %84 = OpFMul %80 %83 
                                                      OpStore %31 %84 
                                          f32 %86 = OpLoad %31 
                                          f32 %88 = OpExtInst %1 37 %86 %87 
                                                      OpStore %85 %88 
                                          f32 %90 = OpLoad %31 
                                          f32 %92 = OpFMul %90 %91 
                                                      OpStore %89 %92 
                                          f32 %93 = OpLoad %85 
                                          f32 %94 = OpExtInst %1 31 %93 
                                                      OpStore %85 %94 
                                 Private f32* %96 = OpAccessChain %43 %28 
                                          f32 %97 = OpLoad %96 
                                   Input f32* %98 = OpAccessChain vs_TEXCOORD1 %81 
                                          f32 %99 = OpLoad %98 
                                         f32 %100 = OpFMul %97 %99 
                                         f32 %101 = OpLoad %89 
                                         f32 %102 = OpFAdd %100 %101 
                                                      OpStore %95 %102 
                                         f32 %103 = OpLoad %95 
                                         f32 %104 = OpExtInst %1 43 %103 %56 %87 
                                                      OpStore %95 %104 
                                Private f32* %105 = OpAccessChain %43 %28 
                                         f32 %106 = OpLoad %105 
                                  Input f32* %107 = OpAccessChain vs_TEXCOORD1 %81 
                                         f32 %108 = OpLoad %107 
                                         f32 %109 = OpFMul %106 %108 
                                         f32 %110 = OpLoad %89 
                                         f32 %111 = OpFNegate %110 
                                         f32 %112 = OpFAdd %109 %111 
                                                      OpStore %89 %112 
                                         f32 %113 = OpLoad %85 
                                         f32 %114 = OpLoad %95 
                                         f32 %115 = OpFMul %113 %114 
                                                      OpStore %85 %115 
                                Uniform f32* %117 = OpAccessChain %71 %116 
                                         f32 %118 = OpLoad %117 
                                Uniform f32* %120 = OpAccessChain %71 %119 
                                         f32 %121 = OpLoad %120 
                                       f32_2 %122 = OpCompositeConstruct %118 %121 
                              Uniform f32_4* %124 = OpAccessChain %71 %60 
                                       f32_4 %125 = OpLoad %124 
                                       f32_2 %126 = OpVectorShuffle %125 %125 1 1 
                                       f32_2 %127 = OpFMul %122 %126 
                                       f32_4 %129 = OpLoad vs_TEXCOORD5 
                                       f32_2 %130 = OpVectorShuffle %129 %129 2 3 
                                       f32_2 %131 = OpFAdd %127 %130 
                                       f32_3 %132 = OpLoad %43 
                                       f32_3 %133 = OpVectorShuffle %132 %131 3 4 2 
                                                      OpStore %43 %133 
                         read_only Texture2D %135 = OpLoad %134 
                                     sampler %137 = OpLoad %136 
                  read_only Texture2DSampled %138 = OpSampledImage %135 %137 
                                       f32_3 %139 = OpLoad %43 
                                       f32_2 %140 = OpVectorShuffle %139 %139 0 1 
                                       f32_4 %141 = OpImageSampleImplicitLod %138 %140 
                                                      OpStore %9 %141 
                                       f32_4 %143 = OpLoad %9 
                              Uniform f32_4* %145 = OpAccessChain %71 %144 
                                       f32_4 %146 = OpLoad %145 
                                       f32_4 %147 = OpFMul %143 %146 
                                                      OpStore %142 %147 
                                       f32_4 %150 = OpLoad %149 
                                       f32_3 %151 = OpVectorShuffle %150 %150 0 1 2 
                              Uniform f32_4* %153 = OpAccessChain %71 %152 
                                       f32_4 %154 = OpLoad %153 
                                       f32_3 %155 = OpVectorShuffle %154 %154 0 1 2 
                                       f32_3 %156 = OpFMul %151 %155 
                                                      OpStore %148 %156 
                                Uniform f32* %157 = OpAccessChain %71 %61 
                                         f32 %158 = OpLoad %157 
                                Uniform f32* %160 = OpAccessChain %71 %159 
                                         f32 %161 = OpLoad %160 
                                       f32_2 %162 = OpCompositeConstruct %158 %161 
                              Uniform f32_4* %163 = OpAccessChain %71 %60 
                                       f32_4 %164 = OpLoad %163 
                                       f32_2 %165 = OpVectorShuffle %164 %164 1 1 
                                       f32_2 %166 = OpFMul %162 %165 
                                       f32_4 %167 = OpLoad vs_TEXCOORD5 
                                       f32_2 %168 = OpVectorShuffle %167 %167 0 1 
                                       f32_2 %169 = OpFAdd %166 %168 
                                       f32_3 %170 = OpLoad %43 
                                       f32_3 %171 = OpVectorShuffle %170 %169 3 4 2 
                                                      OpStore %43 %171 
                         read_only Texture2D %174 = OpLoad %173 
                                     sampler %176 = OpLoad %175 
                  read_only Texture2DSampled %177 = OpSampledImage %174 %176 
                                       f32_3 %178 = OpLoad %43 
                                       f32_2 %179 = OpVectorShuffle %178 %178 0 1 
                                       f32_4 %180 = OpImageSampleImplicitLod %177 %179 
                                                      OpStore %172 %180 
                                       f32_3 %181 = OpLoad %148 
                                       f32_4 %182 = OpLoad %172 
                                       f32_3 %183 = OpVectorShuffle %182 %182 0 1 2 
                                       f32_3 %184 = OpFMul %181 %183 
                                                      OpStore %43 %184 
                                Private f32* %187 = OpAccessChain %172 %26 
                                         f32 %188 = OpLoad %187 
                                Uniform f32* %189 = OpAccessChain %71 %152 %26 
                                         f32 %190 = OpLoad %189 
                                         f32 %191 = OpFMul %188 %190 
                                Private f32* %192 = OpAccessChain %186 %28 
                                                      OpStore %192 %191 
                                       f32_3 %193 = OpLoad %43 
                                       f32_2 %194 = OpLoad %186 
                                       f32_3 %195 = OpVectorShuffle %194 %194 0 0 0 
                                       f32_3 %196 = OpFMul %193 %195 
                                                      OpStore %148 %196 
                                       f32_4 %198 = OpLoad %142 
                                       f32_3 %199 = OpVectorShuffle %198 %198 0 1 2 
                                       f32_4 %200 = OpLoad %142 
                                       f32_3 %201 = OpVectorShuffle %200 %200 3 3 3 
                                       f32_3 %202 = OpFMul %199 %201 
                                       f32_3 %203 = OpLoad %148 
                                       f32_3 %204 = OpFNegate %203 
                                       f32_3 %205 = OpFAdd %202 %204 
                                       f32_4 %206 = OpLoad %197 
                                       f32_4 %207 = OpVectorShuffle %206 %205 4 5 6 3 
                                                      OpStore %197 %207 
                                Uniform f32* %208 = OpAccessChain %71 %144 %26 
                                         f32 %209 = OpLoad %208 
                                Private f32* %210 = OpAccessChain %9 %26 
                                         f32 %211 = OpLoad %210 
                                         f32 %212 = OpFMul %209 %211 
                                Private f32* %213 = OpAccessChain %186 %28 
                                         f32 %214 = OpLoad %213 
                                         f32 %215 = OpFNegate %214 
                                         f32 %216 = OpFAdd %212 %215 
                                Private f32* %217 = OpAccessChain %197 %26 
                                                      OpStore %217 %216 
                                         f32 %218 = OpLoad %85 
                                       f32_4 %219 = OpCompositeConstruct %218 %218 %218 %218 
                                       f32_4 %220 = OpLoad %197 
                                       f32_4 %221 = OpFMul %219 %220 
                                                      OpStore %197 %221 
                                       f32_3 %223 = OpLoad %43 
                                       f32_2 %224 = OpLoad %186 
                                       f32_3 %225 = OpVectorShuffle %224 %224 0 0 0 
                                       f32_3 %226 = OpFMul %223 %225 
                                       f32_4 %227 = OpLoad %197 
                                       f32_3 %228 = OpVectorShuffle %227 %227 0 1 2 
                                       f32_3 %229 = OpFAdd %226 %228 
                                       f32_4 %230 = OpLoad %222 
                                       f32_4 %231 = OpVectorShuffle %230 %229 4 5 6 3 
                                                      OpStore %222 %231 
                                Uniform f32* %232 = OpAccessChain %71 %152 %26 
                                         f32 %233 = OpLoad %232 
                                Private f32* %234 = OpAccessChain %172 %26 
                                         f32 %235 = OpLoad %234 
                                         f32 %236 = OpFMul %233 %235 
                                Private f32* %237 = OpAccessChain %197 %26 
                                         f32 %238 = OpLoad %237 
                                         f32 %239 = OpFAdd %236 %238 
                                Private f32* %240 = OpAccessChain %222 %26 
                                                      OpStore %240 %239 
                                Uniform f32* %242 = OpAccessChain %71 %241 
                                         f32 %243 = OpLoad %242 
                                Uniform f32* %244 = OpAccessChain %71 %76 
                                         f32 %245 = OpLoad %244 
                                         f32 %246 = OpFMul %243 %245 
                                Private f32* %247 = OpAccessChain %186 %28 
                                                      OpStore %247 %246 
                                Private f32* %249 = OpAccessChain %186 %28 
                                         f32 %250 = OpLoad %249 
                                  Input f32* %251 = OpAccessChain vs_TEXCOORD1 %81 
                                         f32 %252 = OpLoad %251 
                                         f32 %253 = OpFMul %250 %252 
                                                      OpStore %248 %253 
                                Private f32* %254 = OpAccessChain %186 %28 
                                         f32 %255 = OpLoad %254 
                                  Input f32* %256 = OpAccessChain vs_TEXCOORD1 %81 
                                         f32 %257 = OpLoad %256 
                                         f32 %258 = OpFMul %255 %257 
                                         f32 %259 = OpFAdd %258 %87 
                                                      OpStore %85 %259 
                                         f32 %260 = OpLoad %248 
                                         f32 %261 = OpFMul %260 %91 
                                         f32 %262 = OpLoad %89 
                                         f32 %263 = OpFAdd %261 %262 
                                                      OpStore %89 %263 
                                         f32 %264 = OpLoad %89 
                                         f32 %265 = OpLoad %85 
                                         f32 %266 = OpFDiv %264 %265 
                                                      OpStore %85 %266 
                                         f32 %267 = OpLoad %85 
                                         f32 %268 = OpExtInst %1 43 %267 %56 %87 
                                                      OpStore %85 %268 
                                         f32 %269 = OpLoad %85 
                                         f32 %270 = OpFNegate %269 
                                         f32 %271 = OpFAdd %270 %87 
                                                      OpStore %85 %271 
                                       f32_4 %272 = OpLoad %222 
                                         f32 %273 = OpLoad %85 
                                       f32_4 %274 = OpCompositeConstruct %273 %273 %273 %273 
                                       f32_4 %275 = OpFMul %272 %274 
                                                      OpStore %222 %275 
                              Uniform f32_4* %277 = OpAccessChain %71 %276 
                                       f32_4 %278 = OpLoad %277 
                                       f32_2 %279 = OpVectorShuffle %278 %278 0 1 
                                       f32_2 %280 = OpFNegate %279 
                              Uniform f32_4* %281 = OpAccessChain %71 %276 
                                       f32_4 %282 = OpLoad %281 
                                       f32_2 %283 = OpVectorShuffle %282 %282 2 3 
                                       f32_2 %284 = OpFAdd %280 %283 
                                                      OpStore %186 %284 
                                       f32_2 %285 = OpLoad %186 
                                       f32_4 %287 = OpLoad vs_TEXCOORD2 
                                       f32_2 %288 = OpVectorShuffle %287 %287 0 1 
                                       f32_2 %289 = OpExtInst %1 4 %288 
                                       f32_2 %290 = OpFNegate %289 
                                       f32_2 %291 = OpFAdd %285 %290 
                                                      OpStore %186 %291 
                                       f32_2 %292 = OpLoad %186 
                                       f32_4 %293 = OpLoad vs_TEXCOORD2 
                                       f32_2 %294 = OpVectorShuffle %293 %293 2 3 
                                       f32_2 %295 = OpFMul %292 %294 
                                                      OpStore %186 %295 
                                       f32_2 %296 = OpLoad %186 
                                       f32_2 %297 = OpCompositeConstruct %56 %56 
                                       f32_2 %298 = OpCompositeConstruct %87 %87 
                                       f32_2 %299 = OpExtInst %1 43 %296 %297 %298 
                                                      OpStore %186 %299 
                                Private f32* %300 = OpAccessChain %186 %81 
                                         f32 %301 = OpLoad %300 
                                Private f32* %302 = OpAccessChain %186 %28 
                                         f32 %303 = OpLoad %302 
                                         f32 %304 = OpFMul %301 %303 
                                                      OpStore %85 %304 
                                Private f32* %305 = OpAccessChain %222 %26 
                                         f32 %306 = OpLoad %305 
                                         f32 %307 = OpLoad %85 
                                         f32 %308 = OpFMul %306 %307 
                                         f32 %310 = OpFAdd %308 %309 
                                                      OpStore %89 %310 
                                       f32_4 %311 = OpLoad %222 
                                         f32 %312 = OpLoad %85 
                                       f32_4 %313 = OpCompositeConstruct %312 %312 %312 %312 
                                       f32_4 %314 = OpFMul %311 %313 
                                                      OpStore %222 %314 
                                       f32_4 %317 = OpLoad %222 
                                       f32_4 %318 = OpLoad %149 
                                       f32_4 %319 = OpVectorShuffle %318 %318 3 3 3 3 
                                       f32_4 %320 = OpFMul %317 %319 
                                                      OpStore %316 %320 
                                         f32 %322 = OpLoad %89 
                                        bool %323 = OpFOrdLessThan %322 %56 
                                                      OpStore %321 %323 
                                        bool %324 = OpLoad %321 
                                         i32 %325 = OpSelect %324 %61 %60 
                                         i32 %326 = OpIMul %325 %63 
                                        bool %327 = OpINotEqual %326 %60 
                                                      OpSelectionMerge %329 None 
                                                      OpBranchConditional %327 %328 %329 
                                             %328 = OpLabel 
                                                      OpKill
                                             %329 = OpLabel 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
}
Program "fp" {
SubProgram "gles3 hw_tier00 " {
""
}
SubProgram "gles3 hw_tier01 " {
""
}
SubProgram "gles3 hw_tier02 " {
""
}
SubProgram "vulkan hw_tier00 " {
""
}
SubProgram "vulkan hw_tier01 " {
""
}
SubProgram "vulkan hw_tier02 " {
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "UNITY_UI_ALPHACLIP" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "UNITY_UI_ALPHACLIP" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "UNITY_UI_ALPHACLIP" }
""
}
SubProgram "vulkan hw_tier00 " {
Keywords { "UNITY_UI_ALPHACLIP" }
""
}
SubProgram "vulkan hw_tier01 " {
Keywords { "UNITY_UI_ALPHACLIP" }
""
}
SubProgram "vulkan hw_tier02 " {
Keywords { "UNITY_UI_ALPHACLIP" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "UNITY_UI_CLIP_RECT" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "UNITY_UI_CLIP_RECT" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "UNITY_UI_CLIP_RECT" }
""
}
SubProgram "vulkan hw_tier00 " {
Keywords { "UNITY_UI_CLIP_RECT" }
""
}
SubProgram "vulkan hw_tier01 " {
Keywords { "UNITY_UI_CLIP_RECT" }
""
}
SubProgram "vulkan hw_tier02 " {
Keywords { "UNITY_UI_CLIP_RECT" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "UNITY_UI_ALPHACLIP" "UNITY_UI_CLIP_RECT" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "UNITY_UI_ALPHACLIP" "UNITY_UI_CLIP_RECT" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "UNITY_UI_ALPHACLIP" "UNITY_UI_CLIP_RECT" }
""
}
SubProgram "vulkan hw_tier00 " {
Keywords { "UNITY_UI_ALPHACLIP" "UNITY_UI_CLIP_RECT" }
""
}
SubProgram "vulkan hw_tier01 " {
Keywords { "UNITY_UI_ALPHACLIP" "UNITY_UI_CLIP_RECT" }
""
}
SubProgram "vulkan hw_tier02 " {
Keywords { "UNITY_UI_ALPHACLIP" "UNITY_UI_CLIP_RECT" }
""
}
}
}
}
Fallback "TextMeshPro/Mobile/Distance Field"
CustomEditor "TMPro.EditorUtilities.TMP_SDFShaderGUI"
}